kind: pipeline
type: docker
name: default

workspace:
  base: /go
  path: src/github.com/helix-ml/helix

steps:
- name: build-backend
  image: golang:1.23.4-alpine3.20
  environment:
    GITHUB_TOKEN:
      from_secret: github_token
  commands:
    - go build
  depends_on: []

- name: build-frontend
  image: node:21-alpine
  commands:
    - cd frontend
    - yarn install
    - yarn build
  depends_on: []

- name: unit-test
  image: golang:1.23.4-alpine3.20
  environment:
    OPENAI_API_KEY:
      from_secret: openai_tools
    TOGETHER_API_KEY:
      from_secret: openai_api_key
    TOGETHER_BASE_URL:
      from_secret: openai_base_url
    # Database config (running in a sidecar)
    POSTGRES_HOST: postgres
    TYPESENSE_URL: http://typesense:8108
    TYPESENSE_API_KEY: typesense
    TEXT_EXTRACTION_TIKA_URL: http://tika:9998
    RAG_CRAWLER_LAUNCHER_URL: http://chrome:7317
  commands:
    - go test -v ./...
  when:
    event:
    - push
  depends_on: []

- name: release-backend
  image: golang:1.23.4-bullseye
  when:
    event:
    - tag
    - push
  environment:
    GITHUB_TOKEN:
      from_secret: github_token
  commands:
    - go install github.com/mitchellh/gox@latest
    - |
      if [ -n "$DRONE_TAG" ]; then
        VERSION_FLAG="-X github.com/helixml/helix/api/pkg/data.Version=$DRONE_TAG"
      else
        VERSION_FLAG=""
      fi
      CGO_ENABLED=0 gox -osarch="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64" -ldflags "-extldflags '-static' $VERSION_FLAG" -output="helix-{{.OS}}-{{.Arch}}"
    - ./helix-linux-amd64 version
    - apt-get update && apt-get install -y curl
    - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    - apt-get update && apt-get install -y gh
    - sed -i "s/:latest/:$DRONE_TAG/g" docker-compose.yaml
    - |
      if [ -n "$DRONE_TAG" ]; then
        RELEASE=$(gh release list | grep "^$DRONE_TAG" | head -n 1 | awk '{print $1}')
        if [ -n "$RELEASE" ]; then
          echo "Uploading helix binaries, installer, and docker-compose.yaml to release $RELEASE"
          gh release upload "$RELEASE" helix-linux-amd64 helix-linux-arm64 helix-darwin-amd64 helix-darwin-arm64 helix-windows-amd64.exe docker-compose.yaml
        else
          echo "No matching release found for tag $DRONE_TAG"
        fi
      else
        echo "No tag present, skipping release upload"
      fi
  depends_on: [build-backend, build-frontend]


services:
- name: postgres
  image: postgres:12.13-alpine
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: postgres
- name: typesense
  image: typesense/typesense:27.0
  command: ["--data-dir", "/tmp", "--api-key", "typesense"]
- name: tika
  image: apache/tika:2.9.2.1
- name: chrome
  image: ghcr.io/go-rod/rod:v0.115.0

---
kind: pipeline
type: docker
name: build-controlplane

volumes:
  - name: dockersocket
    host:
      path: /var/run/docker.sock

steps:
- name: publish-image
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile
    auto_tag: true
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/controlplane
    username: admin
    password:
      from_secret: helix_registry_password
    build_args:
      - APP_VERSION=${DRONE_TAG:-${DRONE_COMMIT_SHA:-latest}}
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
    - main
    event:
    - tag
    - push

depends_on:
- default

---
kind: pipeline
type: docker
name: build-runner

volumes:
  - name: dockersocket
    host:
      path: /var/run/docker.sock

steps:
- name: publish-runner
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.runner
    auto_tag: true
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/runner
    build_args:
      # Runner with no baked models = empty
      # See https://github.com/helixml/base-images
      # and https://github.com/helixml/base-images/releases
      - TAG=2024-12-03a-empty
      - APP_VERSION=${DRONE_TAG:-${DRONE_COMMIT_SHA:-latest}}
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    event:
    - tag
    - push

depends_on:
- default

---
kind: pipeline
type: docker
name: build-runner-small

volumes:
  - name: dockersocket
    host:
      path: /var/run/docker.sock

steps:
- name: publish-runner
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.runner
    tags:
    - "${DRONE_TAG:-main}-small" # Default to branch
    - "latest-small"
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/runner
    build_args:
      # Runner with small models = small
      # See https://github.com/helixml/base-images
      # and https://github.com/helixml/base-images/releases
      - TAG=2024-12-03a-small
      - APP_VERSION=${DRONE_TAG:-${DRONE_COMMIT_SHA:-latest}}
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
    - main
    event:
    - tag

- name: publish-runner-branch
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.runner
    tags:
    - "${DRONE_COMMIT_SHA:-main}-small" # Default to branch
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/runner
    build_args:
      # Runner with small models = small
      # See https://github.com/helixml/base-images
      # and https://github.com/helixml/base-images/releases
      - TAG=2024-12-03a-small
      - APP_VERSION=${DRONE_TAG:-${DRONE_COMMIT_SHA:-latest}}
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
      exclude:
      - main
    event:
    - push


depends_on:
- default

---
kind: pipeline
type: docker
name: build-runner-large

volumes:
  - name: dockersocket
    host:
      path: /var/run/docker.sock

steps:
- name: publish-runner
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.runner
    tags:
    - "${DRONE_TAG:-main}-large"
    - "latest-large"
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/runner
    build_args:
      # Runner with large models = large
      # See https://github.com/helixml/base-images
      # and https://github.com/helixml/base-images/releases
      - TAG=2024-12-03a-large
      - APP_VERSION=${DRONE_TAG:-${DRONE_COMMIT_SHA:-latest}}
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
    - main
    event:
    - tag

- name: publish-runner-branch
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.runner
    tags:
    - "${DRONE_COMMIT_SHA:-main}-large"
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/runner
    build_args:
      # Runner with large models = large
      # See https://github.com/helixml/base-images
      # and https://github.com/helixml/base-images/releases
      - TAG=2024-12-03a-large
      - APP_VERSION=${DRONE_TAG:-${DRONE_COMMIT_SHA:-latest}}
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
      exclude:
      - main
    event:
    - push

depends_on:
- default

---
kind: pipeline
type: docker
name: build-gptscript-runner

volumes:
  - name: dockersocket
    host:
      path: /var/run/docker.sock

steps:
- name: publish-image
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.gptscript
    auto_tag: true
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/gptscript-runner
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
    - main
    event:
    - tag
    - push

depends_on:
- default

---
kind: pipeline
type: docker
name: build-gptscript_devserver

volumes:
  - name: dockersocket
    host:
      path: /var/run/docker.sock

steps:
- name: publish-gptscript_devserver
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.gptscript_devserver
    auto_tag: true
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/gptscript_devserver
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
    - main
    event:
    - tag
    - push

depends_on:
- default

---
kind: pipeline
type: docker
name: build-typesense_baked_models

volumes:
  - name: dockersocket
    host:
      path: /var/run/docker.sock

steps:
- name: publish-typesense_baked_models
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.typesense
    auto_tag: true
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/typesense
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
    - main
    event:
    - tag
    - push

depends_on:
- default

---
kind: pipeline
type: docker
name: build-demos

volumes:
  - name: dockersocket
    host:
      path: /var/run/docker.sock

steps:
- name: publish-demos
  image: plugins/docker
  pull: always
  settings:
    dockerfile: Dockerfile.demos
    auto_tag: true
    daemon_off: true
    registry: registry.helix.ml
    repo: registry.helix.ml/helix/demos
    username: admin
    password:
      from_secret: helix_registry_password
  volumes:
  - name: dockersocket
    path: /var/run/docker.sock
  when:
    branch:
    - main
    event:
    - tag
    - push

depends_on:
- default















