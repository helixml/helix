# ====================================================================
# Go build stage for screenshot-server and settings-sync-daemon
# ====================================================================
FROM golang:1.24 AS go-build-env
WORKDIR /app
COPY go.mod go.sum ./
RUN --mount=type=cache,target=/go/pkg/mod go mod download
COPY api ./api
WORKDIR /app/api
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 go build -buildvcs=false -ldflags "-s -w" -o /screenshot-server ./cmd/screenshot-server && \
    CGO_ENABLED=0 go build -buildvcs=false -ldflags "-s -w" -o /settings-sync-daemon ./cmd/settings-sync-daemon

# ====================================================================
# SwayFX Builder Stage (using official SwayFX build system)
# ====================================================================
FROM debian:trixie AS swayfx-builder

SHELL ["/bin/bash", "-e", "-o", "pipefail", "-c"]

ENV LANG=C.UTF-8

# Install SwayFX build dependencies (from official Dockerfile)
RUN apt-get update && apt-get install --yes --no-install-recommends \
    build-essential cmake cdbs devscripts equivs meson \
    wayland-protocols libwayland-dev libwayland-bin libwayland-client0 \
    libdrm-dev libxkbcommon-dev libudev-dev hwdata libseat-dev \
    libgles-dev libavutil-dev libavcodec-dev libavformat-dev libgbm-dev \
    xwayland libxcb-composite0-dev libxcb-icccm4-dev libxcb-res0-dev \
    libxcb-errors-dev libinput-dev libxcb-present-dev libxcb-render-util0-dev \
    libxcb-xinput-dev glslang-tools glslang-dev libpcre2-dev libjson-c-dev \
    libgdk-pixbuf-2.0-dev libsystemd-dev scdoc bash-completion \
    libpango1.0-dev libcairo2-dev libxcb-ewmh-dev libdisplay-info-dev \
    libliftoff-dev liblcms2-dev libvulkan-dev wget bash git ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Set exact versions from SwayFX's compose.yml
ENV WLROOTSVERSION=0.19.0 \
    WLROOTSLIBVERSION=0.19 \
    SWAYFXVERSION=0.5.3 \
    SCENEFXVERSION=0.4.1 \
    SCENEFXLIBVERSION=0.4

# Download wlroots, scenefx, and swayfx source
RUN wget "https://gitlab.freedesktop.org/wlroots/wlroots/-/archive/${WLROOTSVERSION}/wlroots-${WLROOTSVERSION}.tar.gz" && \
    tar -xf "wlroots-${WLROOTSVERSION}.tar.gz" && rm "wlroots-${WLROOTSVERSION}.tar.gz" && \
    wget "https://github.com/WillPower3309/swayfx/archive/refs/tags/${SWAYFXVERSION}.tar.gz" && \
    tar -xf "${SWAYFXVERSION}.tar.gz" && rm "${SWAYFXVERSION}.tar.gz" && \
    wget "https://github.com/wlrfx/scenefx/archive/refs/tags/${SCENEFXVERSION}.tar.gz" && \
    tar -xf "${SCENEFXVERSION}.tar.gz" && rm "${SCENEFXVERSION}.tar.gz"

# Build wlroots → scenefx → swayfx in order (using official build script logic)
RUN meson setup --prefix /opt "wlroots-${WLROOTSVERSION}/build/" "wlroots-${WLROOTSVERSION}" && \
    ninja -C "wlroots-${WLROOTSVERSION}/build/" && \
    ninja -C "wlroots-${WLROOTSVERSION}/build/" install && \
    PKG_CONFIG_PATH="/opt/lib/x86_64-linux-gnu/pkgconfig:${PKG_CONFIG_PATH}" \
    meson setup --prefix /opt --cmake-prefix-path /opt "scenefx-${SCENEFXVERSION}/build/" "scenefx-${SCENEFXVERSION}" && \
    ninja -C "scenefx-${SCENEFXVERSION}/build/" && \
    ninja -C "scenefx-${SCENEFXVERSION}/build/" install && \
    PKG_CONFIG_PATH="/opt/lib/x86_64-linux-gnu/pkgconfig:${PKG_CONFIG_PATH}" \
    meson setup --prefix /opt --cmake-prefix-path /opt "swayfx-${SWAYFXVERSION}/build/" "swayfx-${SWAYFXVERSION}" && \
    ninja -C "swayfx-${SWAYFXVERSION}/build/" && \
    ninja -C "swayfx-${SWAYFXVERSION}/build/" install

# ====================================================================
# Sway Personal Dev Environment
# ====================================================================
FROM ghcr.io/games-on-whales/base-app:edge

# Add passwordless sudo and basic tools
RUN apt-get update && \
    apt-get install -y sudo wget curl ca-certificates gnupg software-properties-common && \
    # Add passwordless sudo for all users in group 1000 (retro/user will be in this group)
    echo "%sudo ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    echo "retro ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    echo "user ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    # Clean up apt cache
    rm -rf /var/lib/apt/lists/*

# Install Firefox from Mozilla Team PPA (following GOW pattern)
COPY <<_APT_PIN /etc/apt/preferences.d/mozilla-firefox
Package: *
Pin: release o=LP-PPA-mozillateam
Pin-Priority: 1001
_APT_PIN

RUN apt-get update \
    && apt-get install -y --no-install-recommends software-properties-common gpg-agent \
    && add-apt-repository ppa:mozillateam/ppa \
    && apt-get install -y --no-install-recommends firefox libavcodec-extra \
    && apt-get remove -y software-properties-common gpg-agent \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

# Install Docker CLI only (daemon on host via socket mount)
RUN apt-get update \
    && apt-get install -y --no-install-recommends gnupg ca-certificates curl \
    && install -m 0755 -d /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
    && chmod a+r /etc/apt/keyrings/docker.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu plucky stable" > /etc/apt/sources.list.d/docker.list \
    && apt-get update \
    && apt-get install -y docker-ce-cli docker-compose-plugin \
    && rm -rf /var/lib/apt/lists/*

# Install grim, lsof, git, OnlyOffice, Ghostty, and emoji fonts
RUN apt-get update && apt-get install -y \
    # Screenshot tool for Wayland and debugging utilities
    grim lsof \
    # Git and SSH for repository access
    git openssh-client \
    # Emoji and icon fonts for waybar
    fonts-noto-color-emoji fonts-font-awesome fonts-dejavu-core \
    # OnlyOffice Desktop Editors
    && wget -q -O /tmp/onlyoffice.deb "https://github.com/ONLYOFFICE/DesktopEditors/releases/download/v8.2.1/onlyoffice-desktopeditors_amd64.deb" \
    && dpkg -i /tmp/onlyoffice.deb || apt-get install -yf \
    && rm /tmp/onlyoffice.deb \
    # GTK and GUI dependencies for Ghostty
    && apt-get install -y libgtk-4-dev libgtk-4-1 libadwaita-1-0 \
    libgraphene-1.0-0 libcairo2 libcairo-gobject2 \
    libgdk-pixbuf-2.0-0 libpango-1.0-0 libpangocairo-1.0-0 \
    libfontconfig1 libfreetype6 libharfbuzz0b \
    libglib2.0-0 libgobject-2.0-0 libgio-2.0-0 \
    # Additional runtime dependencies
    libegl1 libgl1 libwayland-client0 libwayland-cursor0 libwayland-egl1 \
    libx11-6 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 \
    && wget -q -O /tmp/ghostty.deb "https://github.com/mkasberg/ghostty-ubuntu/releases/download/1.1.3-0-ppa2/ghostty_1.1.3-0.ppa2_amd64_25.04.deb" \
    && dpkg -i /tmp/ghostty.deb && rm /tmp/ghostty.deb \
    && rm -rf /var/lib/apt/lists/*

# Download and set Helix logo as background
RUN mkdir -p /usr/share/backgrounds && \
    wget -O /usr/share/backgrounds/helix-logo.png https://helix.ml/assets/helix-logo.png

# Copy SwayFX from builder stage (replaces standard Sway with visual effects version)
COPY --from=swayfx-builder /opt/bin/sway /usr/bin/sway
COPY --from=swayfx-builder /opt/bin/swaymsg /usr/bin/swaymsg
COPY --from=swayfx-builder /opt/bin/swaybar /usr/bin/swaybar
COPY --from=swayfx-builder /opt/bin/swaynag /usr/bin/swaynag
COPY --from=swayfx-builder /opt/lib/x86_64-linux-gnu/ /usr/local/lib/x86_64-linux-gnu/

# Configure dynamic linker to find SwayFX libraries
RUN echo "/usr/local/lib/x86_64-linux-gnu" >> /etc/ld.so.conf.d/swayfx.conf && ldconfig

# Copy Sway custom configuration (placed in image, GOW will set up proper user directories at runtime)
RUN mkdir -p /cfg/sway
ADD wolf/sway-config/config /cfg/sway/custom-cfg

# Copy and setup Zed startup script
ADD wolf/sway-config/start-zed-helix.sh /usr/local/bin/start-zed-helix.sh
RUN chmod +x /usr/local/bin/start-zed-helix.sh

# Copy GOW startup script
ADD wolf/sway-config/startup-app.sh /opt/gow/startup-app.sh
RUN chmod +x /opt/gow/startup-app.sh

# Copy welcome README template for workspace initialization
RUN mkdir -p /opt/helix
ADD WORKDIR_README.md /opt/helix/WORKDIR_README.md

# Copy screenshot-server and settings-sync-daemon binaries from Go build stage
COPY --from=go-build-env /screenshot-server /usr/local/bin/screenshot-server
COPY --from=go-build-env /settings-sync-daemon /usr/local/bin/settings-sync-daemon

# Copy Zed binary (built with ./stack build-zed before Docker build)
# CRITICAL: Must be built with --features external_websocket_sync
RUN mkdir -p /zed-build
COPY zed-build/zed /zed-build/zed
RUN chmod +x /zed-build/zed