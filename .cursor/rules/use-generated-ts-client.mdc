---
description: 
globs: frontend/*
alwaysApply: false
---
Always use generated typescript client when communicating with the backend. Under no circumstances write custom API functions within components/hooks such as:

```
const url = `/api/v1/skills${queryString ? `?${queryString}` : ''}`;
const response = await api.get<BackendSkillsListResponse>(url);
return response;
```

Always use the generated client by:

```
import useApi from './useApi';

...

const api = useApi();
const apiClient = api.getApiClient();

return useQuery({
    queryKey: skillListQuery(category, provider),
    queryFn: () => apiClient.v1SkillsList({ category, provider }),    
    refetchInterval: options?.refetchInterval
  })
```

If you can't find the correct function on the API client (`const apiClient = api.getApiClient();`) then it's probably missing and we need to add it in the backend or it's missing the doc string and that's why it wasn't generated. Once doc string in the Go backend is added, run `./stack update_openapi` command to regenerate the API client.
