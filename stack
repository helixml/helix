#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export TMUX_SESSION=${TMUX_SESSION:="helix"}
export WITH_RUNNER=${WITH_RUNNER:=""}

function mock-runner() {
   go run . runner \
    --mock-runner \
    --api-host http://localhost \
    --api-token oh-hallo-insecure-token \
    --memory 24GB \
    --runner-id mock \
    --timeout-seconds 20 \
    --label gpu=4090 "$@"
}

function build() {
  docker-compose build
}

function start() {
  if tmux has-session -t "$TMUX_SESSION" 2>/dev/null; then
    echo "Session $TMUX_SESSION already exists. Attaching..."
    sleep 1
    tmux -2 attach -t $TMUX_SESSION
    exit 0;
  fi

  export MANUALRUN=1
  export LOG_LEVEL=debug

  echo "Starting docker-compose"
  if [[ -n "$WITH_RUNNER" ]]; then
    docker-compose --profile dev_gpu_runner up --build -d
  else
    docker-compose up -d
  fi
  sleep 2

  echo "Creating tmux session $TMUX_SESSION..."

  # get the size of the window and create a session at that size
  local screensize=$(stty size)
  local width=$(echo -n "$screensize" | awk '{print $2}')
  local height=$(echo -n "$screensize" | awk '{print $1}')
  tmux -2 new-session -d -s $TMUX_SESSION -x "$width" -y "$(($height - 1))"

  tmux split-window -v -d
  tmux select-pane -t 1
  tmux split-window -v -d
  tmux select-pane -t 0
  tmux split-window -v -d
  tmux select-pane -t 0
  tmux split-window -v -d

  tmux send-keys -t 0 'docker-compose logs -f frontend' C-m
  tmux send-keys -t 1 'docker-compose exec api bash' C-m
  tmux send-keys -t 1 'go run . serve' C-m
  tmux send-keys -t 2 'docker-compose exec unstructured bash' C-m
  tmux send-keys -t 2 'python3 src/main.py' C-m

  if [[ -n "$WITH_RUNNER" ]]; then
    tmux send-keys -t 3 'docker-compose exec dev_gpu_runner bash' C-m
    tmux send-keys -t 3 'go run . runner --api-host http://172.17.0.1 --api-token oh-hallo-insecure-token --memory 24GB --timeout-seconds 10 --runner-id dev-runner' C-m
  fi

  tmux -2 attach-session -t $TMUX_SESSION
}

function stop() {
  echo "Stopping tmux session $TMUX_SESSION..."
  tmux kill-session -t $TMUX_SESSION
  echo "Removing docker containers"
  docker rm -f $(docker ps -aq) || true
}

function db() {
  local subcommand="${1-cli}"
  shift
  if [[ "$subcommand" == "cli" ]]; then
    docker-compose exec postgres psql --user postgres "$@"
  elif [[ "$subcommand" == "pipe" ]]; then
    docker-compose exec -T postgres psql --user postgres "$@"
  fi
}

# Regenerate test mocks
function generate() {
  go generate ./...
}

function psql() {
  db cli "$@"
}

function psql_pipe() {
  db pipe "$@"
}

eval "$@"
