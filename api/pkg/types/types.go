package types

import (
	"context"
	"time"

	"github.com/bacalhau-project/lilypad/pkg/data"
)

type OwnerType string

const (
	OwnerTypeUser OwnerType = "user"
)

type PaymentType string

const (
	PaymentTypeAdmin  PaymentType = "admin"
	PaymentTypeStripe PaymentType = "stripe"
	PaymentTypeJob    PaymentType = "job"
)

type JobSpec struct {
	Module string            `json:"module"`
	Inputs map[string]string `json:"inputs"`
}

type JobData struct {
	Spec      JobSpec                `json:"spec"`
	Container data.JobOfferContainer `json:"container"`
}

type Job struct {
	ID        string    `json:"id"`
	Created   time.Time `json:"created"`
	Owner     string    `json:"owner"`
	OwnerType OwnerType `json:"owner_type"`
	State     string    `json:"state"`
	Status    string    `json:"status"`
	Data      JobData   `json:"data"`
}

type BalanceTransferData struct {
	JobID           string `json:"job_id"`
	StripePaymentID string `json:"stripe_payment_id"`
}

type BalanceTransfer struct {
	ID          string              `json:"id"`
	Created     time.Time           `json:"created"`
	Owner       string              `json:"owner"`
	OwnerType   OwnerType           `json:"owner_type"`
	PaymentType PaymentType         `json:"payment_type"`
	Amount      int                 `json:"amount"`
	Data        BalanceTransferData `json:"data"`
}

type Module struct {
	ID       string `json:"id"`
	Title    string `json:"title"`
	Cost     int    `json:"cost"`
	Template string `json:"template"`
}

type UserMessage struct {
	User     string   `json:"user"`     // e.g. User
	Message  string   `json:"message"`  // e.g. Prove pythagoras
	Uploads  []string `json:"uploads"`  // list of filepath paths
	Finished bool     `json:"finished"` // if true, the message has finished being written to, and is ready for a response (e.g. from the other participant)
}

type Interactions struct {
	Messages []UserMessage `json:"messages"`
}

type Session struct {
	ID string `json:"id"`
	// name that goes in the UI - ideally autogenerated by AI but for now can be
	// named manually
	Name    string    `json:"name"`
	Created time.Time `json:"created"`
	Updated time.Time `json:"updated"`
	// e.g. create, finetune
	Mode string `json:"mode"`
	// e.g. text, images
	Type string `json:"type"`
	// huggingface model name e.g. mistralai/Mistral-7B-Instruct-v0.1 or
	// stabilityai/stable-diffusion-xl-base-1.0
	ModelName string `json:"model_name"`
	// if type == finetune, we record a filestore path to e.g. lora file here
	// currently the only place you can do inference on a finetune is within the
	// session where the finetune was generated
	FinetuneFile string `json:"finetune_file"`
	// for now we just whack the entire history of the interaction in here, json
	// style
	Interactions Interactions `json:"interactions"`
	// uuid of owner entity
	Owner string `json:"owner"`
	// e.g. user, system, org
	OwnerType OwnerType `json:"owner_type"`
}

type TextToImage struct {
	// INPUTS
	Prompt     string `json:"prompt"` // TODO: add support for negative prompts, other adjustments
	OutputPath string `json:"output_path"`
	// OUTPUTS
	DebugStream  chan string
	OutputStream chan string
	Status       string   `json:"status"`        // running, finished, error
	ResultImages []string `json:"result_images"` // filenames relative to OutputPath, only expect this to be filled in when Status == finished
}

type LanguageModel struct {
	// INPUTS
	Interactions Interactions `json:"interactions"` // expects user to have given last instruction
	// OUTPUTS
	DebugStream  chan string
	OutputStream chan string // NB PYTHONUNBUFFERED=1
	Status       string      `json:"status"` // running, finished, error
}

type FinetuneTextToImage struct {
	// INPUTS
	InputPath  string `json:"input_path"`  // path to directory containing file_1.png and file_1.txt captions
	OutputPath string `json:"output_path"` // path to resulting directory
	// OUTPUTS
	DebugStream  chan string
	OutputStream chan string
	Status       string `json:"status"`      // running, finished, error
	OutputFile   string `json:"output_file"` // a specific e.g. LoRA filename within that directory
}

type FinetuneLanguageModel struct {
	// INPUTS
	InputDataset ShareGPT `json:"input_dataset"` // literal input training dataset - https://github.com/OpenAccess-AI-Collective/axolotl#dataset
	OutputPath   string   `json:"output_path"`   // path to resulting directory
	// OUTPUTS
	DebugStream  chan string
	OutputStream chan string
	Status       string `json:"status"`      // running, finished, error
	OutputFile   string `json:"output_file"` // a specific e.g. LoRA filename within the given output directory
}

type ShareGPT struct {
	Conversations []struct {
		From  string `json:"from"`
		Value string `json:"value"`
	} `json:"conversations"`
}

// passed between the api server and the controller
type RequestContext struct {
	Ctx       context.Context
	Owner     string
	OwnerType OwnerType
}

type UserStatus struct {
	User    string `json:"user"`
	Credits int    `json:"credits"`
}

type WebsocketEventType string

const (
	WebsocketEventJobUpdate     WebsocketEventType = "job"
	WebsocketEventSessionUpdate WebsocketEventType = "session"
)

type WebsocketEvent struct {
	Type    WebsocketEventType `json:"type"`
	Job     *Job               `json:"job"`
	Session *Session           `json:"session"`
}
