// Code generated by MockGen. DO NOT EDIT.
// Source: api/pkg/external-agent/executor.go
//
// Generated by this command:
//
//	mockgen -source api/pkg/external-agent/executor.go -destination api/pkg/external-agent/executor_mocks.go -package external_agent
//

// Package external_agent is a generated GoMock package.
package external_agent

import (
	context "context"
	reflect "reflect"
	time "time"

	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// CleanupExpiredSessions mocks base method.
func (m *MockExecutor) CleanupExpiredSessions(ctx context.Context, timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupExpiredSessions", ctx, timeout)
}

// CleanupExpiredSessions indicates an expected call of CleanupExpiredSessions.
func (mr *MockExecutorMockRecorder) CleanupExpiredSessions(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSessions", reflect.TypeOf((*MockExecutor)(nil).CleanupExpiredSessions), ctx, timeout)
}

// GetSession mocks base method.
func (m *MockExecutor) GetSession(sessionID string) (*ZedSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(*ZedSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockExecutorMockRecorder) GetSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockExecutor)(nil).GetSession), sessionID)
}

// ListSessions mocks base method.
func (m *MockExecutor) ListSessions() []*ZedSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessions")
	ret0, _ := ret[0].([]*ZedSession)
	return ret0
}

// ListSessions indicates an expected call of ListSessions.
func (mr *MockExecutorMockRecorder) ListSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockExecutor)(nil).ListSessions))
}

// StartZedAgent mocks base method.
func (m *MockExecutor) StartZedAgent(ctx context.Context, agent *types.ZedAgent) (*types.ZedAgentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartZedAgent", ctx, agent)
	ret0, _ := ret[0].(*types.ZedAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartZedAgent indicates an expected call of StartZedAgent.
func (mr *MockExecutorMockRecorder) StartZedAgent(ctx, agent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartZedAgent", reflect.TypeOf((*MockExecutor)(nil).StartZedAgent), ctx, agent)
}

// StopZedAgent mocks base method.
func (m *MockExecutor) StopZedAgent(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopZedAgent", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopZedAgent indicates an expected call of StopZedAgent.
func (mr *MockExecutorMockRecorder) StopZedAgent(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopZedAgent", reflect.TypeOf((*MockExecutor)(nil).StopZedAgent), ctx, sessionID)
}
