// Code generated by MockGen. DO NOT EDIT.
// Source: helix_openai_client.go
//
// Generated by this command:
//
//	mockgen -source helix_openai_client.go -destination helix_openai_client_mocks.go -package openai
//

// Package openai is a generated GoMock package.
package openai

import (
	context "context"
	reflect "reflect"

	types "github.com/helixml/helix/api/pkg/types"
	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockHelixClient is a mock of HelixClient interface.
type MockHelixClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelixClientMockRecorder
	isgomock struct{}
}

// MockHelixClientMockRecorder is the mock recorder for MockHelixClient.
type MockHelixClientMockRecorder struct {
	mock *MockHelixClient
}

// NewMockHelixClient creates a new mock instance.
func NewMockHelixClient(ctrl *gomock.Controller) *MockHelixClient {
	mock := &MockHelixClient{ctrl: ctrl}
	mock.recorder = &MockHelixClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelixClient) EXPECT() *MockHelixClientMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockHelixClient) CreateChatCompletion(ctx context.Context, request openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", ctx, request)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockHelixClientMockRecorder) CreateChatCompletion(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockHelixClient)(nil).CreateChatCompletion), ctx, request)
}

// CreateChatCompletionStream mocks base method.
func (m *MockHelixClient) CreateChatCompletionStream(ctx context.Context, request openai.ChatCompletionRequest) (*openai.ChatCompletionStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletionStream", ctx, request)
	ret0, _ := ret[0].(*openai.ChatCompletionStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletionStream indicates an expected call of CreateChatCompletionStream.
func (mr *MockHelixClientMockRecorder) CreateChatCompletionStream(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletionStream", reflect.TypeOf((*MockHelixClient)(nil).CreateChatCompletionStream), ctx, request)
}

// CreateEmbeddings mocks base method.
func (m *MockHelixClient) CreateEmbeddings(ctx context.Context, request openai.EmbeddingRequest) (openai.EmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmbeddings", ctx, request)
	ret0, _ := ret[0].(openai.EmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmbeddings indicates an expected call of CreateEmbeddings.
func (mr *MockHelixClientMockRecorder) CreateEmbeddings(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmbeddings", reflect.TypeOf((*MockHelixClient)(nil).CreateEmbeddings), ctx, request)
}

// CreateFlexibleEmbeddings mocks base method.
func (m *MockHelixClient) CreateFlexibleEmbeddings(ctx context.Context, request types.FlexibleEmbeddingRequest) (types.FlexibleEmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlexibleEmbeddings", ctx, request)
	ret0, _ := ret[0].(types.FlexibleEmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlexibleEmbeddings indicates an expected call of CreateFlexibleEmbeddings.
func (mr *MockHelixClientMockRecorder) CreateFlexibleEmbeddings(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlexibleEmbeddings", reflect.TypeOf((*MockHelixClient)(nil).CreateFlexibleEmbeddings), ctx, request)
}
