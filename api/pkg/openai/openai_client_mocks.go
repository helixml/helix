// Code generated by MockGen. DO NOT EDIT.
// Source: openai_client.go
//
// Generated by this command:
//
//	mockgen -source openai_client.go -destination openai_client_mocks.go -package openai
//

// Package openai is a generated GoMock package.
package openai

import (
	context "context"
	reflect "reflect"

	types "github.com/helixml/helix/api/pkg/types"
	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// APIKey mocks base method.
func (m *MockClient) APIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// APIKey indicates an expected call of APIKey.
func (mr *MockClientMockRecorder) APIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIKey", reflect.TypeOf((*MockClient)(nil).APIKey))
}

// BaseURL mocks base method.
func (m *MockClient) BaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// BaseURL indicates an expected call of BaseURL.
func (mr *MockClientMockRecorder) BaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseURL", reflect.TypeOf((*MockClient)(nil).BaseURL))
}

// BillingEnabled mocks base method.
func (m *MockClient) BillingEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// BillingEnabled indicates an expected call of BillingEnabled.
func (mr *MockClientMockRecorder) BillingEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingEnabled", reflect.TypeOf((*MockClient)(nil).BillingEnabled))
}

// CreateChatCompletion mocks base method.
func (m *MockClient) CreateChatCompletion(ctx context.Context, request openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", ctx, request)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockClientMockRecorder) CreateChatCompletion(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockClient)(nil).CreateChatCompletion), ctx, request)
}

// CreateChatCompletionStream mocks base method.
func (m *MockClient) CreateChatCompletionStream(ctx context.Context, request openai.ChatCompletionRequest) (*openai.ChatCompletionStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletionStream", ctx, request)
	ret0, _ := ret[0].(*openai.ChatCompletionStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletionStream indicates an expected call of CreateChatCompletionStream.
func (mr *MockClientMockRecorder) CreateChatCompletionStream(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletionStream", reflect.TypeOf((*MockClient)(nil).CreateChatCompletionStream), ctx, request)
}

// CreateEmbeddings mocks base method.
func (m *MockClient) CreateEmbeddings(ctx context.Context, request openai.EmbeddingRequest) (openai.EmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmbeddings", ctx, request)
	ret0, _ := ret[0].(openai.EmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmbeddings indicates an expected call of CreateEmbeddings.
func (mr *MockClientMockRecorder) CreateEmbeddings(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmbeddings", reflect.TypeOf((*MockClient)(nil).CreateEmbeddings), ctx, request)
}

// CreateFlexibleEmbeddings mocks base method.
func (m *MockClient) CreateFlexibleEmbeddings(ctx context.Context, request types.FlexibleEmbeddingRequest) (types.FlexibleEmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlexibleEmbeddings", ctx, request)
	ret0, _ := ret[0].(types.FlexibleEmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlexibleEmbeddings indicates an expected call of CreateFlexibleEmbeddings.
func (mr *MockClientMockRecorder) CreateFlexibleEmbeddings(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlexibleEmbeddings", reflect.TypeOf((*MockClient)(nil).CreateFlexibleEmbeddings), ctx, request)
}

// ListModels mocks base method.
func (m *MockClient) ListModels(ctx context.Context) ([]types.OpenAIModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", ctx)
	ret0, _ := ret[0].([]types.OpenAIModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockClientMockRecorder) ListModels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockClient)(nil).ListModels), ctx)
}
