// Code generated by MockGen. DO NOT EDIT.
// Source: openai_client.go

// Package openai is a generated GoMock package.
package openai

import (
	context "context"

	model "github.com/helixml/helix/api/pkg/model"
	go_openai2 "github.com/lukemarsden/go-openai2"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method
func (m *MockClient) CreateChatCompletion(ctx context.Context, request go_openai2.ChatCompletionRequest) (go_openai2.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", ctx, request)
	ret0, _ := ret[0].(go_openai2.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion
func (mr *MockClientMockRecorder) CreateChatCompletion(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockClient)(nil).CreateChatCompletion), ctx, request)
}

// CreateChatCompletionStream mocks base method
func (m *MockClient) CreateChatCompletionStream(ctx context.Context, request go_openai2.ChatCompletionRequest) (*go_openai2.ChatCompletionStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletionStream", ctx, request)
	ret0, _ := ret[0].(*go_openai2.ChatCompletionStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletionStream indicates an expected call of CreateChatCompletionStream
func (mr *MockClientMockRecorder) CreateChatCompletionStream(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletionStream", reflect.TypeOf((*MockClient)(nil).CreateChatCompletionStream), ctx, request)
}

// ListModels mocks base method
func (m *MockClient) ListModels(ctx context.Context) ([]model.OpenAIModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", ctx)
	ret0, _ := ret[0].([]model.OpenAIModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels
func (mr *MockClientMockRecorder) ListModels(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockClient)(nil).ListModels), ctx)
}
