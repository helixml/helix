// Code generated by MockGen. DO NOT EDIT.
// Source: provider_manager.go

// Package manager is a generated GoMock package.
package manager

import (
	context "context"
	reflect "reflect"

	openai "github.com/helixml/helix/api/pkg/openai"
	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderManager is a mock of ProviderManager interface.
type MockProviderManager struct {
	ctrl     *gomock.Controller
	recorder *MockProviderManagerMockRecorder
}

// MockProviderManagerMockRecorder is the mock recorder for MockProviderManager.
type MockProviderManagerMockRecorder struct {
	mock *MockProviderManager
}

// NewMockProviderManager creates a new mock instance.
func NewMockProviderManager(ctrl *gomock.Controller) *MockProviderManager {
	mock := &MockProviderManager{ctrl: ctrl}
	mock.recorder = &MockProviderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderManager) EXPECT() *MockProviderManagerMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockProviderManager) GetClient(ctx context.Context, req *GetClientRequest) (openai.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, req)
	ret0, _ := ret[0].(openai.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockProviderManagerMockRecorder) GetClient(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockProviderManager)(nil).GetClient), ctx, req)
}

// ListProviders mocks base method.
func (m *MockProviderManager) ListProviders(ctx context.Context) ([]types.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviders", ctx)
	ret0, _ := ret[0].([]types.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviders indicates an expected call of ListProviders.
func (mr *MockProviderManagerMockRecorder) ListProviders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviders", reflect.TypeOf((*MockProviderManager)(nil).ListProviders), ctx)
}
