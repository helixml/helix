// Code generated by MockGen. DO NOT EDIT.
// Source: gptscript.go
//
// Generated by this command:
//
//	mockgen -source gptscript.go -destination gptscript_mocks.go -package gptscript
//

// Package gptscript is a generated GoMock package.
package gptscript

import (
	context "context"
	reflect "reflect"

	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExecuteApp mocks base method.
func (m *MockExecutor) ExecuteApp(ctx context.Context, app *types.GptScriptGithubApp) (*types.GptScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteApp", ctx, app)
	ret0, _ := ret[0].(*types.GptScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteApp indicates an expected call of ExecuteApp.
func (mr *MockExecutorMockRecorder) ExecuteApp(ctx, app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteApp", reflect.TypeOf((*MockExecutor)(nil).ExecuteApp), ctx, app)
}

// ExecuteScript mocks base method.
func (m *MockExecutor) ExecuteScript(ctx context.Context, script *types.GptScript) (*types.GptScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteScript", ctx, script)
	ret0, _ := ret[0].(*types.GptScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript.
func (mr *MockExecutorMockRecorder) ExecuteScript(ctx, script any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockExecutor)(nil).ExecuteScript), ctx, script)
}
