// Code generated by MockGen. DO NOT EDIT.
// Source: rag.go

// Package rag is a generated GoMock package.
package rag

import (
	context "context"
	reflect "reflect"
	
	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRAG is a mock of RAG interface.
type MockRAG struct {
	ctrl     *gomock.Controller
	recorder *MockRAGMockRecorder
}

// MockRAGMockRecorder is the mock recorder for MockRAG.
type MockRAGMockRecorder struct {
	mock *MockRAG
}

// NewMockRAG creates a new mock instance.
func NewMockRAG(ctrl *gomock.Controller) *MockRAG {
	mock := &MockRAG{ctrl: ctrl}
	mock.recorder = &MockRAGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRAG) EXPECT() *MockRAGMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRAG) Delete(ctx context.Context, req *types.DeleteIndexRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRAGMockRecorder) Delete(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRAG)(nil).Delete), ctx, req)
}

// Index mocks base method.
func (m *MockRAG) Index(ctx context.Context, req *types.SessionRAGIndexChunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockRAGMockRecorder) Index(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockRAG)(nil).Index), ctx, req)
}

// Query mocks base method.
func (m *MockRAG) Query(ctx context.Context, q *types.SessionRAGQuery) ([]*types.SessionRAGResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, q)
	ret0, _ := ret[0].([]*types.SessionRAGResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockRAGMockRecorder) Query(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRAG)(nil).Query), ctx, q)
}
