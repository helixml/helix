// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source store.go -destination store_mocks.go -package store
//

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"
	time "time"

	license "github.com/helixml/helix/api/pkg/license"
	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CleanupExpiredSessions mocks base method.
func (m *MockStore) CleanupExpiredSessions(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredSessions", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupExpiredSessions indicates an expected call of CleanupExpiredSessions.
func (mr *MockStoreMockRecorder) CleanupExpiredSessions(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSessions", reflect.TypeOf((*MockStore)(nil).CleanupExpiredSessions), ctx, timeout)
}

// CleanupStaleAgentRunners mocks base method.
func (m *MockStore) CleanupStaleAgentRunners(ctx context.Context, staleThreshold time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupStaleAgentRunners", ctx, staleThreshold)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupStaleAgentRunners indicates an expected call of CleanupStaleAgentRunners.
func (mr *MockStoreMockRecorder) CleanupStaleAgentRunners(ctx, staleThreshold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupStaleAgentRunners", reflect.TypeOf((*MockStore)(nil).CleanupStaleAgentRunners), ctx, staleThreshold)
}

// CountUsers mocks base method.
func (m *MockStore) CountUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockStoreMockRecorder) CountUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockStore)(nil).CountUsers), ctx)
}

// CreateAPIKey mocks base method.
func (m *MockStore) CreateAPIKey(ctx context.Context, apiKey *types.ApiKey) (*types.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(*types.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockStoreMockRecorder) CreateAPIKey(ctx, apiKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockStore)(nil).CreateAPIKey), ctx, apiKey)
}

// CreateAccessGrant mocks base method.
func (m *MockStore) CreateAccessGrant(ctx context.Context, resourceAccess *types.AccessGrant, roles []*types.Role) (*types.AccessGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrant", ctx, resourceAccess, roles)
	ret0, _ := ret[0].(*types.AccessGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessGrant indicates an expected call of CreateAccessGrant.
func (mr *MockStoreMockRecorder) CreateAccessGrant(ctx, resourceAccess, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrant", reflect.TypeOf((*MockStore)(nil).CreateAccessGrant), ctx, resourceAccess, roles)
}

// CreateAccessGrantRoleBinding mocks base method.
func (m *MockStore) CreateAccessGrantRoleBinding(ctx context.Context, binding *types.AccessGrantRoleBinding) (*types.AccessGrantRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessGrantRoleBinding", ctx, binding)
	ret0, _ := ret[0].(*types.AccessGrantRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessGrantRoleBinding indicates an expected call of CreateAccessGrantRoleBinding.
func (mr *MockStoreMockRecorder) CreateAccessGrantRoleBinding(ctx, binding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessGrantRoleBinding", reflect.TypeOf((*MockStore)(nil).CreateAccessGrantRoleBinding), ctx, binding)
}

// CreateAgentRunner mocks base method.
func (m *MockStore) CreateAgentRunner(ctx context.Context, runnerID string) (*types.AgentRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentRunner", ctx, runnerID)
	ret0, _ := ret[0].(*types.AgentRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentRunner indicates an expected call of CreateAgentRunner.
func (mr *MockStoreMockRecorder) CreateAgentRunner(ctx, runnerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentRunner", reflect.TypeOf((*MockStore)(nil).CreateAgentRunner), ctx, runnerID)
}

// CreateAgentSession mocks base method.
func (m *MockStore) CreateAgentSession(ctx context.Context, session *types.AgentSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAgentSession indicates an expected call of CreateAgentSession.
func (mr *MockStoreMockRecorder) CreateAgentSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentSession", reflect.TypeOf((*MockStore)(nil).CreateAgentSession), ctx, session)
}

// CreateAgentSessionStatus mocks base method.
func (m *MockStore) CreateAgentSessionStatus(ctx context.Context, status *types.AgentSessionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentSessionStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAgentSessionStatus indicates an expected call of CreateAgentSessionStatus.
func (mr *MockStoreMockRecorder) CreateAgentSessionStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentSessionStatus", reflect.TypeOf((*MockStore)(nil).CreateAgentSessionStatus), ctx, status)
}

// CreateAgentWorkItem mocks base method.
func (m *MockStore) CreateAgentWorkItem(ctx context.Context, workItem *types.AgentWorkItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentWorkItem", ctx, workItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAgentWorkItem indicates an expected call of CreateAgentWorkItem.
func (mr *MockStoreMockRecorder) CreateAgentWorkItem(ctx, workItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentWorkItem", reflect.TypeOf((*MockStore)(nil).CreateAgentWorkItem), ctx, workItem)
}

// CreateApp mocks base method.
func (m *MockStore) CreateApp(ctx context.Context, tool *types.App) (*types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", ctx, tool)
	ret0, _ := ret[0].(*types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockStoreMockRecorder) CreateApp(ctx, tool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockStore)(nil).CreateApp), ctx, tool)
}

// CreateDataEntity mocks base method.
func (m *MockStore) CreateDataEntity(ctx context.Context, dataEntity *types.DataEntity) (*types.DataEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataEntity", ctx, dataEntity)
	ret0, _ := ret[0].(*types.DataEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataEntity indicates an expected call of CreateDataEntity.
func (mr *MockStoreMockRecorder) CreateDataEntity(ctx, dataEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataEntity", reflect.TypeOf((*MockStore)(nil).CreateDataEntity), ctx, dataEntity)
}

// CreateDynamicModelInfo mocks base method.
func (m *MockStore) CreateDynamicModelInfo(ctx context.Context, modelInfo *types.DynamicModelInfo) (*types.DynamicModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDynamicModelInfo", ctx, modelInfo)
	ret0, _ := ret[0].(*types.DynamicModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDynamicModelInfo indicates an expected call of CreateDynamicModelInfo.
func (mr *MockStoreMockRecorder) CreateDynamicModelInfo(ctx, modelInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDynamicModelInfo", reflect.TypeOf((*MockStore)(nil).CreateDynamicModelInfo), ctx, modelInfo)
}

// CreateHelpRequest mocks base method.
func (m *MockStore) CreateHelpRequest(ctx context.Context, request *types.HelpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHelpRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHelpRequest indicates an expected call of CreateHelpRequest.
func (mr *MockStoreMockRecorder) CreateHelpRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHelpRequest", reflect.TypeOf((*MockStore)(nil).CreateHelpRequest), ctx, request)
}

// CreateImplementationSessions mocks base method.
func (m *MockStore) CreateImplementationSessions(ctx context.Context, specTaskID string, config *types.SpecTaskImplementationSessionsCreateRequest) ([]*types.SpecTaskWorkSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImplementationSessions", ctx, specTaskID, config)
	ret0, _ := ret[0].([]*types.SpecTaskWorkSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImplementationSessions indicates an expected call of CreateImplementationSessions.
func (mr *MockStoreMockRecorder) CreateImplementationSessions(ctx, specTaskID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImplementationSessions", reflect.TypeOf((*MockStore)(nil).CreateImplementationSessions), ctx, specTaskID, config)
}

// CreateInteraction mocks base method.
func (m *MockStore) CreateInteraction(ctx context.Context, interaction *types.Interaction) (*types.Interaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInteraction", ctx, interaction)
	ret0, _ := ret[0].(*types.Interaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInteraction indicates an expected call of CreateInteraction.
func (mr *MockStoreMockRecorder) CreateInteraction(ctx, interaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInteraction", reflect.TypeOf((*MockStore)(nil).CreateInteraction), ctx, interaction)
}

// CreateInteractions mocks base method.
func (m *MockStore) CreateInteractions(ctx context.Context, interactions ...*types.Interaction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range interactions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInteractions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInteractions indicates an expected call of CreateInteractions.
func (mr *MockStoreMockRecorder) CreateInteractions(ctx any, interactions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, interactions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInteractions", reflect.TypeOf((*MockStore)(nil).CreateInteractions), varargs...)
}

// CreateJobCompletion mocks base method.
func (m *MockStore) CreateJobCompletion(ctx context.Context, completion *types.JobCompletion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobCompletion", ctx, completion)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJobCompletion indicates an expected call of CreateJobCompletion.
func (mr *MockStoreMockRecorder) CreateJobCompletion(ctx, completion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobCompletion", reflect.TypeOf((*MockStore)(nil).CreateJobCompletion), ctx, completion)
}

// CreateKnowledge mocks base method.
func (m *MockStore) CreateKnowledge(ctx context.Context, knowledge *types.Knowledge) (*types.Knowledge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledge", ctx, knowledge)
	ret0, _ := ret[0].(*types.Knowledge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledge indicates an expected call of CreateKnowledge.
func (mr *MockStoreMockRecorder) CreateKnowledge(ctx, knowledge any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledge", reflect.TypeOf((*MockStore)(nil).CreateKnowledge), ctx, knowledge)
}

// CreateKnowledgeVersion mocks base method.
func (m *MockStore) CreateKnowledgeVersion(ctx context.Context, version *types.KnowledgeVersion) (*types.KnowledgeVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledgeVersion", ctx, version)
	ret0, _ := ret[0].(*types.KnowledgeVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledgeVersion indicates an expected call of CreateKnowledgeVersion.
func (mr *MockStoreMockRecorder) CreateKnowledgeVersion(ctx, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeVersion", reflect.TypeOf((*MockStore)(nil).CreateKnowledgeVersion), ctx, version)
}

// CreateLLMCall mocks base method.
func (m *MockStore) CreateLLMCall(ctx context.Context, call *types.LLMCall) (*types.LLMCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLLMCall", ctx, call)
	ret0, _ := ret[0].(*types.LLMCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLLMCall indicates an expected call of CreateLLMCall.
func (mr *MockStoreMockRecorder) CreateLLMCall(ctx, call any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLLMCall", reflect.TypeOf((*MockStore)(nil).CreateLLMCall), ctx, call)
}

// CreateModel mocks base method.
func (m *MockStore) CreateModel(ctx context.Context, model *types.Model) (*types.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", ctx, model)
	ret0, _ := ret[0].(*types.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockStoreMockRecorder) CreateModel(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockStore)(nil).CreateModel), ctx, model)
}

// CreateOAuthConnection mocks base method.
func (m *MockStore) CreateOAuthConnection(ctx context.Context, connection *types.OAuthConnection) (*types.OAuthConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuthConnection", ctx, connection)
	ret0, _ := ret[0].(*types.OAuthConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOAuthConnection indicates an expected call of CreateOAuthConnection.
func (mr *MockStoreMockRecorder) CreateOAuthConnection(ctx, connection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuthConnection", reflect.TypeOf((*MockStore)(nil).CreateOAuthConnection), ctx, connection)
}

// CreateOAuthProvider mocks base method.
func (m *MockStore) CreateOAuthProvider(ctx context.Context, provider *types.OAuthProvider) (*types.OAuthProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuthProvider", ctx, provider)
	ret0, _ := ret[0].(*types.OAuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOAuthProvider indicates an expected call of CreateOAuthProvider.
func (mr *MockStoreMockRecorder) CreateOAuthProvider(ctx, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuthProvider", reflect.TypeOf((*MockStore)(nil).CreateOAuthProvider), ctx, provider)
}

// CreateOAuthRequestToken mocks base method.
func (m *MockStore) CreateOAuthRequestToken(ctx context.Context, token *types.OAuthRequestToken) (*types.OAuthRequestToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuthRequestToken", ctx, token)
	ret0, _ := ret[0].(*types.OAuthRequestToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOAuthRequestToken indicates an expected call of CreateOAuthRequestToken.
func (mr *MockStoreMockRecorder) CreateOAuthRequestToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuthRequestToken", reflect.TypeOf((*MockStore)(nil).CreateOAuthRequestToken), ctx, token)
}

// CreateOrganization mocks base method.
func (m *MockStore) CreateOrganization(ctx context.Context, org *types.Organization) (*types.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, org)
	ret0, _ := ret[0].(*types.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockStoreMockRecorder) CreateOrganization(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockStore)(nil).CreateOrganization), ctx, org)
}

// CreateOrganizationMembership mocks base method.
func (m *MockStore) CreateOrganizationMembership(ctx context.Context, membership *types.OrganizationMembership) (*types.OrganizationMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationMembership", ctx, membership)
	ret0, _ := ret[0].(*types.OrganizationMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationMembership indicates an expected call of CreateOrganizationMembership.
func (mr *MockStoreMockRecorder) CreateOrganizationMembership(ctx, membership any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationMembership", reflect.TypeOf((*MockStore)(nil).CreateOrganizationMembership), ctx, membership)
}

// CreatePersonalDevEnvironment mocks base method.
func (m *MockStore) CreatePersonalDevEnvironment(ctx context.Context, pde *types.PersonalDevEnvironment) (*types.PersonalDevEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersonalDevEnvironment", ctx, pde)
	ret0, _ := ret[0].(*types.PersonalDevEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePersonalDevEnvironment indicates an expected call of CreatePersonalDevEnvironment.
func (mr *MockStoreMockRecorder) CreatePersonalDevEnvironment(ctx, pde any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonalDevEnvironment", reflect.TypeOf((*MockStore)(nil).CreatePersonalDevEnvironment), ctx, pde)
}

// CreateProject mocks base method.
func (m *MockStore) CreateProject(ctx context.Context, project *types.Project) (*types.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, project)
	ret0, _ := ret[0].(*types.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockStoreMockRecorder) CreateProject(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockStore)(nil).CreateProject), ctx, project)
}

// CreateProviderEndpoint mocks base method.
func (m *MockStore) CreateProviderEndpoint(ctx context.Context, providerEndpoint *types.ProviderEndpoint) (*types.ProviderEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProviderEndpoint", ctx, providerEndpoint)
	ret0, _ := ret[0].(*types.ProviderEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProviderEndpoint indicates an expected call of CreateProviderEndpoint.
func (mr *MockStoreMockRecorder) CreateProviderEndpoint(ctx, providerEndpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProviderEndpoint", reflect.TypeOf((*MockStore)(nil).CreateProviderEndpoint), ctx, providerEndpoint)
}

// CreateRole mocks base method.
func (m *MockStore) CreateRole(ctx context.Context, role *types.Role) (*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockStoreMockRecorder) CreateRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockStore)(nil).CreateRole), ctx, role)
}

// CreateSSHKey mocks base method.
func (m *MockStore) CreateSSHKey(ctx context.Context, key *types.SSHKey) (*types.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSHKey", ctx, key)
	ret0, _ := ret[0].(*types.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSHKey indicates an expected call of CreateSSHKey.
func (mr *MockStoreMockRecorder) CreateSSHKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSHKey", reflect.TypeOf((*MockStore)(nil).CreateSSHKey), ctx, key)
}

// CreateSecret mocks base method.
func (m *MockStore) CreateSecret(ctx context.Context, secret *types.Secret) (*types.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, secret)
	ret0, _ := ret[0].(*types.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockStoreMockRecorder) CreateSecret(ctx, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockStore)(nil).CreateSecret), ctx, secret)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(ctx context.Context, session types.Session) (*types.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(*types.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), ctx, session)
}

// CreateSlackThread mocks base method.
func (m *MockStore) CreateSlackThread(ctx context.Context, thread *types.SlackThread) (*types.SlackThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlackThread", ctx, thread)
	ret0, _ := ret[0].(*types.SlackThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlackThread indicates an expected call of CreateSlackThread.
func (mr *MockStoreMockRecorder) CreateSlackThread(ctx, thread any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlackThread", reflect.TypeOf((*MockStore)(nil).CreateSlackThread), ctx, thread)
}

// CreateSlot mocks base method.
func (m *MockStore) CreateSlot(ctx context.Context, slot *types.RunnerSlot) (*types.RunnerSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlot", ctx, slot)
	ret0, _ := ret[0].(*types.RunnerSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlot indicates an expected call of CreateSlot.
func (mr *MockStoreMockRecorder) CreateSlot(ctx, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlot", reflect.TypeOf((*MockStore)(nil).CreateSlot), ctx, slot)
}

// CreateSpecTask mocks base method.
func (m *MockStore) CreateSpecTask(ctx context.Context, task *types.SpecTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpecTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpecTask indicates an expected call of CreateSpecTask.
func (mr *MockStoreMockRecorder) CreateSpecTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpecTask", reflect.TypeOf((*MockStore)(nil).CreateSpecTask), ctx, task)
}

// CreateSpecTaskImplementationTask mocks base method.
func (m *MockStore) CreateSpecTaskImplementationTask(ctx context.Context, implTask *types.SpecTaskImplementationTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpecTaskImplementationTask", ctx, implTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpecTaskImplementationTask indicates an expected call of CreateSpecTaskImplementationTask.
func (mr *MockStoreMockRecorder) CreateSpecTaskImplementationTask(ctx, implTask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpecTaskImplementationTask", reflect.TypeOf((*MockStore)(nil).CreateSpecTaskImplementationTask), ctx, implTask)
}

// CreateSpecTaskWorkSession mocks base method.
func (m *MockStore) CreateSpecTaskWorkSession(ctx context.Context, workSession *types.SpecTaskWorkSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpecTaskWorkSession", ctx, workSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpecTaskWorkSession indicates an expected call of CreateSpecTaskWorkSession.
func (mr *MockStoreMockRecorder) CreateSpecTaskWorkSession(ctx, workSession any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpecTaskWorkSession", reflect.TypeOf((*MockStore)(nil).CreateSpecTaskWorkSession), ctx, workSession)
}

// CreateSpecTaskZedThread mocks base method.
func (m *MockStore) CreateSpecTaskZedThread(ctx context.Context, zedThread *types.SpecTaskZedThread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpecTaskZedThread", ctx, zedThread)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpecTaskZedThread indicates an expected call of CreateSpecTaskZedThread.
func (mr *MockStoreMockRecorder) CreateSpecTaskZedThread(ctx, zedThread any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpecTaskZedThread", reflect.TypeOf((*MockStore)(nil).CreateSpecTaskZedThread), ctx, zedThread)
}

// CreateStepInfo mocks base method.
func (m *MockStore) CreateStepInfo(ctx context.Context, stepInfo *types.StepInfo) (*types.StepInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStepInfo", ctx, stepInfo)
	ret0, _ := ret[0].(*types.StepInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStepInfo indicates an expected call of CreateStepInfo.
func (mr *MockStoreMockRecorder) CreateStepInfo(ctx, stepInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStepInfo", reflect.TypeOf((*MockStore)(nil).CreateStepInfo), ctx, stepInfo)
}

// CreateTeam mocks base method.
func (m *MockStore) CreateTeam(ctx context.Context, team *types.Team) (*types.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, team)
	ret0, _ := ret[0].(*types.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockStoreMockRecorder) CreateTeam(ctx, team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockStore)(nil).CreateTeam), ctx, team)
}

// CreateTeamMembership mocks base method.
func (m *MockStore) CreateTeamMembership(ctx context.Context, membership *types.TeamMembership) (*types.TeamMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeamMembership", ctx, membership)
	ret0, _ := ret[0].(*types.TeamMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeamMembership indicates an expected call of CreateTeamMembership.
func (mr *MockStoreMockRecorder) CreateTeamMembership(ctx, membership any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeamMembership", reflect.TypeOf((*MockStore)(nil).CreateTeamMembership), ctx, membership)
}

// CreateTriggerConfiguration mocks base method.
func (m *MockStore) CreateTriggerConfiguration(ctx context.Context, triggerConfig *types.TriggerConfiguration) (*types.TriggerConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTriggerConfiguration", ctx, triggerConfig)
	ret0, _ := ret[0].(*types.TriggerConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTriggerConfiguration indicates an expected call of CreateTriggerConfiguration.
func (mr *MockStoreMockRecorder) CreateTriggerConfiguration(ctx, triggerConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTriggerConfiguration", reflect.TypeOf((*MockStore)(nil).CreateTriggerConfiguration), ctx, triggerConfig)
}

// CreateTriggerExecution mocks base method.
func (m *MockStore) CreateTriggerExecution(ctx context.Context, execution *types.TriggerExecution) (*types.TriggerExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTriggerExecution", ctx, execution)
	ret0, _ := ret[0].(*types.TriggerExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTriggerExecution indicates an expected call of CreateTriggerExecution.
func (mr *MockStoreMockRecorder) CreateTriggerExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTriggerExecution", reflect.TypeOf((*MockStore)(nil).CreateTriggerExecution), ctx, execution)
}

// CreateUsageMetric mocks base method.
func (m *MockStore) CreateUsageMetric(ctx context.Context, metric *types.UsageMetric) (*types.UsageMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsageMetric", ctx, metric)
	ret0, _ := ret[0].(*types.UsageMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsageMetric indicates an expected call of CreateUsageMetric.
func (mr *MockStoreMockRecorder) CreateUsageMetric(ctx, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageMetric", reflect.TypeOf((*MockStore)(nil).CreateUsageMetric), ctx, metric)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, user *types.User) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, user)
}

// CreateUserMeta mocks base method.
func (m *MockStore) CreateUserMeta(ctx context.Context, UserMeta types.UserMeta) (*types.UserMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserMeta", ctx, UserMeta)
	ret0, _ := ret[0].(*types.UserMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserMeta indicates an expected call of CreateUserMeta.
func (mr *MockStoreMockRecorder) CreateUserMeta(ctx, UserMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserMeta", reflect.TypeOf((*MockStore)(nil).CreateUserMeta), ctx, UserMeta)
}

// CreateWallet mocks base method.
func (m *MockStore) CreateWallet(ctx context.Context, wallet *types.Wallet) (*types.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet)
	ret0, _ := ret[0].(*types.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockStoreMockRecorder) CreateWallet(ctx, wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockStore)(nil).CreateWallet), ctx, wallet)
}

// DeleteAPIKey mocks base method.
func (m *MockStore) DeleteAPIKey(ctx context.Context, apiKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockStoreMockRecorder) DeleteAPIKey(ctx, apiKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockStore)(nil).DeleteAPIKey), ctx, apiKey)
}

// DeleteAccessGrant mocks base method.
func (m *MockStore) DeleteAccessGrant(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrant", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessGrant indicates an expected call of DeleteAccessGrant.
func (mr *MockStoreMockRecorder) DeleteAccessGrant(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrant", reflect.TypeOf((*MockStore)(nil).DeleteAccessGrant), ctx, id)
}

// DeleteAccessGrantRoleBinding mocks base method.
func (m *MockStore) DeleteAccessGrantRoleBinding(ctx context.Context, accessGrantID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessGrantRoleBinding", ctx, accessGrantID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessGrantRoleBinding indicates an expected call of DeleteAccessGrantRoleBinding.
func (mr *MockStoreMockRecorder) DeleteAccessGrantRoleBinding(ctx, accessGrantID, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessGrantRoleBinding", reflect.TypeOf((*MockStore)(nil).DeleteAccessGrantRoleBinding), ctx, accessGrantID, roleID)
}

// DeleteAgentRunner mocks base method.
func (m *MockStore) DeleteAgentRunner(ctx context.Context, runnerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentRunner", ctx, runnerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgentRunner indicates an expected call of DeleteAgentRunner.
func (mr *MockStoreMockRecorder) DeleteAgentRunner(ctx, runnerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentRunner", reflect.TypeOf((*MockStore)(nil).DeleteAgentRunner), ctx, runnerID)
}

// DeleteApp mocks base method.
func (m *MockStore) DeleteApp(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockStoreMockRecorder) DeleteApp(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockStore)(nil).DeleteApp), ctx, id)
}

// DeleteDataEntity mocks base method.
func (m *MockStore) DeleteDataEntity(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataEntity", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataEntity indicates an expected call of DeleteDataEntity.
func (mr *MockStoreMockRecorder) DeleteDataEntity(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataEntity", reflect.TypeOf((*MockStore)(nil).DeleteDataEntity), ctx, id)
}

// DeleteDynamicModelInfo mocks base method.
func (m *MockStore) DeleteDynamicModelInfo(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDynamicModelInfo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDynamicModelInfo indicates an expected call of DeleteDynamicModelInfo.
func (mr *MockStoreMockRecorder) DeleteDynamicModelInfo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDynamicModelInfo", reflect.TypeOf((*MockStore)(nil).DeleteDynamicModelInfo), ctx, id)
}

// DeleteInteraction mocks base method.
func (m *MockStore) DeleteInteraction(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInteraction", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInteraction indicates an expected call of DeleteInteraction.
func (mr *MockStoreMockRecorder) DeleteInteraction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInteraction", reflect.TypeOf((*MockStore)(nil).DeleteInteraction), ctx, id)
}

// DeleteKnowledge mocks base method.
func (m *MockStore) DeleteKnowledge(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledge", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKnowledge indicates an expected call of DeleteKnowledge.
func (mr *MockStoreMockRecorder) DeleteKnowledge(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledge", reflect.TypeOf((*MockStore)(nil).DeleteKnowledge), ctx, id)
}

// DeleteKnowledgeVersion mocks base method.
func (m *MockStore) DeleteKnowledgeVersion(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeVersion", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKnowledgeVersion indicates an expected call of DeleteKnowledgeVersion.
func (mr *MockStoreMockRecorder) DeleteKnowledgeVersion(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeVersion", reflect.TypeOf((*MockStore)(nil).DeleteKnowledgeVersion), ctx, id)
}

// DeleteModel mocks base method.
func (m *MockStore) DeleteModel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockStoreMockRecorder) DeleteModel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockStore)(nil).DeleteModel), ctx, id)
}

// DeleteOAuthConnection mocks base method.
func (m *MockStore) DeleteOAuthConnection(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOAuthConnection", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOAuthConnection indicates an expected call of DeleteOAuthConnection.
func (mr *MockStoreMockRecorder) DeleteOAuthConnection(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOAuthConnection", reflect.TypeOf((*MockStore)(nil).DeleteOAuthConnection), ctx, id)
}

// DeleteOAuthProvider mocks base method.
func (m *MockStore) DeleteOAuthProvider(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOAuthProvider", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOAuthProvider indicates an expected call of DeleteOAuthProvider.
func (mr *MockStoreMockRecorder) DeleteOAuthProvider(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOAuthProvider", reflect.TypeOf((*MockStore)(nil).DeleteOAuthProvider), ctx, id)
}

// DeleteOAuthRequestToken mocks base method.
func (m *MockStore) DeleteOAuthRequestToken(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOAuthRequestToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOAuthRequestToken indicates an expected call of DeleteOAuthRequestToken.
func (mr *MockStoreMockRecorder) DeleteOAuthRequestToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOAuthRequestToken", reflect.TypeOf((*MockStore)(nil).DeleteOAuthRequestToken), ctx, id)
}

// DeleteOrganization mocks base method.
func (m *MockStore) DeleteOrganization(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockStoreMockRecorder) DeleteOrganization(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockStore)(nil).DeleteOrganization), ctx, id)
}

// DeleteOrganizationMembership mocks base method.
func (m *MockStore) DeleteOrganizationMembership(ctx context.Context, organizationID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationMembership", ctx, organizationID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganizationMembership indicates an expected call of DeleteOrganizationMembership.
func (mr *MockStoreMockRecorder) DeleteOrganizationMembership(ctx, organizationID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationMembership", reflect.TypeOf((*MockStore)(nil).DeleteOrganizationMembership), ctx, organizationID, userID)
}

// DeletePersonalDevEnvironment mocks base method.
func (m *MockStore) DeletePersonalDevEnvironment(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonalDevEnvironment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersonalDevEnvironment indicates an expected call of DeletePersonalDevEnvironment.
func (mr *MockStoreMockRecorder) DeletePersonalDevEnvironment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonalDevEnvironment", reflect.TypeOf((*MockStore)(nil).DeletePersonalDevEnvironment), ctx, id)
}

// DeleteProviderEndpoint mocks base method.
func (m *MockStore) DeleteProviderEndpoint(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProviderEndpoint", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProviderEndpoint indicates an expected call of DeleteProviderEndpoint.
func (mr *MockStoreMockRecorder) DeleteProviderEndpoint(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProviderEndpoint", reflect.TypeOf((*MockStore)(nil).DeleteProviderEndpoint), ctx, id)
}

// DeleteRole mocks base method.
func (m *MockStore) DeleteRole(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockStoreMockRecorder) DeleteRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockStore)(nil).DeleteRole), ctx, id)
}

// DeleteSSHKey mocks base method.
func (m *MockStore) DeleteSSHKey(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSHKey", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSSHKey indicates an expected call of DeleteSSHKey.
func (mr *MockStoreMockRecorder) DeleteSSHKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSHKey", reflect.TypeOf((*MockStore)(nil).DeleteSSHKey), ctx, id)
}

// DeleteSecret mocks base method.
func (m *MockStore) DeleteSecret(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockStoreMockRecorder) DeleteSecret(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockStore)(nil).DeleteSecret), ctx, id)
}

// DeleteSession mocks base method.
func (m *MockStore) DeleteSession(ctx context.Context, id string) (*types.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, id)
	ret0, _ := ret[0].(*types.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockStoreMockRecorder) DeleteSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockStore)(nil).DeleteSession), ctx, id)
}

// DeleteSlackThread mocks base method.
func (m *MockStore) DeleteSlackThread(ctx context.Context, olderThan time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackThread", ctx, olderThan)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSlackThread indicates an expected call of DeleteSlackThread.
func (mr *MockStoreMockRecorder) DeleteSlackThread(ctx, olderThan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackThread", reflect.TypeOf((*MockStore)(nil).DeleteSlackThread), ctx, olderThan)
}

// DeleteSlot mocks base method.
func (m *MockStore) DeleteSlot(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlot", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSlot indicates an expected call of DeleteSlot.
func (mr *MockStoreMockRecorder) DeleteSlot(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlot", reflect.TypeOf((*MockStore)(nil).DeleteSlot), ctx, id)
}

// DeleteSpecTaskImplementationTask mocks base method.
func (m *MockStore) DeleteSpecTaskImplementationTask(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpecTaskImplementationTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpecTaskImplementationTask indicates an expected call of DeleteSpecTaskImplementationTask.
func (mr *MockStoreMockRecorder) DeleteSpecTaskImplementationTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpecTaskImplementationTask", reflect.TypeOf((*MockStore)(nil).DeleteSpecTaskImplementationTask), ctx, id)
}

// DeleteSpecTaskWorkSession mocks base method.
func (m *MockStore) DeleteSpecTaskWorkSession(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpecTaskWorkSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpecTaskWorkSession indicates an expected call of DeleteSpecTaskWorkSession.
func (mr *MockStoreMockRecorder) DeleteSpecTaskWorkSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpecTaskWorkSession", reflect.TypeOf((*MockStore)(nil).DeleteSpecTaskWorkSession), ctx, id)
}

// DeleteSpecTaskZedThread mocks base method.
func (m *MockStore) DeleteSpecTaskZedThread(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpecTaskZedThread", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpecTaskZedThread indicates an expected call of DeleteSpecTaskZedThread.
func (mr *MockStoreMockRecorder) DeleteSpecTaskZedThread(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpecTaskZedThread", reflect.TypeOf((*MockStore)(nil).DeleteSpecTaskZedThread), ctx, id)
}

// DeleteStepInfo mocks base method.
func (m *MockStore) DeleteStepInfo(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStepInfo", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStepInfo indicates an expected call of DeleteStepInfo.
func (mr *MockStoreMockRecorder) DeleteStepInfo(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStepInfo", reflect.TypeOf((*MockStore)(nil).DeleteStepInfo), ctx, sessionID)
}

// DeleteTeam mocks base method.
func (m *MockStore) DeleteTeam(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockStoreMockRecorder) DeleteTeam(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockStore)(nil).DeleteTeam), ctx, id)
}

// DeleteTeamMembership mocks base method.
func (m *MockStore) DeleteTeamMembership(ctx context.Context, teamID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamMembership", ctx, teamID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamMembership indicates an expected call of DeleteTeamMembership.
func (mr *MockStoreMockRecorder) DeleteTeamMembership(ctx, teamID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamMembership", reflect.TypeOf((*MockStore)(nil).DeleteTeamMembership), ctx, teamID, userID)
}

// DeleteTriggerConfiguration mocks base method.
func (m *MockStore) DeleteTriggerConfiguration(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerConfiguration", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerConfiguration indicates an expected call of DeleteTriggerConfiguration.
func (mr *MockStoreMockRecorder) DeleteTriggerConfiguration(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerConfiguration", reflect.TypeOf((*MockStore)(nil).DeleteTriggerConfiguration), ctx, id)
}

// DeleteUsageMetrics mocks base method.
func (m *MockStore) DeleteUsageMetrics(ctx context.Context, appID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsageMetrics", ctx, appID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsageMetrics indicates an expected call of DeleteUsageMetrics.
func (mr *MockStoreMockRecorder) DeleteUsageMetrics(ctx, appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageMetrics", reflect.TypeOf((*MockStore)(nil).DeleteUsageMetrics), ctx, appID)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), ctx, id)
}

// DeleteWallet mocks base method.
func (m *MockStore) DeleteWallet(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockStoreMockRecorder) DeleteWallet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockStore)(nil).DeleteWallet), ctx, id)
}

// DeleteZedSettingsOverride mocks base method.
func (m *MockStore) DeleteZedSettingsOverride(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteZedSettingsOverride", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteZedSettingsOverride indicates an expected call of DeleteZedSettingsOverride.
func (mr *MockStoreMockRecorder) DeleteZedSettingsOverride(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteZedSettingsOverride", reflect.TypeOf((*MockStore)(nil).DeleteZedSettingsOverride), ctx, sessionID)
}

// EnsureUserMeta mocks base method.
func (m *MockStore) EnsureUserMeta(ctx context.Context, UserMeta types.UserMeta) (*types.UserMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUserMeta", ctx, UserMeta)
	ret0, _ := ret[0].(*types.UserMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureUserMeta indicates an expected call of EnsureUserMeta.
func (mr *MockStoreMockRecorder) EnsureUserMeta(ctx, UserMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUserMeta", reflect.TypeOf((*MockStore)(nil).EnsureUserMeta), ctx, UserMeta)
}

// GenerateRandomState mocks base method.
func (m *MockStore) GenerateRandomState(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomState", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomState indicates an expected call of GenerateRandomState.
func (mr *MockStoreMockRecorder) GenerateRandomState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomState", reflect.TypeOf((*MockStore)(nil).GenerateRandomState), ctx)
}

// GetAPIKey mocks base method.
func (m *MockStore) GetAPIKey(ctx context.Context, apiKey string) (*types.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(*types.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockStoreMockRecorder) GetAPIKey(ctx, apiKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockStore)(nil).GetAPIKey), ctx, apiKey)
}

// GetAccessGrantRoleBindings mocks base method.
func (m *MockStore) GetAccessGrantRoleBindings(ctx context.Context, q *GetAccessGrantRoleBindingsQuery) ([]*types.AccessGrantRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessGrantRoleBindings", ctx, q)
	ret0, _ := ret[0].([]*types.AccessGrantRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessGrantRoleBindings indicates an expected call of GetAccessGrantRoleBindings.
func (mr *MockStoreMockRecorder) GetAccessGrantRoleBindings(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessGrantRoleBindings", reflect.TypeOf((*MockStore)(nil).GetAccessGrantRoleBindings), ctx, q)
}

// GetAgentRunner mocks base method.
func (m *MockStore) GetAgentRunner(ctx context.Context, runnerID string) (*types.AgentRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentRunner", ctx, runnerID)
	ret0, _ := ret[0].(*types.AgentRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentRunner indicates an expected call of GetAgentRunner.
func (mr *MockStoreMockRecorder) GetAgentRunner(ctx, runnerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentRunner", reflect.TypeOf((*MockStore)(nil).GetAgentRunner), ctx, runnerID)
}

// GetAgentSession mocks base method.
func (m *MockStore) GetAgentSession(ctx context.Context, sessionID string) (*types.AgentSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentSession", ctx, sessionID)
	ret0, _ := ret[0].(*types.AgentSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentSession indicates an expected call of GetAgentSession.
func (mr *MockStoreMockRecorder) GetAgentSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentSession", reflect.TypeOf((*MockStore)(nil).GetAgentSession), ctx, sessionID)
}

// GetAgentSessionStatus mocks base method.
func (m *MockStore) GetAgentSessionStatus(ctx context.Context, sessionID string) (*types.AgentSessionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentSessionStatus", ctx, sessionID)
	ret0, _ := ret[0].(*types.AgentSessionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentSessionStatus indicates an expected call of GetAgentSessionStatus.
func (mr *MockStoreMockRecorder) GetAgentSessionStatus(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentSessionStatus", reflect.TypeOf((*MockStore)(nil).GetAgentSessionStatus), ctx, sessionID)
}

// GetAgentWorkItem mocks base method.
func (m *MockStore) GetAgentWorkItem(ctx context.Context, workItemID string) (*types.AgentWorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentWorkItem", ctx, workItemID)
	ret0, _ := ret[0].(*types.AgentWorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentWorkItem indicates an expected call of GetAgentWorkItem.
func (mr *MockStoreMockRecorder) GetAgentWorkItem(ctx, workItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentWorkItem", reflect.TypeOf((*MockStore)(nil).GetAgentWorkItem), ctx, workItemID)
}

// GetAgentWorkQueueStats mocks base method.
func (m *MockStore) GetAgentWorkQueueStats(ctx context.Context) (*types.AgentWorkQueueStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentWorkQueueStats", ctx)
	ret0, _ := ret[0].(*types.AgentWorkQueueStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentWorkQueueStats indicates an expected call of GetAgentWorkQueueStats.
func (mr *MockStoreMockRecorder) GetAgentWorkQueueStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentWorkQueueStats", reflect.TypeOf((*MockStore)(nil).GetAgentWorkQueueStats), ctx)
}

// GetAggregatedUsageMetrics mocks base method.
func (m *MockStore) GetAggregatedUsageMetrics(ctx context.Context, q *GetAggregatedUsageMetricsQuery) ([]*types.AggregatedUsageMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregatedUsageMetrics", ctx, q)
	ret0, _ := ret[0].([]*types.AggregatedUsageMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregatedUsageMetrics indicates an expected call of GetAggregatedUsageMetrics.
func (mr *MockStoreMockRecorder) GetAggregatedUsageMetrics(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregatedUsageMetrics", reflect.TypeOf((*MockStore)(nil).GetAggregatedUsageMetrics), ctx, q)
}

// GetApp mocks base method.
func (m *MockStore) GetApp(ctx context.Context, id string) (*types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", ctx, id)
	ret0, _ := ret[0].(*types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockStoreMockRecorder) GetApp(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockStore)(nil).GetApp), ctx, id)
}

// GetAppDailyUsageMetrics mocks base method.
func (m *MockStore) GetAppDailyUsageMetrics(ctx context.Context, appID string, from, to time.Time) ([]*types.AggregatedUsageMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppDailyUsageMetrics", ctx, appID, from, to)
	ret0, _ := ret[0].([]*types.AggregatedUsageMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppDailyUsageMetrics indicates an expected call of GetAppDailyUsageMetrics.
func (mr *MockStoreMockRecorder) GetAppDailyUsageMetrics(ctx, appID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppDailyUsageMetrics", reflect.TypeOf((*MockStore)(nil).GetAppDailyUsageMetrics), ctx, appID, from, to)
}

// GetAppUsageMetrics mocks base method.
func (m *MockStore) GetAppUsageMetrics(ctx context.Context, appID string, from, to time.Time) ([]*types.UsageMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppUsageMetrics", ctx, appID, from, to)
	ret0, _ := ret[0].([]*types.UsageMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppUsageMetrics indicates an expected call of GetAppUsageMetrics.
func (mr *MockStoreMockRecorder) GetAppUsageMetrics(ctx, appID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppUsageMetrics", reflect.TypeOf((*MockStore)(nil).GetAppUsageMetrics), ctx, appID, from, to)
}

// GetAppUsersAggregatedUsageMetrics mocks base method.
func (m *MockStore) GetAppUsersAggregatedUsageMetrics(ctx context.Context, appID string, from, to time.Time) ([]*types.UsersAggregatedUsageMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppUsersAggregatedUsageMetrics", ctx, appID, from, to)
	ret0, _ := ret[0].([]*types.UsersAggregatedUsageMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppUsersAggregatedUsageMetrics indicates an expected call of GetAppUsersAggregatedUsageMetrics.
func (mr *MockStoreMockRecorder) GetAppUsersAggregatedUsageMetrics(ctx, appID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppUsersAggregatedUsageMetrics", reflect.TypeOf((*MockStore)(nil).GetAppUsersAggregatedUsageMetrics), ctx, appID, from, to)
}

// GetAppWithTools mocks base method.
func (m *MockStore) GetAppWithTools(ctx context.Context, id string) (*types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppWithTools", ctx, id)
	ret0, _ := ret[0].(*types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppWithTools indicates an expected call of GetAppWithTools.
func (mr *MockStoreMockRecorder) GetAppWithTools(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppWithTools", reflect.TypeOf((*MockStore)(nil).GetAppWithTools), ctx, id)
}

// GetDataEntity mocks base method.
func (m *MockStore) GetDataEntity(ctx context.Context, id string) (*types.DataEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataEntity", ctx, id)
	ret0, _ := ret[0].(*types.DataEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataEntity indicates an expected call of GetDataEntity.
func (mr *MockStoreMockRecorder) GetDataEntity(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataEntity", reflect.TypeOf((*MockStore)(nil).GetDataEntity), ctx, id)
}

// GetDecodedLicense mocks base method.
func (m *MockStore) GetDecodedLicense(ctx context.Context) (*license.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecodedLicense", ctx)
	ret0, _ := ret[0].(*license.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecodedLicense indicates an expected call of GetDecodedLicense.
func (mr *MockStoreMockRecorder) GetDecodedLicense(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecodedLicense", reflect.TypeOf((*MockStore)(nil).GetDecodedLicense), ctx)
}

// GetDynamicModelInfo mocks base method.
func (m *MockStore) GetDynamicModelInfo(ctx context.Context, id string) (*types.DynamicModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamicModelInfo", ctx, id)
	ret0, _ := ret[0].(*types.DynamicModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDynamicModelInfo indicates an expected call of GetDynamicModelInfo.
func (mr *MockStoreMockRecorder) GetDynamicModelInfo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamicModelInfo", reflect.TypeOf((*MockStore)(nil).GetDynamicModelInfo), ctx, id)
}

// GetEffectiveSystemSettings mocks base method.
func (m *MockStore) GetEffectiveSystemSettings(ctx context.Context) (*types.SystemSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveSystemSettings", ctx)
	ret0, _ := ret[0].(*types.SystemSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectiveSystemSettings indicates an expected call of GetEffectiveSystemSettings.
func (mr *MockStoreMockRecorder) GetEffectiveSystemSettings(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveSystemSettings", reflect.TypeOf((*MockStore)(nil).GetEffectiveSystemSettings), ctx)
}

// GetHelpRequestByID mocks base method.
func (m *MockStore) GetHelpRequestByID(ctx context.Context, requestID string) (*types.HelpRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpRequestByID", ctx, requestID)
	ret0, _ := ret[0].(*types.HelpRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpRequestByID indicates an expected call of GetHelpRequestByID.
func (mr *MockStoreMockRecorder) GetHelpRequestByID(ctx, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpRequestByID", reflect.TypeOf((*MockStore)(nil).GetHelpRequestByID), ctx, requestID)
}

// GetInteraction mocks base method.
func (m *MockStore) GetInteraction(ctx context.Context, id string) (*types.Interaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInteraction", ctx, id)
	ret0, _ := ret[0].(*types.Interaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInteraction indicates an expected call of GetInteraction.
func (mr *MockStoreMockRecorder) GetInteraction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInteraction", reflect.TypeOf((*MockStore)(nil).GetInteraction), ctx, id)
}

// GetKnowledge mocks base method.
func (m *MockStore) GetKnowledge(ctx context.Context, id string) (*types.Knowledge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledge", ctx, id)
	ret0, _ := ret[0].(*types.Knowledge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledge indicates an expected call of GetKnowledge.
func (mr *MockStoreMockRecorder) GetKnowledge(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledge", reflect.TypeOf((*MockStore)(nil).GetKnowledge), ctx, id)
}

// GetKnowledgeVersion mocks base method.
func (m *MockStore) GetKnowledgeVersion(ctx context.Context, id string) (*types.KnowledgeVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeVersion", ctx, id)
	ret0, _ := ret[0].(*types.KnowledgeVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeVersion indicates an expected call of GetKnowledgeVersion.
func (mr *MockStoreMockRecorder) GetKnowledgeVersion(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeVersion", reflect.TypeOf((*MockStore)(nil).GetKnowledgeVersion), ctx, id)
}

// GetLicenseKey mocks base method.
func (m *MockStore) GetLicenseKey(ctx context.Context) (*types.LicenseKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseKey", ctx)
	ret0, _ := ret[0].(*types.LicenseKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseKey indicates an expected call of GetLicenseKey.
func (mr *MockStoreMockRecorder) GetLicenseKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseKey", reflect.TypeOf((*MockStore)(nil).GetLicenseKey), ctx)
}

// GetModel mocks base method.
func (m *MockStore) GetModel(ctx context.Context, id string) (*types.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", ctx, id)
	ret0, _ := ret[0].(*types.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockStoreMockRecorder) GetModel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockStore)(nil).GetModel), ctx, id)
}

// GetOAuthConnection mocks base method.
func (m *MockStore) GetOAuthConnection(ctx context.Context, id string) (*types.OAuthConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthConnection", ctx, id)
	ret0, _ := ret[0].(*types.OAuthConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthConnection indicates an expected call of GetOAuthConnection.
func (mr *MockStoreMockRecorder) GetOAuthConnection(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthConnection", reflect.TypeOf((*MockStore)(nil).GetOAuthConnection), ctx, id)
}

// GetOAuthConnectionByUserAndProvider mocks base method.
func (m *MockStore) GetOAuthConnectionByUserAndProvider(ctx context.Context, userID, providerID string) (*types.OAuthConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthConnectionByUserAndProvider", ctx, userID, providerID)
	ret0, _ := ret[0].(*types.OAuthConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthConnectionByUserAndProvider indicates an expected call of GetOAuthConnectionByUserAndProvider.
func (mr *MockStoreMockRecorder) GetOAuthConnectionByUserAndProvider(ctx, userID, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthConnectionByUserAndProvider", reflect.TypeOf((*MockStore)(nil).GetOAuthConnectionByUserAndProvider), ctx, userID, providerID)
}

// GetOAuthConnectionsNearExpiry mocks base method.
func (m *MockStore) GetOAuthConnectionsNearExpiry(ctx context.Context, threshold time.Time) ([]*types.OAuthConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthConnectionsNearExpiry", ctx, threshold)
	ret0, _ := ret[0].([]*types.OAuthConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthConnectionsNearExpiry indicates an expected call of GetOAuthConnectionsNearExpiry.
func (mr *MockStoreMockRecorder) GetOAuthConnectionsNearExpiry(ctx, threshold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthConnectionsNearExpiry", reflect.TypeOf((*MockStore)(nil).GetOAuthConnectionsNearExpiry), ctx, threshold)
}

// GetOAuthProvider mocks base method.
func (m *MockStore) GetOAuthProvider(ctx context.Context, id string) (*types.OAuthProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthProvider", ctx, id)
	ret0, _ := ret[0].(*types.OAuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthProvider indicates an expected call of GetOAuthProvider.
func (mr *MockStoreMockRecorder) GetOAuthProvider(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthProvider", reflect.TypeOf((*MockStore)(nil).GetOAuthProvider), ctx, id)
}

// GetOAuthRequestToken mocks base method.
func (m *MockStore) GetOAuthRequestToken(ctx context.Context, userID, providerID string) ([]*types.OAuthRequestToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthRequestToken", ctx, userID, providerID)
	ret0, _ := ret[0].([]*types.OAuthRequestToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthRequestToken indicates an expected call of GetOAuthRequestToken.
func (mr *MockStoreMockRecorder) GetOAuthRequestToken(ctx, userID, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthRequestToken", reflect.TypeOf((*MockStore)(nil).GetOAuthRequestToken), ctx, userID, providerID)
}

// GetOAuthRequestTokenByState mocks base method.
func (m *MockStore) GetOAuthRequestTokenByState(ctx context.Context, state string) ([]*types.OAuthRequestToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthRequestTokenByState", ctx, state)
	ret0, _ := ret[0].([]*types.OAuthRequestToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthRequestTokenByState indicates an expected call of GetOAuthRequestTokenByState.
func (mr *MockStoreMockRecorder) GetOAuthRequestTokenByState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthRequestTokenByState", reflect.TypeOf((*MockStore)(nil).GetOAuthRequestTokenByState), ctx, state)
}

// GetOrCreateAgentRunner mocks base method.
func (m *MockStore) GetOrCreateAgentRunner(ctx context.Context, runnerID string) (*types.AgentRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateAgentRunner", ctx, runnerID)
	ret0, _ := ret[0].(*types.AgentRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateAgentRunner indicates an expected call of GetOrCreateAgentRunner.
func (mr *MockStoreMockRecorder) GetOrCreateAgentRunner(ctx, runnerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateAgentRunner", reflect.TypeOf((*MockStore)(nil).GetOrCreateAgentRunner), ctx, runnerID)
}

// GetOrganization mocks base method.
func (m *MockStore) GetOrganization(ctx context.Context, q *GetOrganizationQuery) (*types.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, q)
	ret0, _ := ret[0].(*types.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockStoreMockRecorder) GetOrganization(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockStore)(nil).GetOrganization), ctx, q)
}

// GetOrganizationMembership mocks base method.
func (m *MockStore) GetOrganizationMembership(ctx context.Context, q *GetOrganizationMembershipQuery) (*types.OrganizationMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationMembership", ctx, q)
	ret0, _ := ret[0].(*types.OrganizationMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationMembership indicates an expected call of GetOrganizationMembership.
func (mr *MockStoreMockRecorder) GetOrganizationMembership(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationMembership", reflect.TypeOf((*MockStore)(nil).GetOrganizationMembership), ctx, q)
}

// GetPendingReviews mocks base method.
func (m *MockStore) GetPendingReviews(ctx context.Context) ([]*types.JobCompletion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingReviews", ctx)
	ret0, _ := ret[0].([]*types.JobCompletion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingReviews indicates an expected call of GetPendingReviews.
func (mr *MockStoreMockRecorder) GetPendingReviews(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingReviews", reflect.TypeOf((*MockStore)(nil).GetPendingReviews), ctx)
}

// GetPersonalDevEnvironment mocks base method.
func (m *MockStore) GetPersonalDevEnvironment(ctx context.Context, id string) (*types.PersonalDevEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalDevEnvironment", ctx, id)
	ret0, _ := ret[0].(*types.PersonalDevEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalDevEnvironment indicates an expected call of GetPersonalDevEnvironment.
func (mr *MockStoreMockRecorder) GetPersonalDevEnvironment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalDevEnvironment", reflect.TypeOf((*MockStore)(nil).GetPersonalDevEnvironment), ctx, id)
}

// GetPersonalDevEnvironmentByWolfAppID mocks base method.
func (m *MockStore) GetPersonalDevEnvironmentByWolfAppID(ctx context.Context, wolfAppID string) (*types.PersonalDevEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalDevEnvironmentByWolfAppID", ctx, wolfAppID)
	ret0, _ := ret[0].(*types.PersonalDevEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalDevEnvironmentByWolfAppID indicates an expected call of GetPersonalDevEnvironmentByWolfAppID.
func (mr *MockStoreMockRecorder) GetPersonalDevEnvironmentByWolfAppID(ctx, wolfAppID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalDevEnvironmentByWolfAppID", reflect.TypeOf((*MockStore)(nil).GetPersonalDevEnvironmentByWolfAppID), ctx, wolfAppID)
}

// GetProviderDailyUsageMetrics mocks base method.
func (m *MockStore) GetProviderDailyUsageMetrics(ctx context.Context, providerID string, from, to time.Time) ([]*types.AggregatedUsageMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderDailyUsageMetrics", ctx, providerID, from, to)
	ret0, _ := ret[0].([]*types.AggregatedUsageMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderDailyUsageMetrics indicates an expected call of GetProviderDailyUsageMetrics.
func (mr *MockStoreMockRecorder) GetProviderDailyUsageMetrics(ctx, providerID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderDailyUsageMetrics", reflect.TypeOf((*MockStore)(nil).GetProviderDailyUsageMetrics), ctx, providerID, from, to)
}

// GetProviderEndpoint mocks base method.
func (m *MockStore) GetProviderEndpoint(ctx context.Context, q *GetProviderEndpointsQuery) (*types.ProviderEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderEndpoint", ctx, q)
	ret0, _ := ret[0].(*types.ProviderEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderEndpoint indicates an expected call of GetProviderEndpoint.
func (mr *MockStoreMockRecorder) GetProviderEndpoint(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderEndpoint", reflect.TypeOf((*MockStore)(nil).GetProviderEndpoint), ctx, q)
}

// GetRecentCompletions mocks base method.
func (m *MockStore) GetRecentCompletions(ctx context.Context, limit int) ([]*types.JobCompletion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentCompletions", ctx, limit)
	ret0, _ := ret[0].([]*types.JobCompletion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentCompletions indicates an expected call of GetRecentCompletions.
func (mr *MockStoreMockRecorder) GetRecentCompletions(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentCompletions", reflect.TypeOf((*MockStore)(nil).GetRecentCompletions), ctx, limit)
}

// GetRole mocks base method.
func (m *MockStore) GetRole(ctx context.Context, id string) (*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, id)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockStoreMockRecorder) GetRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockStore)(nil).GetRole), ctx, id)
}

// GetSSHKey mocks base method.
func (m *MockStore) GetSSHKey(ctx context.Context, id string) (*types.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHKey", ctx, id)
	ret0, _ := ret[0].(*types.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHKey indicates an expected call of GetSSHKey.
func (mr *MockStoreMockRecorder) GetSSHKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKey", reflect.TypeOf((*MockStore)(nil).GetSSHKey), ctx, id)
}

// GetSecret mocks base method.
func (m *MockStore) GetSecret(ctx context.Context, id string) (*types.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, id)
	ret0, _ := ret[0].(*types.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockStoreMockRecorder) GetSecret(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockStore)(nil).GetSecret), ctx, id)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(ctx context.Context, id string) (*types.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(*types.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), ctx, id)
}

// GetSessionsNeedingHelp mocks base method.
func (m *MockStore) GetSessionsNeedingHelp(ctx context.Context) ([]*types.AgentSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsNeedingHelp", ctx)
	ret0, _ := ret[0].([]*types.AgentSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsNeedingHelp indicates an expected call of GetSessionsNeedingHelp.
func (mr *MockStoreMockRecorder) GetSessionsNeedingHelp(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsNeedingHelp", reflect.TypeOf((*MockStore)(nil).GetSessionsNeedingHelp), ctx)
}

// GetSlackThread mocks base method.
func (m *MockStore) GetSlackThread(ctx context.Context, appID, channel, threadKey string) (*types.SlackThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlackThread", ctx, appID, channel, threadKey)
	ret0, _ := ret[0].(*types.SlackThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlackThread indicates an expected call of GetSlackThread.
func (mr *MockStoreMockRecorder) GetSlackThread(ctx, appID, channel, threadKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackThread", reflect.TypeOf((*MockStore)(nil).GetSlackThread), ctx, appID, channel, threadKey)
}

// GetSlot mocks base method.
func (m *MockStore) GetSlot(ctx context.Context, id string) (*types.RunnerSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", ctx, id)
	ret0, _ := ret[0].(*types.RunnerSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlot indicates an expected call of GetSlot.
func (mr *MockStoreMockRecorder) GetSlot(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockStore)(nil).GetSlot), ctx, id)
}

// GetSpecTask mocks base method.
func (m *MockStore) GetSpecTask(ctx context.Context, id string) (*types.SpecTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecTask", ctx, id)
	ret0, _ := ret[0].(*types.SpecTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecTask indicates an expected call of GetSpecTask.
func (mr *MockStoreMockRecorder) GetSpecTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecTask", reflect.TypeOf((*MockStore)(nil).GetSpecTask), ctx, id)
}

// GetSpecTaskImplementationTask mocks base method.
func (m *MockStore) GetSpecTaskImplementationTask(ctx context.Context, id string) (*types.SpecTaskImplementationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecTaskImplementationTask", ctx, id)
	ret0, _ := ret[0].(*types.SpecTaskImplementationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecTaskImplementationTask indicates an expected call of GetSpecTaskImplementationTask.
func (mr *MockStoreMockRecorder) GetSpecTaskImplementationTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecTaskImplementationTask", reflect.TypeOf((*MockStore)(nil).GetSpecTaskImplementationTask), ctx, id)
}

// GetSpecTaskMultiSessionOverview mocks base method.
func (m *MockStore) GetSpecTaskMultiSessionOverview(ctx context.Context, specTaskID string) (*types.SpecTaskMultiSessionOverviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecTaskMultiSessionOverview", ctx, specTaskID)
	ret0, _ := ret[0].(*types.SpecTaskMultiSessionOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecTaskMultiSessionOverview indicates an expected call of GetSpecTaskMultiSessionOverview.
func (mr *MockStoreMockRecorder) GetSpecTaskMultiSessionOverview(ctx, specTaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecTaskMultiSessionOverview", reflect.TypeOf((*MockStore)(nil).GetSpecTaskMultiSessionOverview), ctx, specTaskID)
}

// GetSpecTaskProgress mocks base method.
func (m *MockStore) GetSpecTaskProgress(ctx context.Context, specTaskID string) (*types.SpecTaskProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecTaskProgress", ctx, specTaskID)
	ret0, _ := ret[0].(*types.SpecTaskProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecTaskProgress indicates an expected call of GetSpecTaskProgress.
func (mr *MockStoreMockRecorder) GetSpecTaskProgress(ctx, specTaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecTaskProgress", reflect.TypeOf((*MockStore)(nil).GetSpecTaskProgress), ctx, specTaskID)
}

// GetSpecTaskWorkSession mocks base method.
func (m *MockStore) GetSpecTaskWorkSession(ctx context.Context, id string) (*types.SpecTaskWorkSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecTaskWorkSession", ctx, id)
	ret0, _ := ret[0].(*types.SpecTaskWorkSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecTaskWorkSession indicates an expected call of GetSpecTaskWorkSession.
func (mr *MockStoreMockRecorder) GetSpecTaskWorkSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecTaskWorkSession", reflect.TypeOf((*MockStore)(nil).GetSpecTaskWorkSession), ctx, id)
}

// GetSpecTaskWorkSessionByHelixSession mocks base method.
func (m *MockStore) GetSpecTaskWorkSessionByHelixSession(ctx context.Context, helixSessionID string) (*types.SpecTaskWorkSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecTaskWorkSessionByHelixSession", ctx, helixSessionID)
	ret0, _ := ret[0].(*types.SpecTaskWorkSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecTaskWorkSessionByHelixSession indicates an expected call of GetSpecTaskWorkSessionByHelixSession.
func (mr *MockStoreMockRecorder) GetSpecTaskWorkSessionByHelixSession(ctx, helixSessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecTaskWorkSessionByHelixSession", reflect.TypeOf((*MockStore)(nil).GetSpecTaskWorkSessionByHelixSession), ctx, helixSessionID)
}

// GetSpecTaskZedThread mocks base method.
func (m *MockStore) GetSpecTaskZedThread(ctx context.Context, id string) (*types.SpecTaskZedThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecTaskZedThread", ctx, id)
	ret0, _ := ret[0].(*types.SpecTaskZedThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecTaskZedThread indicates an expected call of GetSpecTaskZedThread.
func (mr *MockStoreMockRecorder) GetSpecTaskZedThread(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecTaskZedThread", reflect.TypeOf((*MockStore)(nil).GetSpecTaskZedThread), ctx, id)
}

// GetSpecTaskZedThreadByWorkSession mocks base method.
func (m *MockStore) GetSpecTaskZedThreadByWorkSession(ctx context.Context, workSessionID string) (*types.SpecTaskZedThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecTaskZedThreadByWorkSession", ctx, workSessionID)
	ret0, _ := ret[0].(*types.SpecTaskZedThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecTaskZedThreadByWorkSession indicates an expected call of GetSpecTaskZedThreadByWorkSession.
func (mr *MockStoreMockRecorder) GetSpecTaskZedThreadByWorkSession(ctx, workSessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecTaskZedThreadByWorkSession", reflect.TypeOf((*MockStore)(nil).GetSpecTaskZedThreadByWorkSession), ctx, workSessionID)
}

// GetSystemSettings mocks base method.
func (m *MockStore) GetSystemSettings(ctx context.Context) (*types.SystemSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemSettings", ctx)
	ret0, _ := ret[0].(*types.SystemSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemSettings indicates an expected call of GetSystemSettings.
func (mr *MockStoreMockRecorder) GetSystemSettings(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemSettings", reflect.TypeOf((*MockStore)(nil).GetSystemSettings), ctx)
}

// GetTeam mocks base method.
func (m *MockStore) GetTeam(ctx context.Context, q *GetTeamQuery) (*types.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, q)
	ret0, _ := ret[0].(*types.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockStoreMockRecorder) GetTeam(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockStore)(nil).GetTeam), ctx, q)
}

// GetTeamMembership mocks base method.
func (m *MockStore) GetTeamMembership(ctx context.Context, q *GetTeamMembershipQuery) (*types.TeamMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembership", ctx, q)
	ret0, _ := ret[0].(*types.TeamMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamMembership indicates an expected call of GetTeamMembership.
func (mr *MockStoreMockRecorder) GetTeamMembership(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembership", reflect.TypeOf((*MockStore)(nil).GetTeamMembership), ctx, q)
}

// GetTriggerConfiguration mocks base method.
func (m *MockStore) GetTriggerConfiguration(ctx context.Context, q *GetTriggerConfigurationQuery) (*types.TriggerConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerConfiguration", ctx, q)
	ret0, _ := ret[0].(*types.TriggerConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerConfiguration indicates an expected call of GetTriggerConfiguration.
func (mr *MockStoreMockRecorder) GetTriggerConfiguration(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerConfiguration", reflect.TypeOf((*MockStore)(nil).GetTriggerConfiguration), ctx, q)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, q *GetUserQuery) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, q)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, q)
}

// GetUserMeta mocks base method.
func (m *MockStore) GetUserMeta(ctx context.Context, id string) (*types.UserMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMeta", ctx, id)
	ret0, _ := ret[0].(*types.UserMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMeta indicates an expected call of GetUserMeta.
func (mr *MockStoreMockRecorder) GetUserMeta(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMeta", reflect.TypeOf((*MockStore)(nil).GetUserMeta), ctx, id)
}

// GetUserMonthlyTokenUsage mocks base method.
func (m *MockStore) GetUserMonthlyTokenUsage(ctx context.Context, userID string, providers []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMonthlyTokenUsage", ctx, userID, providers)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMonthlyTokenUsage indicates an expected call of GetUserMonthlyTokenUsage.
func (mr *MockStoreMockRecorder) GetUserMonthlyTokenUsage(ctx, userID, providers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMonthlyTokenUsage", reflect.TypeOf((*MockStore)(nil).GetUserMonthlyTokenUsage), ctx, userID, providers)
}

// GetUsersAggregatedUsageMetrics mocks base method.
func (m *MockStore) GetUsersAggregatedUsageMetrics(ctx context.Context, provider string, from, to time.Time) ([]*types.UsersAggregatedUsageMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersAggregatedUsageMetrics", ctx, provider, from, to)
	ret0, _ := ret[0].([]*types.UsersAggregatedUsageMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersAggregatedUsageMetrics indicates an expected call of GetUsersAggregatedUsageMetrics.
func (mr *MockStoreMockRecorder) GetUsersAggregatedUsageMetrics(ctx, provider, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersAggregatedUsageMetrics", reflect.TypeOf((*MockStore)(nil).GetUsersAggregatedUsageMetrics), ctx, provider, from, to)
}

// GetWallet mocks base method.
func (m *MockStore) GetWallet(ctx context.Context, id string) (*types.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, id)
	ret0, _ := ret[0].(*types.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockStoreMockRecorder) GetWallet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockStore)(nil).GetWallet), ctx, id)
}

// GetWalletByOrg mocks base method.
func (m *MockStore) GetWalletByOrg(ctx context.Context, orgID string) (*types.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByOrg", ctx, orgID)
	ret0, _ := ret[0].(*types.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByOrg indicates an expected call of GetWalletByOrg.
func (mr *MockStoreMockRecorder) GetWalletByOrg(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByOrg", reflect.TypeOf((*MockStore)(nil).GetWalletByOrg), ctx, orgID)
}

// GetWalletByStripeCustomerID mocks base method.
func (m *MockStore) GetWalletByStripeCustomerID(ctx context.Context, stripeCustomerID string) (*types.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByStripeCustomerID", ctx, stripeCustomerID)
	ret0, _ := ret[0].(*types.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByStripeCustomerID indicates an expected call of GetWalletByStripeCustomerID.
func (mr *MockStoreMockRecorder) GetWalletByStripeCustomerID(ctx, stripeCustomerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByStripeCustomerID", reflect.TypeOf((*MockStore)(nil).GetWalletByStripeCustomerID), ctx, stripeCustomerID)
}

// GetWalletByUser mocks base method.
func (m *MockStore) GetWalletByUser(ctx context.Context, userID string) (*types.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUser", ctx, userID)
	ret0, _ := ret[0].(*types.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUser indicates an expected call of GetWalletByUser.
func (mr *MockStoreMockRecorder) GetWalletByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUser", reflect.TypeOf((*MockStore)(nil).GetWalletByUser), ctx, userID)
}

// GetZedSettingsOverride mocks base method.
func (m *MockStore) GetZedSettingsOverride(ctx context.Context, sessionID string) (*types.ZedSettingsOverride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZedSettingsOverride", ctx, sessionID)
	ret0, _ := ret[0].(*types.ZedSettingsOverride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZedSettingsOverride indicates an expected call of GetZedSettingsOverride.
func (mr *MockStoreMockRecorder) GetZedSettingsOverride(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZedSettingsOverride", reflect.TypeOf((*MockStore)(nil).GetZedSettingsOverride), ctx, sessionID)
}

// ListAPIKeys mocks base method.
func (m *MockStore) ListAPIKeys(ctx context.Context, query *ListAPIKeysQuery) ([]*types.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKeys", ctx, query)
	ret0, _ := ret[0].([]*types.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockStoreMockRecorder) ListAPIKeys(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockStore)(nil).ListAPIKeys), ctx, query)
}

// ListAccessGrants mocks base method.
func (m *MockStore) ListAccessGrants(ctx context.Context, q *ListAccessGrantsQuery) ([]*types.AccessGrant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessGrants", ctx, q)
	ret0, _ := ret[0].([]*types.AccessGrant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessGrants indicates an expected call of ListAccessGrants.
func (mr *MockStoreMockRecorder) ListAccessGrants(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessGrants", reflect.TypeOf((*MockStore)(nil).ListAccessGrants), ctx, q)
}

// ListActiveHelpRequests mocks base method.
func (m *MockStore) ListActiveHelpRequests(ctx context.Context) ([]*types.HelpRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveHelpRequests", ctx)
	ret0, _ := ret[0].([]*types.HelpRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveHelpRequests indicates an expected call of ListActiveHelpRequests.
func (mr *MockStoreMockRecorder) ListActiveHelpRequests(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveHelpRequests", reflect.TypeOf((*MockStore)(nil).ListActiveHelpRequests), ctx)
}

// ListAgentRunners mocks base method.
func (m *MockStore) ListAgentRunners(ctx context.Context, query types.ListAgentRunnersQuery) ([]*types.AgentRunner, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentRunners", ctx, query)
	ret0, _ := ret[0].([]*types.AgentRunner)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAgentRunners indicates an expected call of ListAgentRunners.
func (mr *MockStoreMockRecorder) ListAgentRunners(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentRunners", reflect.TypeOf((*MockStore)(nil).ListAgentRunners), ctx, query)
}

// ListAgentSessionStatus mocks base method.
func (m *MockStore) ListAgentSessionStatus(ctx context.Context, query *ListAgentSessionsQuery) (*types.AgentSessionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentSessionStatus", ctx, query)
	ret0, _ := ret[0].(*types.AgentSessionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentSessionStatus indicates an expected call of ListAgentSessionStatus.
func (mr *MockStoreMockRecorder) ListAgentSessionStatus(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentSessionStatus", reflect.TypeOf((*MockStore)(nil).ListAgentSessionStatus), ctx, query)
}

// ListAgentSessions mocks base method.
func (m *MockStore) ListAgentSessions(ctx context.Context, query *ListAgentSessionsQuery) (*types.AgentSessionsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentSessions", ctx, query)
	ret0, _ := ret[0].(*types.AgentSessionsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentSessions indicates an expected call of ListAgentSessions.
func (mr *MockStoreMockRecorder) ListAgentSessions(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentSessions", reflect.TypeOf((*MockStore)(nil).ListAgentSessions), ctx, query)
}

// ListAgentWorkItems mocks base method.
func (m *MockStore) ListAgentWorkItems(ctx context.Context, query *ListAgentWorkItemsQuery) (*types.AgentWorkItemsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentWorkItems", ctx, query)
	ret0, _ := ret[0].(*types.AgentWorkItemsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentWorkItems indicates an expected call of ListAgentWorkItems.
func (mr *MockStoreMockRecorder) ListAgentWorkItems(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentWorkItems", reflect.TypeOf((*MockStore)(nil).ListAgentWorkItems), ctx, query)
}

// ListAllSlots mocks base method.
func (m *MockStore) ListAllSlots(ctx context.Context) ([]*types.RunnerSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllSlots", ctx)
	ret0, _ := ret[0].([]*types.RunnerSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllSlots indicates an expected call of ListAllSlots.
func (mr *MockStoreMockRecorder) ListAllSlots(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllSlots", reflect.TypeOf((*MockStore)(nil).ListAllSlots), ctx)
}

// ListApps mocks base method.
func (m *MockStore) ListApps(ctx context.Context, q *ListAppsQuery) ([]*types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", ctx, q)
	ret0, _ := ret[0].([]*types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps.
func (mr *MockStoreMockRecorder) ListApps(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockStore)(nil).ListApps), ctx, q)
}

// ListDataEntities mocks base method.
func (m *MockStore) ListDataEntities(ctx context.Context, q *ListDataEntitiesQuery) ([]*types.DataEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataEntities", ctx, q)
	ret0, _ := ret[0].([]*types.DataEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataEntities indicates an expected call of ListDataEntities.
func (mr *MockStoreMockRecorder) ListDataEntities(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataEntities", reflect.TypeOf((*MockStore)(nil).ListDataEntities), ctx, q)
}

// ListDynamicModelInfos mocks base method.
func (m *MockStore) ListDynamicModelInfos(ctx context.Context, q *types.ListDynamicModelInfosQuery) ([]*types.DynamicModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDynamicModelInfos", ctx, q)
	ret0, _ := ret[0].([]*types.DynamicModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDynamicModelInfos indicates an expected call of ListDynamicModelInfos.
func (mr *MockStoreMockRecorder) ListDynamicModelInfos(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDynamicModelInfos", reflect.TypeOf((*MockStore)(nil).ListDynamicModelInfos), ctx, q)
}

// ListHelpRequests mocks base method.
func (m *MockStore) ListHelpRequests(ctx context.Context, query *ListHelpRequestsQuery) (*types.HelpRequestsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHelpRequests", ctx, query)
	ret0, _ := ret[0].(*types.HelpRequestsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHelpRequests indicates an expected call of ListHelpRequests.
func (mr *MockStoreMockRecorder) ListHelpRequests(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHelpRequests", reflect.TypeOf((*MockStore)(nil).ListHelpRequests), ctx, query)
}

// ListInteractions mocks base method.
func (m *MockStore) ListInteractions(ctx context.Context, query *types.ListInteractionsQuery) ([]*types.Interaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInteractions", ctx, query)
	ret0, _ := ret[0].([]*types.Interaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInteractions indicates an expected call of ListInteractions.
func (mr *MockStoreMockRecorder) ListInteractions(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInteractions", reflect.TypeOf((*MockStore)(nil).ListInteractions), ctx, query)
}

// ListKnowledge mocks base method.
func (m *MockStore) ListKnowledge(ctx context.Context, q *ListKnowledgeQuery) ([]*types.Knowledge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledge", ctx, q)
	ret0, _ := ret[0].([]*types.Knowledge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledge indicates an expected call of ListKnowledge.
func (mr *MockStoreMockRecorder) ListKnowledge(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledge", reflect.TypeOf((*MockStore)(nil).ListKnowledge), ctx, q)
}

// ListKnowledgeVersions mocks base method.
func (m *MockStore) ListKnowledgeVersions(ctx context.Context, q *ListKnowledgeVersionQuery) ([]*types.KnowledgeVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeVersions", ctx, q)
	ret0, _ := ret[0].([]*types.KnowledgeVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeVersions indicates an expected call of ListKnowledgeVersions.
func (mr *MockStoreMockRecorder) ListKnowledgeVersions(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeVersions", reflect.TypeOf((*MockStore)(nil).ListKnowledgeVersions), ctx, q)
}

// ListLLMCalls mocks base method.
func (m *MockStore) ListLLMCalls(ctx context.Context, q *ListLLMCallsQuery) ([]*types.LLMCall, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLLMCalls", ctx, q)
	ret0, _ := ret[0].([]*types.LLMCall)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLLMCalls indicates an expected call of ListLLMCalls.
func (mr *MockStoreMockRecorder) ListLLMCalls(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLLMCalls", reflect.TypeOf((*MockStore)(nil).ListLLMCalls), ctx, q)
}

// ListModels mocks base method.
func (m *MockStore) ListModels(ctx context.Context, q *ListModelsQuery) ([]*types.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", ctx, q)
	ret0, _ := ret[0].([]*types.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockStoreMockRecorder) ListModels(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockStore)(nil).ListModels), ctx, q)
}

// ListOAuthConnections mocks base method.
func (m *MockStore) ListOAuthConnections(ctx context.Context, query *ListOAuthConnectionsQuery) ([]*types.OAuthConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOAuthConnections", ctx, query)
	ret0, _ := ret[0].([]*types.OAuthConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOAuthConnections indicates an expected call of ListOAuthConnections.
func (mr *MockStoreMockRecorder) ListOAuthConnections(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOAuthConnections", reflect.TypeOf((*MockStore)(nil).ListOAuthConnections), ctx, query)
}

// ListOAuthProviders mocks base method.
func (m *MockStore) ListOAuthProviders(ctx context.Context, query *ListOAuthProvidersQuery) ([]*types.OAuthProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOAuthProviders", ctx, query)
	ret0, _ := ret[0].([]*types.OAuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOAuthProviders indicates an expected call of ListOAuthProviders.
func (mr *MockStoreMockRecorder) ListOAuthProviders(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOAuthProviders", reflect.TypeOf((*MockStore)(nil).ListOAuthProviders), ctx, query)
}

// ListOrganizationMemberships mocks base method.
func (m *MockStore) ListOrganizationMemberships(ctx context.Context, query *ListOrganizationMembershipsQuery) ([]*types.OrganizationMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationMemberships", ctx, query)
	ret0, _ := ret[0].([]*types.OrganizationMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationMemberships indicates an expected call of ListOrganizationMemberships.
func (mr *MockStoreMockRecorder) ListOrganizationMemberships(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationMemberships", reflect.TypeOf((*MockStore)(nil).ListOrganizationMemberships), ctx, query)
}

// ListOrganizations mocks base method.
func (m *MockStore) ListOrganizations(ctx context.Context, query *ListOrganizationsQuery) ([]*types.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx, query)
	ret0, _ := ret[0].([]*types.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockStoreMockRecorder) ListOrganizations(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockStore)(nil).ListOrganizations), ctx, query)
}

// ListPersonalDevEnvironments mocks base method.
func (m *MockStore) ListPersonalDevEnvironments(ctx context.Context, userID string) ([]*types.PersonalDevEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPersonalDevEnvironments", ctx, userID)
	ret0, _ := ret[0].([]*types.PersonalDevEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPersonalDevEnvironments indicates an expected call of ListPersonalDevEnvironments.
func (mr *MockStoreMockRecorder) ListPersonalDevEnvironments(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPersonalDevEnvironments", reflect.TypeOf((*MockStore)(nil).ListPersonalDevEnvironments), ctx, userID)
}

// ListProviderEndpoints mocks base method.
func (m *MockStore) ListProviderEndpoints(ctx context.Context, q *ListProviderEndpointsQuery) ([]*types.ProviderEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviderEndpoints", ctx, q)
	ret0, _ := ret[0].([]*types.ProviderEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviderEndpoints indicates an expected call of ListProviderEndpoints.
func (mr *MockStoreMockRecorder) ListProviderEndpoints(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderEndpoints", reflect.TypeOf((*MockStore)(nil).ListProviderEndpoints), ctx, q)
}

// ListRoles mocks base method.
func (m *MockStore) ListRoles(ctx context.Context, organizationID string) ([]*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx, organizationID)
	ret0, _ := ret[0].([]*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockStoreMockRecorder) ListRoles(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockStore)(nil).ListRoles), ctx, organizationID)
}

// ListSSHKeys mocks base method.
func (m *MockStore) ListSSHKeys(ctx context.Context, userID string) ([]*types.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSSHKeys", ctx, userID)
	ret0, _ := ret[0].([]*types.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSSHKeys indicates an expected call of ListSSHKeys.
func (mr *MockStoreMockRecorder) ListSSHKeys(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSHKeys", reflect.TypeOf((*MockStore)(nil).ListSSHKeys), ctx, userID)
}

// ListSecrets mocks base method.
func (m *MockStore) ListSecrets(ctx context.Context, q *ListSecretsQuery) ([]*types.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", ctx, q)
	ret0, _ := ret[0].([]*types.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockStoreMockRecorder) ListSecrets(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockStore)(nil).ListSecrets), ctx, q)
}

// ListSessions mocks base method.
func (m *MockStore) ListSessions(ctx context.Context, query ListSessionsQuery) ([]*types.Session, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessions", ctx, query)
	ret0, _ := ret[0].([]*types.Session)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSessions indicates an expected call of ListSessions.
func (mr *MockStoreMockRecorder) ListSessions(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockStore)(nil).ListSessions), ctx, query)
}

// ListSlots mocks base method.
func (m *MockStore) ListSlots(ctx context.Context, runnerID string) ([]*types.RunnerSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlots", ctx, runnerID)
	ret0, _ := ret[0].([]*types.RunnerSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlots indicates an expected call of ListSlots.
func (mr *MockStoreMockRecorder) ListSlots(ctx, runnerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlots", reflect.TypeOf((*MockStore)(nil).ListSlots), ctx, runnerID)
}

// ListSpecTaskImplementationTasks mocks base method.
func (m *MockStore) ListSpecTaskImplementationTasks(ctx context.Context, specTaskID string) ([]*types.SpecTaskImplementationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpecTaskImplementationTasks", ctx, specTaskID)
	ret0, _ := ret[0].([]*types.SpecTaskImplementationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpecTaskImplementationTasks indicates an expected call of ListSpecTaskImplementationTasks.
func (mr *MockStoreMockRecorder) ListSpecTaskImplementationTasks(ctx, specTaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpecTaskImplementationTasks", reflect.TypeOf((*MockStore)(nil).ListSpecTaskImplementationTasks), ctx, specTaskID)
}

// ListSpecTaskWorkSessions mocks base method.
func (m *MockStore) ListSpecTaskWorkSessions(ctx context.Context, specTaskID string) ([]*types.SpecTaskWorkSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpecTaskWorkSessions", ctx, specTaskID)
	ret0, _ := ret[0].([]*types.SpecTaskWorkSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpecTaskWorkSessions indicates an expected call of ListSpecTaskWorkSessions.
func (mr *MockStoreMockRecorder) ListSpecTaskWorkSessions(ctx, specTaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpecTaskWorkSessions", reflect.TypeOf((*MockStore)(nil).ListSpecTaskWorkSessions), ctx, specTaskID)
}

// ListSpecTaskZedThreads mocks base method.
func (m *MockStore) ListSpecTaskZedThreads(ctx context.Context, specTaskID string) ([]*types.SpecTaskZedThread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpecTaskZedThreads", ctx, specTaskID)
	ret0, _ := ret[0].([]*types.SpecTaskZedThread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpecTaskZedThreads indicates an expected call of ListSpecTaskZedThreads.
func (mr *MockStoreMockRecorder) ListSpecTaskZedThreads(ctx, specTaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpecTaskZedThreads", reflect.TypeOf((*MockStore)(nil).ListSpecTaskZedThreads), ctx, specTaskID)
}

// ListSpecTasks mocks base method.
func (m *MockStore) ListSpecTasks(ctx context.Context, filters *types.SpecTaskFilters) ([]*types.SpecTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpecTasks", ctx, filters)
	ret0, _ := ret[0].([]*types.SpecTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpecTasks indicates an expected call of ListSpecTasks.
func (mr *MockStoreMockRecorder) ListSpecTasks(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpecTasks", reflect.TypeOf((*MockStore)(nil).ListSpecTasks), ctx, filters)
}

// ListStepInfos mocks base method.
func (m *MockStore) ListStepInfos(ctx context.Context, query *ListStepInfosQuery) ([]*types.StepInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStepInfos", ctx, query)
	ret0, _ := ret[0].([]*types.StepInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStepInfos indicates an expected call of ListStepInfos.
func (mr *MockStoreMockRecorder) ListStepInfos(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStepInfos", reflect.TypeOf((*MockStore)(nil).ListStepInfos), ctx, query)
}

// ListTeamMemberships mocks base method.
func (m *MockStore) ListTeamMemberships(ctx context.Context, query *ListTeamMembershipsQuery) ([]*types.TeamMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMemberships", ctx, query)
	ret0, _ := ret[0].([]*types.TeamMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamMemberships indicates an expected call of ListTeamMemberships.
func (mr *MockStoreMockRecorder) ListTeamMemberships(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMemberships", reflect.TypeOf((*MockStore)(nil).ListTeamMemberships), ctx, query)
}

// ListTeams mocks base method.
func (m *MockStore) ListTeams(ctx context.Context, query *ListTeamsQuery) ([]*types.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx, query)
	ret0, _ := ret[0].([]*types.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockStoreMockRecorder) ListTeams(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockStore)(nil).ListTeams), ctx, query)
}

// ListTopUps mocks base method.
func (m *MockStore) ListTopUps(ctx context.Context, q *ListTopUpsQuery) ([]*types.TopUp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopUps", ctx, q)
	ret0, _ := ret[0].([]*types.TopUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopUps indicates an expected call of ListTopUps.
func (mr *MockStoreMockRecorder) ListTopUps(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopUps", reflect.TypeOf((*MockStore)(nil).ListTopUps), ctx, q)
}

// ListTransactions mocks base method.
func (m *MockStore) ListTransactions(ctx context.Context, q *ListTransactionsQuery) ([]*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, q)
	ret0, _ := ret[0].([]*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockStoreMockRecorder) ListTransactions(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockStore)(nil).ListTransactions), ctx, q)
}

// ListTriggerConfigurations mocks base method.
func (m *MockStore) ListTriggerConfigurations(ctx context.Context, q *ListTriggerConfigurationsQuery) ([]*types.TriggerConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTriggerConfigurations", ctx, q)
	ret0, _ := ret[0].([]*types.TriggerConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTriggerConfigurations indicates an expected call of ListTriggerConfigurations.
func (mr *MockStoreMockRecorder) ListTriggerConfigurations(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTriggerConfigurations", reflect.TypeOf((*MockStore)(nil).ListTriggerConfigurations), ctx, q)
}

// ListTriggerExecutions mocks base method.
func (m *MockStore) ListTriggerExecutions(ctx context.Context, q *ListTriggerExecutionsQuery) ([]*types.TriggerExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTriggerExecutions", ctx, q)
	ret0, _ := ret[0].([]*types.TriggerExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTriggerExecutions indicates an expected call of ListTriggerExecutions.
func (mr *MockStoreMockRecorder) ListTriggerExecutions(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTriggerExecutions", reflect.TypeOf((*MockStore)(nil).ListTriggerExecutions), ctx, q)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(ctx context.Context, query *ListUsersQuery) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, query)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), ctx, query)
}

// ListWorkSessionsBySpecTask mocks base method.
func (m *MockStore) ListWorkSessionsBySpecTask(ctx context.Context, specTaskID string, phase *types.SpecTaskPhase) ([]*types.SpecTaskWorkSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkSessionsBySpecTask", ctx, specTaskID, phase)
	ret0, _ := ret[0].([]*types.SpecTaskWorkSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkSessionsBySpecTask indicates an expected call of ListWorkSessionsBySpecTask.
func (mr *MockStoreMockRecorder) ListWorkSessionsBySpecTask(ctx, specTaskID, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkSessionsBySpecTask", reflect.TypeOf((*MockStore)(nil).ListWorkSessionsBySpecTask), ctx, specTaskID, phase)
}

// LookupKnowledge mocks base method.
func (m *MockStore) LookupKnowledge(ctx context.Context, q *LookupKnowledgeQuery) (*types.Knowledge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupKnowledge", ctx, q)
	ret0, _ := ret[0].(*types.Knowledge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupKnowledge indicates an expected call of LookupKnowledge.
func (mr *MockStoreMockRecorder) LookupKnowledge(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupKnowledge", reflect.TypeOf((*MockStore)(nil).LookupKnowledge), ctx, q)
}

// MarkSessionAsActive mocks base method.
func (m *MockStore) MarkSessionAsActive(ctx context.Context, sessionID, task string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSessionAsActive", ctx, sessionID, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSessionAsActive indicates an expected call of MarkSessionAsActive.
func (mr *MockStoreMockRecorder) MarkSessionAsActive(ctx, sessionID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSessionAsActive", reflect.TypeOf((*MockStore)(nil).MarkSessionAsActive), ctx, sessionID, task)
}

// MarkSessionAsCompleted mocks base method.
func (m *MockStore) MarkSessionAsCompleted(ctx context.Context, sessionID, completionType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSessionAsCompleted", ctx, sessionID, completionType)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSessionAsCompleted indicates an expected call of MarkSessionAsCompleted.
func (mr *MockStoreMockRecorder) MarkSessionAsCompleted(ctx, sessionID, completionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSessionAsCompleted", reflect.TypeOf((*MockStore)(nil).MarkSessionAsCompleted), ctx, sessionID, completionType)
}

// MarkSessionAsNeedingHelp mocks base method.
func (m *MockStore) MarkSessionAsNeedingHelp(ctx context.Context, sessionID, task string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSessionAsNeedingHelp", ctx, sessionID, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSessionAsNeedingHelp indicates an expected call of MarkSessionAsNeedingHelp.
func (mr *MockStoreMockRecorder) MarkSessionAsNeedingHelp(ctx, sessionID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSessionAsNeedingHelp", reflect.TypeOf((*MockStore)(nil).MarkSessionAsNeedingHelp), ctx, sessionID, task)
}

// ParseAndCreateImplementationTasks mocks base method.
func (m *MockStore) ParseAndCreateImplementationTasks(ctx context.Context, specTaskID, implementationPlan string) ([]*types.SpecTaskImplementationTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAndCreateImplementationTasks", ctx, specTaskID, implementationPlan)
	ret0, _ := ret[0].([]*types.SpecTaskImplementationTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAndCreateImplementationTasks indicates an expected call of ParseAndCreateImplementationTasks.
func (mr *MockStoreMockRecorder) ParseAndCreateImplementationTasks(ctx, specTaskID, implementationPlan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAndCreateImplementationTasks", reflect.TypeOf((*MockStore)(nil).ParseAndCreateImplementationTasks), ctx, specTaskID, implementationPlan)
}

// ResetRunningExecutions mocks base method.
func (m *MockStore) ResetRunningExecutions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetRunningExecutions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetRunningExecutions indicates an expected call of ResetRunningExecutions.
func (mr *MockStoreMockRecorder) ResetRunningExecutions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetRunningExecutions", reflect.TypeOf((*MockStore)(nil).ResetRunningExecutions), ctx)
}

// SearchUsers mocks base method.
func (m *MockStore) SearchUsers(ctx context.Context, query *SearchUsersQuery) ([]*types.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", ctx, query)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockStoreMockRecorder) SearchUsers(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockStore)(nil).SearchUsers), ctx, query)
}

// SeedModelsFromEnvironment mocks base method.
func (m *MockStore) SeedModelsFromEnvironment(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedModelsFromEnvironment", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeedModelsFromEnvironment indicates an expected call of SeedModelsFromEnvironment.
func (mr *MockStoreMockRecorder) SeedModelsFromEnvironment(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedModelsFromEnvironment", reflect.TypeOf((*MockStore)(nil).SeedModelsFromEnvironment), ctx)
}

// SetLicenseKey mocks base method.
func (m *MockStore) SetLicenseKey(ctx context.Context, licenseKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLicenseKey", ctx, licenseKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLicenseKey indicates an expected call of SetLicenseKey.
func (mr *MockStoreMockRecorder) SetLicenseKey(ctx, licenseKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLicenseKey", reflect.TypeOf((*MockStore)(nil).SetLicenseKey), ctx, licenseKey)
}

// SpawnWorkSession mocks base method.
func (m *MockStore) SpawnWorkSession(ctx context.Context, parentSessionID string, config *types.SpecTaskWorkSessionSpawnRequest) (*types.SpecTaskWorkSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpawnWorkSession", ctx, parentSessionID, config)
	ret0, _ := ret[0].(*types.SpecTaskWorkSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpawnWorkSession indicates an expected call of SpawnWorkSession.
func (mr *MockStoreMockRecorder) SpawnWorkSession(ctx, parentSessionID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpawnWorkSession", reflect.TypeOf((*MockStore)(nil).SpawnWorkSession), ctx, parentSessionID, config)
}

// UpdateAgentRunner mocks base method.
func (m *MockStore) UpdateAgentRunner(ctx context.Context, runner *types.AgentRunner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentRunner", ctx, runner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentRunner indicates an expected call of UpdateAgentRunner.
func (mr *MockStoreMockRecorder) UpdateAgentRunner(ctx, runner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentRunner", reflect.TypeOf((*MockStore)(nil).UpdateAgentRunner), ctx, runner)
}

// UpdateAgentRunnerHeartbeat mocks base method.
func (m *MockStore) UpdateAgentRunnerHeartbeat(ctx context.Context, runnerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentRunnerHeartbeat", ctx, runnerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentRunnerHeartbeat indicates an expected call of UpdateAgentRunnerHeartbeat.
func (mr *MockStoreMockRecorder) UpdateAgentRunnerHeartbeat(ctx, runnerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentRunnerHeartbeat", reflect.TypeOf((*MockStore)(nil).UpdateAgentRunnerHeartbeat), ctx, runnerID)
}

// UpdateAgentRunnerStatus mocks base method.
func (m *MockStore) UpdateAgentRunnerStatus(ctx context.Context, runnerID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentRunnerStatus", ctx, runnerID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentRunnerStatus indicates an expected call of UpdateAgentRunnerStatus.
func (mr *MockStoreMockRecorder) UpdateAgentRunnerStatus(ctx, runnerID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentRunnerStatus", reflect.TypeOf((*MockStore)(nil).UpdateAgentRunnerStatus), ctx, runnerID, status)
}

// UpdateAgentSession mocks base method.
func (m *MockStore) UpdateAgentSession(ctx context.Context, session *types.AgentSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentSession indicates an expected call of UpdateAgentSession.
func (mr *MockStoreMockRecorder) UpdateAgentSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentSession", reflect.TypeOf((*MockStore)(nil).UpdateAgentSession), ctx, session)
}

// UpdateAgentSessionStatus mocks base method.
func (m *MockStore) UpdateAgentSessionStatus(ctx context.Context, status *types.AgentSessionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentSessionStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentSessionStatus indicates an expected call of UpdateAgentSessionStatus.
func (mr *MockStoreMockRecorder) UpdateAgentSessionStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentSessionStatus", reflect.TypeOf((*MockStore)(nil).UpdateAgentSessionStatus), ctx, status)
}

// UpdateAgentWorkItem mocks base method.
func (m *MockStore) UpdateAgentWorkItem(ctx context.Context, workItem *types.AgentWorkItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentWorkItem", ctx, workItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentWorkItem indicates an expected call of UpdateAgentWorkItem.
func (mr *MockStoreMockRecorder) UpdateAgentWorkItem(ctx, workItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentWorkItem", reflect.TypeOf((*MockStore)(nil).UpdateAgentWorkItem), ctx, workItem)
}

// UpdateApp mocks base method.
func (m *MockStore) UpdateApp(ctx context.Context, tool *types.App) (*types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", ctx, tool)
	ret0, _ := ret[0].(*types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockStoreMockRecorder) UpdateApp(ctx, tool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockStore)(nil).UpdateApp), ctx, tool)
}

// UpdateDataEntity mocks base method.
func (m *MockStore) UpdateDataEntity(ctx context.Context, dataEntity *types.DataEntity) (*types.DataEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataEntity", ctx, dataEntity)
	ret0, _ := ret[0].(*types.DataEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataEntity indicates an expected call of UpdateDataEntity.
func (mr *MockStoreMockRecorder) UpdateDataEntity(ctx, dataEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataEntity", reflect.TypeOf((*MockStore)(nil).UpdateDataEntity), ctx, dataEntity)
}

// UpdateDynamicModelInfo mocks base method.
func (m *MockStore) UpdateDynamicModelInfo(ctx context.Context, modelInfo *types.DynamicModelInfo) (*types.DynamicModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDynamicModelInfo", ctx, modelInfo)
	ret0, _ := ret[0].(*types.DynamicModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDynamicModelInfo indicates an expected call of UpdateDynamicModelInfo.
func (mr *MockStoreMockRecorder) UpdateDynamicModelInfo(ctx, modelInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDynamicModelInfo", reflect.TypeOf((*MockStore)(nil).UpdateDynamicModelInfo), ctx, modelInfo)
}

// UpdateHelpRequest mocks base method.
func (m *MockStore) UpdateHelpRequest(ctx context.Context, request *types.HelpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHelpRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHelpRequest indicates an expected call of UpdateHelpRequest.
func (mr *MockStoreMockRecorder) UpdateHelpRequest(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHelpRequest", reflect.TypeOf((*MockStore)(nil).UpdateHelpRequest), ctx, request)
}

// UpdateInteraction mocks base method.
func (m *MockStore) UpdateInteraction(ctx context.Context, interaction *types.Interaction) (*types.Interaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInteraction", ctx, interaction)
	ret0, _ := ret[0].(*types.Interaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInteraction indicates an expected call of UpdateInteraction.
func (mr *MockStoreMockRecorder) UpdateInteraction(ctx, interaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInteraction", reflect.TypeOf((*MockStore)(nil).UpdateInteraction), ctx, interaction)
}

// UpdateKnowledge mocks base method.
func (m *MockStore) UpdateKnowledge(ctx context.Context, knowledge *types.Knowledge) (*types.Knowledge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledge", ctx, knowledge)
	ret0, _ := ret[0].(*types.Knowledge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKnowledge indicates an expected call of UpdateKnowledge.
func (mr *MockStoreMockRecorder) UpdateKnowledge(ctx, knowledge any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledge", reflect.TypeOf((*MockStore)(nil).UpdateKnowledge), ctx, knowledge)
}

// UpdateKnowledgeState mocks base method.
func (m *MockStore) UpdateKnowledgeState(ctx context.Context, id string, state types.KnowledgeState, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledgeState", ctx, id, state, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKnowledgeState indicates an expected call of UpdateKnowledgeState.
func (mr *MockStoreMockRecorder) UpdateKnowledgeState(ctx, id, state, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeState", reflect.TypeOf((*MockStore)(nil).UpdateKnowledgeState), ctx, id, state, message)
}

// UpdateModel mocks base method.
func (m *MockStore) UpdateModel(ctx context.Context, model *types.Model) (*types.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModel", ctx, model)
	ret0, _ := ret[0].(*types.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModel indicates an expected call of UpdateModel.
func (mr *MockStoreMockRecorder) UpdateModel(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModel", reflect.TypeOf((*MockStore)(nil).UpdateModel), ctx, model)
}

// UpdateOAuthConnection mocks base method.
func (m *MockStore) UpdateOAuthConnection(ctx context.Context, connection *types.OAuthConnection) (*types.OAuthConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOAuthConnection", ctx, connection)
	ret0, _ := ret[0].(*types.OAuthConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOAuthConnection indicates an expected call of UpdateOAuthConnection.
func (mr *MockStoreMockRecorder) UpdateOAuthConnection(ctx, connection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOAuthConnection", reflect.TypeOf((*MockStore)(nil).UpdateOAuthConnection), ctx, connection)
}

// UpdateOAuthProvider mocks base method.
func (m *MockStore) UpdateOAuthProvider(ctx context.Context, provider *types.OAuthProvider) (*types.OAuthProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOAuthProvider", ctx, provider)
	ret0, _ := ret[0].(*types.OAuthProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOAuthProvider indicates an expected call of UpdateOAuthProvider.
func (mr *MockStoreMockRecorder) UpdateOAuthProvider(ctx, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOAuthProvider", reflect.TypeOf((*MockStore)(nil).UpdateOAuthProvider), ctx, provider)
}

// UpdateOrganization mocks base method.
func (m *MockStore) UpdateOrganization(ctx context.Context, org *types.Organization) (*types.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, org)
	ret0, _ := ret[0].(*types.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockStoreMockRecorder) UpdateOrganization(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockStore)(nil).UpdateOrganization), ctx, org)
}

// UpdateOrganizationMembership mocks base method.
func (m *MockStore) UpdateOrganizationMembership(ctx context.Context, membership *types.OrganizationMembership) (*types.OrganizationMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationMembership", ctx, membership)
	ret0, _ := ret[0].(*types.OrganizationMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationMembership indicates an expected call of UpdateOrganizationMembership.
func (mr *MockStoreMockRecorder) UpdateOrganizationMembership(ctx, membership any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationMembership", reflect.TypeOf((*MockStore)(nil).UpdateOrganizationMembership), ctx, membership)
}

// UpdatePersonalDevEnvironment mocks base method.
func (m *MockStore) UpdatePersonalDevEnvironment(ctx context.Context, pde *types.PersonalDevEnvironment) (*types.PersonalDevEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePersonalDevEnvironment", ctx, pde)
	ret0, _ := ret[0].(*types.PersonalDevEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePersonalDevEnvironment indicates an expected call of UpdatePersonalDevEnvironment.
func (mr *MockStoreMockRecorder) UpdatePersonalDevEnvironment(ctx, pde any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersonalDevEnvironment", reflect.TypeOf((*MockStore)(nil).UpdatePersonalDevEnvironment), ctx, pde)
}

// UpdateProviderEndpoint mocks base method.
func (m *MockStore) UpdateProviderEndpoint(ctx context.Context, providerEndpoint *types.ProviderEndpoint) (*types.ProviderEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProviderEndpoint", ctx, providerEndpoint)
	ret0, _ := ret[0].(*types.ProviderEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProviderEndpoint indicates an expected call of UpdateProviderEndpoint.
func (mr *MockStoreMockRecorder) UpdateProviderEndpoint(ctx, providerEndpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProviderEndpoint", reflect.TypeOf((*MockStore)(nil).UpdateProviderEndpoint), ctx, providerEndpoint)
}

// UpdateRole mocks base method.
func (m *MockStore) UpdateRole(ctx context.Context, role *types.Role) (*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, role)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockStoreMockRecorder) UpdateRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockStore)(nil).UpdateRole), ctx, role)
}

// UpdateSSHKeyLastUsed mocks base method.
func (m *MockStore) UpdateSSHKeyLastUsed(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSSHKeyLastUsed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSSHKeyLastUsed indicates an expected call of UpdateSSHKeyLastUsed.
func (mr *MockStoreMockRecorder) UpdateSSHKeyLastUsed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSSHKeyLastUsed", reflect.TypeOf((*MockStore)(nil).UpdateSSHKeyLastUsed), ctx, id)
}

// UpdateSecret mocks base method.
func (m *MockStore) UpdateSecret(ctx context.Context, secret *types.Secret) (*types.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", ctx, secret)
	ret0, _ := ret[0].(*types.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockStoreMockRecorder) UpdateSecret(ctx, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockStore)(nil).UpdateSecret), ctx, secret)
}

// UpdateSession mocks base method.
func (m *MockStore) UpdateSession(ctx context.Context, session types.Session) (*types.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, session)
	ret0, _ := ret[0].(*types.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockStoreMockRecorder) UpdateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockStore)(nil).UpdateSession), ctx, session)
}

// UpdateSessionMeta mocks base method.
func (m *MockStore) UpdateSessionMeta(ctx context.Context, data types.SessionMetaUpdate) (*types.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionMeta", ctx, data)
	ret0, _ := ret[0].(*types.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSessionMeta indicates an expected call of UpdateSessionMeta.
func (mr *MockStoreMockRecorder) UpdateSessionMeta(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionMeta", reflect.TypeOf((*MockStore)(nil).UpdateSessionMeta), ctx, data)
}

// UpdateSessionName mocks base method.
func (m *MockStore) UpdateSessionName(ctx context.Context, sessionID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionName", ctx, sessionID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionName indicates an expected call of UpdateSessionName.
func (mr *MockStoreMockRecorder) UpdateSessionName(ctx, sessionID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionName", reflect.TypeOf((*MockStore)(nil).UpdateSessionName), ctx, sessionID, name)
}

// UpdateSlot mocks base method.
func (m *MockStore) UpdateSlot(ctx context.Context, slot *types.RunnerSlot) (*types.RunnerSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlot", ctx, slot)
	ret0, _ := ret[0].(*types.RunnerSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlot indicates an expected call of UpdateSlot.
func (mr *MockStoreMockRecorder) UpdateSlot(ctx, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlot", reflect.TypeOf((*MockStore)(nil).UpdateSlot), ctx, slot)
}

// UpdateSpecTask mocks base method.
func (m *MockStore) UpdateSpecTask(ctx context.Context, task *types.SpecTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecTask indicates an expected call of UpdateSpecTask.
func (mr *MockStoreMockRecorder) UpdateSpecTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecTask", reflect.TypeOf((*MockStore)(nil).UpdateSpecTask), ctx, task)
}

// UpdateSpecTaskImplementationTask mocks base method.
func (m *MockStore) UpdateSpecTaskImplementationTask(ctx context.Context, implTask *types.SpecTaskImplementationTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecTaskImplementationTask", ctx, implTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecTaskImplementationTask indicates an expected call of UpdateSpecTaskImplementationTask.
func (mr *MockStoreMockRecorder) UpdateSpecTaskImplementationTask(ctx, implTask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecTaskImplementationTask", reflect.TypeOf((*MockStore)(nil).UpdateSpecTaskImplementationTask), ctx, implTask)
}

// UpdateSpecTaskWorkSession mocks base method.
func (m *MockStore) UpdateSpecTaskWorkSession(ctx context.Context, workSession *types.SpecTaskWorkSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecTaskWorkSession", ctx, workSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecTaskWorkSession indicates an expected call of UpdateSpecTaskWorkSession.
func (mr *MockStoreMockRecorder) UpdateSpecTaskWorkSession(ctx, workSession any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecTaskWorkSession", reflect.TypeOf((*MockStore)(nil).UpdateSpecTaskWorkSession), ctx, workSession)
}

// UpdateSpecTaskZedInstance mocks base method.
func (m *MockStore) UpdateSpecTaskZedInstance(ctx context.Context, specTaskID, zedInstanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecTaskZedInstance", ctx, specTaskID, zedInstanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecTaskZedInstance indicates an expected call of UpdateSpecTaskZedInstance.
func (mr *MockStoreMockRecorder) UpdateSpecTaskZedInstance(ctx, specTaskID, zedInstanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecTaskZedInstance", reflect.TypeOf((*MockStore)(nil).UpdateSpecTaskZedInstance), ctx, specTaskID, zedInstanceID)
}

// UpdateSpecTaskZedThread mocks base method.
func (m *MockStore) UpdateSpecTaskZedThread(ctx context.Context, zedThread *types.SpecTaskZedThread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecTaskZedThread", ctx, zedThread)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecTaskZedThread indicates an expected call of UpdateSpecTaskZedThread.
func (mr *MockStoreMockRecorder) UpdateSpecTaskZedThread(ctx, zedThread any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecTaskZedThread", reflect.TypeOf((*MockStore)(nil).UpdateSpecTaskZedThread), ctx, zedThread)
}

// UpdateSystemSettings mocks base method.
func (m *MockStore) UpdateSystemSettings(ctx context.Context, req *types.SystemSettingsRequest) (*types.SystemSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystemSettings", ctx, req)
	ret0, _ := ret[0].(*types.SystemSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystemSettings indicates an expected call of UpdateSystemSettings.
func (mr *MockStoreMockRecorder) UpdateSystemSettings(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemSettings", reflect.TypeOf((*MockStore)(nil).UpdateSystemSettings), ctx, req)
}

// UpdateTeam mocks base method.
func (m *MockStore) UpdateTeam(ctx context.Context, team *types.Team) (*types.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", ctx, team)
	ret0, _ := ret[0].(*types.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockStoreMockRecorder) UpdateTeam(ctx, team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockStore)(nil).UpdateTeam), ctx, team)
}

// UpdateTriggerConfiguration mocks base method.
func (m *MockStore) UpdateTriggerConfiguration(ctx context.Context, triggerConfig *types.TriggerConfiguration) (*types.TriggerConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTriggerConfiguration", ctx, triggerConfig)
	ret0, _ := ret[0].(*types.TriggerConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTriggerConfiguration indicates an expected call of UpdateTriggerConfiguration.
func (mr *MockStoreMockRecorder) UpdateTriggerConfiguration(ctx, triggerConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTriggerConfiguration", reflect.TypeOf((*MockStore)(nil).UpdateTriggerConfiguration), ctx, triggerConfig)
}

// UpdateTriggerExecution mocks base method.
func (m *MockStore) UpdateTriggerExecution(ctx context.Context, execution *types.TriggerExecution) (*types.TriggerExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTriggerExecution", ctx, execution)
	ret0, _ := ret[0].(*types.TriggerExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTriggerExecution indicates an expected call of UpdateTriggerExecution.
func (mr *MockStoreMockRecorder) UpdateTriggerExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTriggerExecution", reflect.TypeOf((*MockStore)(nil).UpdateTriggerExecution), ctx, execution)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, user *types.User) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, user)
}

// UpdateUserMeta mocks base method.
func (m *MockStore) UpdateUserMeta(ctx context.Context, UserMeta types.UserMeta) (*types.UserMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMeta", ctx, UserMeta)
	ret0, _ := ret[0].(*types.UserMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserMeta indicates an expected call of UpdateUserMeta.
func (mr *MockStoreMockRecorder) UpdateUserMeta(ctx, UserMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMeta", reflect.TypeOf((*MockStore)(nil).UpdateUserMeta), ctx, UserMeta)
}

// UpdateWallet mocks base method.
func (m *MockStore) UpdateWallet(ctx context.Context, wallet *types.Wallet) (*types.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, wallet)
	ret0, _ := ret[0].(*types.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockStoreMockRecorder) UpdateWallet(ctx, wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockStore)(nil).UpdateWallet), ctx, wallet)
}

// UpdateWalletBalance mocks base method.
func (m *MockStore) UpdateWalletBalance(ctx context.Context, walletID string, amount float64, meta types.TransactionMetadata) (*types.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletBalance", ctx, walletID, amount, meta)
	ret0, _ := ret[0].(*types.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletBalance indicates an expected call of UpdateWalletBalance.
func (mr *MockStoreMockRecorder) UpdateWalletBalance(ctx, walletID, amount, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletBalance", reflect.TypeOf((*MockStore)(nil).UpdateWalletBalance), ctx, walletID, amount, meta)
}

// UpsertZedSettingsOverride mocks base method.
func (m *MockStore) UpsertZedSettingsOverride(ctx context.Context, override *types.ZedSettingsOverride) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertZedSettingsOverride", ctx, override)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertZedSettingsOverride indicates an expected call of UpsertZedSettingsOverride.
func (mr *MockStoreMockRecorder) UpsertZedSettingsOverride(ctx, override any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertZedSettingsOverride", reflect.TypeOf((*MockStore)(nil).UpsertZedSettingsOverride), ctx, override)
}

// MockEmbeddingsStore is a mock of EmbeddingsStore interface.
type MockEmbeddingsStore struct {
	ctrl     *gomock.Controller
	recorder *MockEmbeddingsStoreMockRecorder
	isgomock struct{}
}

// MockEmbeddingsStoreMockRecorder is the mock recorder for MockEmbeddingsStore.
type MockEmbeddingsStoreMockRecorder struct {
	mock *MockEmbeddingsStore
}

// NewMockEmbeddingsStore creates a new mock instance.
func NewMockEmbeddingsStore(ctrl *gomock.Controller) *MockEmbeddingsStore {
	mock := &MockEmbeddingsStore{ctrl: ctrl}
	mock.recorder = &MockEmbeddingsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbeddingsStore) EXPECT() *MockEmbeddingsStoreMockRecorder {
	return m.recorder
}

// CreateKnowledgeEmbedding mocks base method.
func (m *MockEmbeddingsStore) CreateKnowledgeEmbedding(ctx context.Context, embeddings ...*types.KnowledgeEmbeddingItem) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range embeddings {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKnowledgeEmbedding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKnowledgeEmbedding indicates an expected call of CreateKnowledgeEmbedding.
func (mr *MockEmbeddingsStoreMockRecorder) CreateKnowledgeEmbedding(ctx any, embeddings ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, embeddings...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeEmbedding", reflect.TypeOf((*MockEmbeddingsStore)(nil).CreateKnowledgeEmbedding), varargs...)
}

// DeleteKnowledgeEmbedding mocks base method.
func (m *MockEmbeddingsStore) DeleteKnowledgeEmbedding(ctx context.Context, knowledgeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeEmbedding", ctx, knowledgeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKnowledgeEmbedding indicates an expected call of DeleteKnowledgeEmbedding.
func (mr *MockEmbeddingsStoreMockRecorder) DeleteKnowledgeEmbedding(ctx, knowledgeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeEmbedding", reflect.TypeOf((*MockEmbeddingsStore)(nil).DeleteKnowledgeEmbedding), ctx, knowledgeID)
}

// QueryKnowledgeEmbeddings mocks base method.
func (m *MockEmbeddingsStore) QueryKnowledgeEmbeddings(ctx context.Context, q *types.KnowledgeEmbeddingQuery) ([]*types.KnowledgeEmbeddingItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryKnowledgeEmbeddings", ctx, q)
	ret0, _ := ret[0].([]*types.KnowledgeEmbeddingItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryKnowledgeEmbeddings indicates an expected call of QueryKnowledgeEmbeddings.
func (mr *MockEmbeddingsStoreMockRecorder) QueryKnowledgeEmbeddings(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryKnowledgeEmbeddings", reflect.TypeOf((*MockEmbeddingsStore)(nil).QueryKnowledgeEmbeddings), ctx, q)
}
