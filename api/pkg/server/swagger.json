{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the HelixML API.",
        "title": "HelixML API reference",
        "contact": {
            "name": "Helix support",
            "url": "https://app.helix.ml/",
            "email": "info@helix.ml"
        },
        "version": "0.1",
        "x-logo": {
            "altText": "Helix logo",
            "url": "https://avatars.githubusercontent.com/u/149581110?s=200\u0026v=4"
        }
    },
    "host": "app.helix.ml",
    "paths": {
        "/api/v1/admin/agent-sandboxes/debug": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves combined debug data from Wolf (memory, lobbies, sessions) for the Agent Sandboxes dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Wolf debugging data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.AgentSandboxesDebugResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/agent-sandboxes/events": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Proxies Server-Sent Events from Wolf for real-time monitoring",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Wolf real-time events (SSE)",
                "responses": {
                    "200": {
                        "description": "event: message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/agents/fleet": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get agent fleet data including active sessions, work queue, and help requests without dashboard data",
                "tags": [
                    "agents"
                ],
                "summary": "Get agent fleet data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AgentFleetSummary"
                        }
                    }
                }
            }
        },
        "/api/v1/agents/fleet/live-progress": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get real-time progress of all agents working on SpecTasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpecTasks"
                ],
                "summary": "Get live agent fleet progress",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.LiveAgentFleetProgressResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/agents/help-requests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List help requests from agents needing human assistance",
                "tags": [
                    "agents"
                ],
                "summary": "List help requests",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Help request status filter",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Urgency level filter",
                        "name": "urgency",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HelpRequestsListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/agents/help-requests/{request_id}/resolve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Provide resolution for a help request from an agent",
                "tags": [
                    "agents"
                ],
                "summary": "Resolve a help request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Help request ID",
                        "name": "request_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resolution details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HelpRequest"
                        }
                    }
                }
            }
        },
        "/api/v1/agents/sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List agent sessions with filtering and pagination",
                "tags": [
                    "agents"
                ],
                "summary": "List agent sessions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Session status filter",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Agent type filter",
                        "name": "agent_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Show only active sessions",
                        "name": "active_only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AgentSessionsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/agents/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics about the agent work queue",
                "tags": [
                    "agents"
                ],
                "summary": "Get work queue statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AgentWorkQueueStats"
                        }
                    }
                }
            }
        },
        "/api/v1/agents/work": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List work items in the agent queue with filtering and pagination",
                "tags": [
                    "agents"
                ],
                "summary": "List agent work items",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Work item status filter",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Agent type filter",
                        "name": "agent_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Work item source filter",
                        "name": "source",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AgentWorkItemsResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new work item in the agent queue",
                "tags": [
                    "agents"
                ],
                "summary": "Create a new agent work item",
                "parameters": [
                    {
                        "description": "Work item details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AgentWorkItemCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.AgentWorkItem"
                        }
                    }
                }
            }
        },
        "/api/v1/agents/work/{work_item_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific work item",
                "tags": [
                    "agents"
                ],
                "summary": "Get an agent work item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work item ID",
                        "name": "work_item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AgentWorkItem"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update details of a specific work item",
                "tags": [
                    "agents"
                ],
                "summary": "Update an agent work item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work item ID",
                        "name": "work_item_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AgentWorkItemUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AgentWorkItem"
                        }
                    }
                }
            }
        },
        "/api/v1/api_keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get API keys",
                "tags": [
                    "api-keys"
                ],
                "summary": "Get API keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by types (comma-separated list)",
                        "name": "types",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by app ID",
                        "name": "app_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ApiKey"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new API key",
                "tags": [
                    "api-keys"
                ],
                "summary": "Create a new API key",
                "parameters": [
                    {
                        "description": "Request body with name and type",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an API key",
                "tags": [
                    "api-keys"
                ],
                "summary": "Delete an API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key to delete",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/apps": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List apps for the user. Apps are pre-configured to spawn sessions with specific tools and config.",
                "tags": [
                    "apps"
                ],
                "summary": "List apps",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.App"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "description": "Request body with app configuration. Can be legacy App format or structured format with organization_id, global, and yaml_config fields.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.App"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.AppCreateResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{app_id}/triggers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List triggers for the app",
                "tags": [
                    "apps"
                ],
                "summary": "List app triggers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "app_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.TriggerConfiguration"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.App"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "description": "Request body with app configuration.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.App"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Tool ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.App"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/apps/{id}/access-grants": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List access grants for an app (organization owners and members can list access grants)",
                "tags": [
                    "apps"
                ],
                "summary": "List app access grants",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.AccessGrant"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Grant access to an agent to a team or organization member (organization owners can grant access to teams and organization members)",
                "tags": [
                    "apps"
                ],
                "summary": "Grant access to an agent to a team or organization member",
                "parameters": [
                    {
                        "description": "Request body with team or organization member ID and role",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateAccessGrantRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AccessGrant"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/api-actions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Runs an API action for an app",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Run an API action",
                "parameters": [
                    {
                        "description": "Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RunAPIActionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.RunAPIActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/avatar": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the app's avatar image",
                "produces": [
                    "image/*"
                ],
                "tags": [
                    "apps"
                ],
                "summary": "Get app avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar image data",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a base64 encoded image as the app's avatar",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apps"
                ],
                "summary": "Upload app avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Base64 encoded image data",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete the app's avatar image",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apps"
                ],
                "summary": "Delete app avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/daily-usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get app daily usage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apps"
                ],
                "summary": "Get app usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.AggregatedUsageMetric"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/duplicate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional new name for the app",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/apps/{id}/interactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List interactions with pagination and optional session filtering for a specific app",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "interactions"
                ],
                "summary": "List interactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by session ID",
                        "name": "session",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by interaction ID",
                        "name": "interaction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Query by like/dislike",
                        "name": "feedback",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PaginatedInteractions"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/llm-calls": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List user's LLM calls with pagination and optional session filtering for a specific app",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "llm_calls"
                ],
                "summary": "List LLM calls",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by session ID",
                        "name": "session",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by interaction ID",
                        "name": "interaction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PaginatedLLMCalls"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/memories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List memories for a specific app and user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memories"
                ],
                "summary": "List app memories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Memory"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/memories/{memory_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific memory for an app and user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memories"
                ],
                "summary": "Delete app memory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Memory ID",
                        "name": "memory_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/apps/{id}/step-info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List step info for a specific app and interaction ID, used to build the timeline of events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "step_info"
                ],
                "summary": "List step info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Interaction ID",
                        "name": "interactionId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.StepInfo"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/trigger-status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the status of a specific trigger type for an app",
                "tags": [
                    "apps"
                ],
                "summary": "Get app trigger status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Trigger type (e.g., slack)",
                        "name": "trigger_type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TriggerStatus"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/user-access": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the access rights the current user has for this app",
                "tags": [
                    "apps"
                ],
                "summary": "Get current user's access level for an app",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.UserAppAccessResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/apps/{id}/users-daily-usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get app users daily usage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apps"
                ],
                "summary": "Get app users daily usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.AggregatedUsageMetric"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/authenticated": {
            "get": {
                "description": "Check if the user is authenticated",
                "tags": [
                    "auth"
                ],
                "summary": "Authenticated",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AuthenticatedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/callback": {
            "get": {
                "description": "The callback receiver from the OIDC provider",
                "tags": [
                    "auth"
                ],
                "summary": "Callback from OIDC provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The code from the OIDC provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The state from the OIDC provider",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Login to the application",
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Request body with redirect URI.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Logout the user",
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "Refresh the access token",
                "tags": [
                    "auth"
                ],
                "summary": "Refresh the access token",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/auth/user": {
            "get": {
                "description": "Get the current user's information",
                "tags": [
                    "auth"
                ],
                "summary": "User information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.UserResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get config",
                "tags": [
                    "config"
                ],
                "summary": "Get config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ServerConfigForFrontend"
                        }
                    }
                }
            }
        },
        "/api/v1/context-menu": {
            "get": {
                "description": "contextMenuHandler",
                "tags": [
                    "ui"
                ],
                "summary": "contextMenuHandler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "app_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Query string",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ContextMenuResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dashboard": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DashboardData"
                        }
                    }
                }
            }
        },
        "/api/v1/dashboard/agent": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive dashboard data including agent sessions, work queue, and help requests",
                "tags": [
                    "dashboard"
                ],
                "summary": "Get enhanced dashboard data with agent management",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.AgentDashboardSummary"
                        }
                    }
                }
            }
        },
        "/api/v1/external-agents/{sessionID}/auto-join-lobby": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Automatically join a Wolf lobby after moonlight-web has connected. This endpoint should be called by the frontend after the moonlight-web iframe has loaded and the user has connected to Wolf UI.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExternalAgents"
                ],
                "summary": "Auto-join Wolf lobby after connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Helix Session ID",
                        "name": "sessionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/external-agents/{sessionID}/keepalive": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get keepalive session health status for an external agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ExternalAgents"
                ],
                "summary": "Get keepalive session status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "sessionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/filestore/config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the filestore configuration including user prefix and available folders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "filestore"
                ],
                "summary": "Get filestore configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/filestore.Config"
                        }
                    }
                }
            }
        },
        "/api/v1/filestore/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a file or folder from the filestore",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "filestore"
                ],
                "summary": "Delete filestore item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Path to the file or folder to delete",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Path of the deleted item",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/filestore/folder": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new folder in the filestore at the specified path",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "filestore"
                ],
                "summary": "Create filestore folder",
                "parameters": [
                    {
                        "description": "Request body with folder path",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/filestore.Item"
                        }
                    }
                }
            }
        },
        "/api/v1/filestore/get": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get information about a specific file or folder in the filestore",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "filestore"
                ],
                "summary": "Get filestore item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Path to the file or folder (e.g., 'documents/file.pdf', 'apps/app_id/folder')",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/filestore.Item"
                        }
                    }
                }
            }
        },
        "/api/v1/filestore/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List files and folders in the specified path. Supports both user and app-scoped paths",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "filestore"
                ],
                "summary": "List filestore items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Path to list (e.g., 'documents', 'apps/app_id/folder')",
                        "name": "path",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/filestore.Item"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/filestore/rename": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Rename a file or folder in the filestore. Cannot rename between different scopes (user/app)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "filestore"
                ],
                "summary": "Rename filestore item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current path of the file or folder",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New path for the file or folder",
                        "name": "new_path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/filestore.Item"
                        }
                    }
                }
            }
        },
        "/api/v1/filestore/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload one or more files to the specified path in the filestore. Supports multipart form data with 'files' field",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "filestore"
                ],
                "summary": "Upload files to filestore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Path where files should be uploaded (e.g., 'documents', 'apps/app_id/folder')",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Files to upload (multipart form data)",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upload success status",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "success": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/filestore/viewer/{path}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Serve files from the filestore with access control. Supports both user and app-scoped paths",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "filestore"
                ],
                "summary": "View filestore files",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File path to view (e.g., 'dev/users/user_id/file.pdf', 'dev/apps/app_id/file.pdf')",
                        "name": "path",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Set to 'true' to redirect .url files to their target URLs",
                        "name": "redirect_urls",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URL signature for public access",
                        "name": "signature",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File content",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        },
        "/api/v1/git/repositories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all git repositories, optionally filtered by owner and type",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git-repositories"
                ],
                "summary": "List git repositories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by owner ID",
                        "name": "owner_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by repository type",
                        "name": "repo_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.GitRepository"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new git repository on the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git-repositories"
                ],
                "summary": "Create git repository",
                "parameters": [
                    {
                        "description": "Repository creation request",
                        "name": "repository",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.GitRepositoryCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/services.GitRepository"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/git/repositories/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get information about a specific git repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git-repositories"
                ],
                "summary": "Get git repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.GitRepository"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/git/repositories/{id}/clone-command": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the git clone command for a repository with authentication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git-repositories"
                ],
                "summary": "Get clone command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Target directory for clone",
                        "name": "target_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.CloneCommandResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/helix-models": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all available Helix models, optionally filtering by type, name, or runtime.",
                "tags": [
                    "models"
                ],
                "summary": "List Helix models",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by model type (e.g., chat, embedding)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by model name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by model runtime (e.g., ollama, vllm)",
                        "name": "runtime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Model"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new Helix model configuration. Requires admin privileges.",
                "tags": [
                    "models"
                ],
                "summary": "Create a new Helix model",
                "parameters": [
                    {
                        "description": "Model configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Model"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Model"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/helix-models/memory-estimate": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Estimate memory requirements for a model on different GPU configurations",
                "tags": [
                    "models"
                ],
                "summary": "Estimate model memory requirements",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "model_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of GPUs (default: auto-detect)",
                        "name": "gpu_count",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Context length (default: model default)",
                        "name": "context_length",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Batch size (default: 512)",
                        "name": "batch_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of parallel sequences/concurrent requests (default: 2)",
                        "name": "num_parallel",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.MemoryEstimationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Model not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/helix-models/memory-estimates": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get memory estimates for multiple models with different GPU configurations",
                "tags": [
                    "models"
                ],
                "summary": "List memory estimates for multiple models",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of model IDs",
                        "name": "model_ids",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of GPUs (default: auto-detect)",
                        "name": "gpu_count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.MemoryEstimationResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/helix-models/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing Helix model configuration. Requires admin privileges.",
                "tags": [
                    "models"
                ],
                "summary": "Update an existing Helix model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated model configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Model"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Model"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Model not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a Helix model configuration. Requires admin privileges.",
                "tags": [
                    "models"
                ],
                "summary": "Delete a Helix model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/knowledge": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Knowledge"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/knowledge/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Knowledge"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete knowledge",
                "tags": [
                    "knowledge"
                ],
                "summary": "Delete knowledge",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Knowledge"
                        }
                    }
                }
            }
        },
        "/api/v1/knowledge/{id}/complete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Complete knowledge preparation and move to pending state for indexing",
                "tags": [
                    "knowledge"
                ],
                "summary": "Complete knowledge preparation",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Knowledge"
                        }
                    }
                }
            }
        },
        "/api/v1/knowledge/{id}/download": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download all files from a filestore-backed knowledge as a zip file",
                "produces": [
                    "application/zip"
                ],
                "tags": [
                    "knowledge"
                ],
                "summary": "Download knowledge files as zip",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        },
        "/api/v1/knowledge/{id}/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refresh knowledge",
                "tags": [
                    "knowledge"
                ],
                "summary": "Refresh knowledge",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Knowledge"
                        }
                    }
                }
            }
        },
        "/api/v1/knowledge/{id}/versions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List knowledge versions",
                "tags": [
                    "knowledge"
                ],
                "summary": "List knowledge versions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.KnowledgeVersion"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/license": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the license key for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get license key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.LicenseKeyRequest"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set the license key for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Set license key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.LicenseKeyRequest"
                        }
                    }
                }
            }
        },
        "/api/v1/llm_calls": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List LLM calls with pagination and optional session filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "llm_calls"
                ],
                "summary": "List LLM calls",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by session ID",
                        "name": "session",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by interaction ID",
                        "name": "interaction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PaginatedLLMCalls"
                        }
                    }
                }
            }
        },
        "/api/v1/logs/{slot_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve logs for a specific slot by proxying the request to the runner",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Get logs for a specific slot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slot ID",
                        "name": "slot_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of lines to return (default: 500)",
                        "name": "lines",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Return logs since this timestamp (RFC3339 format)",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by log level (ERROR, WARN, INFO, DEBUG)",
                        "name": "level",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/model-info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all dynamic model infos. Requires admin privileges.",
                "tags": [
                    "model-info"
                ],
                "summary": "List dynamic model infos",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by provider (e.g., helix, openai)",
                        "name": "provider",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by model name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.DynamicModelInfo"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new dynamic model info configuration. Requires admin privileges.",
                "tags": [
                    "model-info"
                ],
                "summary": "Create a new dynamic model info",
                "parameters": [
                    {
                        "description": "Dynamic model info configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DynamicModelInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.DynamicModelInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/model-info/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific dynamic model info by ID. Requires admin privileges.",
                "tags": [
                    "model-info"
                ],
                "summary": "Get a dynamic model info by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dynamic model info ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DynamicModelInfo"
                        }
                    },
                    "400": {
                        "description": "Missing ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Dynamic model info not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing dynamic model info configuration. Requires admin privileges.",
                "tags": [
                    "model-info"
                ],
                "summary": "Update an existing dynamic model info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dynamic model info ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated dynamic model info configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DynamicModelInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DynamicModelInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Dynamic model info not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a dynamic model info configuration. Requires admin privileges.",
                "tags": [
                    "model-info"
                ],
                "summary": "Delete a dynamic model info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dynamic model info ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/oauth/connections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List OAuth connections for the user.",
                "tags": [
                    "oauth"
                ],
                "summary": "List OAuth connections",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.OAuthConnection"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/oauth/connections/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific OAuth connection by ID. Users can only access their own connections unless they are admin.",
                "tags": [
                    "oauth"
                ],
                "summary": "Get an OAuth connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OAuthConnection"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an OAuth connection. Users can only delete their own connections unless they are admin.",
                "tags": [
                    "oauth"
                ],
                "summary": "Delete an OAuth connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/oauth/connections/{id}/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually refresh an OAuth connection",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "oauth"
                ],
                "summary": "Refresh an OAuth connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OAuthConnection"
                        }
                    }
                }
            }
        },
        "/api/v1/oauth/providers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List OAuth providers for the user.",
                "tags": [
                    "oauth"
                ],
                "summary": "List OAuth providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.OAuthProvider"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new OAuth provider for the user.",
                "tags": [
                    "oauth"
                ],
                "summary": "Create a new OAuth provider",
                "parameters": [
                    {
                        "description": "Request body with OAuth provider configuration.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.OAuthProvider"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OAuthProvider"
                        }
                    }
                }
            }
        },
        "/api/v1/oauth/providers/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing OAuth provider for the user.",
                "tags": [
                    "oauth"
                ],
                "summary": "Delete an OAuth provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/organizations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Organization"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new organization. Only admin users can create organizations.",
                "tags": [
                    "organizations"
                ],
                "summary": "Create a new organization",
                "parameters": [
                    {
                        "description": "Request body with organization configuration.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Organization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Organization"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Organization"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an organization, must be an owner of the organization",
                "tags": [
                    "organizations"
                ],
                "summary": "Update an organization",
                "parameters": [
                    {
                        "description": "Request body with organization configuration.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Organization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Organization"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/organizations/{id}/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List members of an organization",
                "tags": [
                    "organizations"
                ],
                "summary": "List organization members",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.OrganizationMembership"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a member to an organization",
                "tags": [
                    "organizations"
                ],
                "summary": "Add an organization member",
                "parameters": [
                    {
                        "description": "Request body with user email to add.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AddOrganizationMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OrganizationMembership"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{id}/members/{user_id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a member's role in an organization",
                "tags": [
                    "organizations"
                ],
                "summary": "Update an organization member",
                "parameters": [
                    {
                        "description": "Request body with role to update to.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateOrganizationMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OrganizationMembership"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a member from an organization",
                "tags": [
                    "organizations"
                ],
                "summary": "Remove an organization member",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/organizations/{id}/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all roles in an organization. Organization members can list roles.",
                "tags": [
                    "organizations"
                ],
                "summary": "List roles in an organization",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Role"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{id}/teams": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all teams in an organization. Organization members can list teams.",
                "tags": [
                    "organizations"
                ],
                "summary": "List teams in an organization",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Team"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new team in an organization. Only organization owners can create teams.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create a new team",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Team"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{id}/teams/{team_id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a team's details. Only organization owners can update teams.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update a team",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Team"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a team from an organization. Only organization owners can delete teams.",
                "tags": [
                    "organizations"
                ],
                "summary": "Delete a team",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/organizations/{id}/teams/{team_id}/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all members of a team.",
                "tags": [
                    "organizations"
                ],
                "summary": "List members of a team",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.TeamMembership"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new member to a team. Only organization owners can add members to teams.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Add a new member to a team",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AddTeamMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.TeamMembership"
                        }
                    }
                }
            }
        },
        "/api/v1/personal-dev-environments": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all personal development environments for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersonalDevEnvironments"
                ],
                "summary": "List personal development environments",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/server.PersonalDevEnvironmentResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new personal development environment with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersonalDevEnvironments"
                ],
                "summary": "Create a personal development environment",
                "parameters": [
                    {
                        "description": "Personal dev environment configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreatePersonalDevEnvironmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.PersonalDevEnvironmentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/personal-dev-environments/{environmentID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a personal development environment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersonalDevEnvironments"
                ],
                "summary": "Delete a personal development environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment ID",
                        "name": "environmentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/personal-dev-environments/{environmentID}/start": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Start a personal development environment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersonalDevEnvironments"
                ],
                "summary": "Start a personal development environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment ID",
                        "name": "environmentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.PersonalDevEnvironmentResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/personal-dev-environments/{environmentID}/stop": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Stop a personal development environment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PersonalDevEnvironments"
                ],
                "summary": "Stop a personal development environment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment ID",
                        "name": "environmentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.PersonalDevEnvironmentResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/provider-endpoints": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Include models",
                        "name": "with_models",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "org_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include all endpoints (system admin only)",
                        "name": "all",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ProviderEndpoint"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProviderEndpoint"
                        }
                    }
                }
            }
        },
        "/api/v1/provider-endpoints/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.UpdateProviderEndpoint"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/v1/provider-endpoints/{id}/daily-usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get provider daily usage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Get provider daily usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.AggregatedUsageMetric"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/provider-endpoints/{id}/users-daily-usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get provider daily usage per user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Get provider daily usage per user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UsersAggregatedUsageMetric"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/providers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Provider"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/question-sets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List question sets for the current user or organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question-sets"
                ],
                "summary": "List question sets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID or slug",
                        "name": "org_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.QuestionSet"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new question set",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question-sets"
                ],
                "summary": "Create a new question set",
                "parameters": [
                    {
                        "description": "Question set to create",
                        "name": "questionSet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.QuestionSet"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.QuestionSet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/question-sets/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a question set by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question-sets"
                ],
                "summary": "Get a question set by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question set ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.QuestionSet"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a question set",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question-sets"
                ],
                "summary": "Update a question set",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question set ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Question set to update",
                        "name": "questionSet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.QuestionSet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.QuestionSet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a question set",
                "tags": [
                    "question-sets"
                ],
                "summary": "Delete a question set",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question set ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/sample-projects": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all available sample projects that users can fork and use",
                "tags": [
                    "sample-projects"
                ],
                "summary": "List available sample projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/server.SampleProject"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sample-projects/fork": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fork a sample project to the user's GitHub account and create a new Helix project",
                "tags": [
                    "sample-projects"
                ],
                "summary": "Fork a sample project",
                "parameters": [
                    {
                        "description": "Fork request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ForkSampleProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.ForkSampleProjectResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sample-projects/simple": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get sample projects with natural language task prompts (Kiro-style)",
                "tags": [
                    "sample-projects"
                ],
                "summary": "List simple sample projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/server.SimpleSampleProject"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sample-projects/simple/fork": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fork a sample project and create tasks from natural language prompts",
                "tags": [
                    "sample-projects"
                ],
                "summary": "Fork a simple sample project",
                "parameters": [
                    {
                        "description": "Fork request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ForkSimpleProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.ForkSimpleProjectResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sample-projects/{projectId}/archive": {
            "get": {
                "description": "Get all files for a sample project as a flat map (for container initialization)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sample-projects"
                ],
                "summary": "Get sample project code as archive",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/sample-projects/{projectId}/code": {
            "get": {
                "description": "Get the starter code and file structure for a sample project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sample-projects"
                ],
                "summary": "Get sample project starter code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.SampleProjectCode"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/sample-projects/{project_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific sample project by ID",
                "tags": [
                    "sample-projects"
                ],
                "summary": "Get a specific sample project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sample project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SampleProject"
                        }
                    }
                }
            }
        },
        "/api/v1/samples/initialize": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create multiple sample repositories for development/testing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "samples"
                ],
                "summary": "Initialize sample repositories",
                "parameters": [
                    {
                        "description": "Initialize samples request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.InitializeSampleRepositoriesRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/server.InitializeSampleRepositoriesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/samples/repositories": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a sample/demo git repository from available templates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "samples"
                ],
                "summary": "Create sample repository",
                "parameters": [
                    {
                        "description": "Sample repository creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateSampleRepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/services.GitRepository"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/scheduler/heartbeats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the health status of all scheduler goroutines",
                "tags": [
                    "dashboard"
                ],
                "summary": "Get scheduler goroutine heartbeat status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search knowledges for a given app and prompt",
                "tags": [
                    "knowledge"
                ],
                "summary": "Search knowledges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "App ID",
                        "name": "app_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Knowledge ID",
                        "name": "knowledge_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search prompt",
                        "name": "prompt",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.KnowledgeSearchResult"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/secrets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List secrets for the user.",
                "tags": [
                    "secrets"
                ],
                "summary": "List secrets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Secret"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new secret for the user.",
                "tags": [
                    "secrets"
                ],
                "summary": "Create new secret",
                "parameters": [
                    {
                        "description": "Request body with secret configuration.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Secret"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Secret"
                        }
                    }
                }
            }
        },
        "/api/v1/secrets/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing secret for the user.",
                "tags": [
                    "secrets"
                ],
                "summary": "Update an existing secret",
                "parameters": [
                    {
                        "description": "Request body with updated secret configuration.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Secret"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Secret ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Secret"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a secret for the user.",
                "tags": [
                    "secrets"
                ],
                "summary": "Delete a secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Secret ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Secret"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List sessions",
                "tags": [
                    "sessions"
                ],
                "summary": "List sessions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Organization slug or ID",
                        "name": "org_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search sessions by name",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PaginatedSessionsList"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/chat": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "description": "Request body with the message and model to start chat completion.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SessionChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.OpenAIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a session by ID",
                "tags": [
                    "sessions"
                ],
                "summary": "Get a session by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Session"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a session by ID",
                "tags": [
                    "sessions"
                ],
                "summary": "Update a session by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Session to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Session"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Session"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a session by ID",
                "tags": [
                    "sessions"
                ],
                "summary": "Delete a session by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Session"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/interactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List interactions for a session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "interactions"
                ],
                "summary": "List interactions for a session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Interaction"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/interactions/{interaction_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an interaction by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "interactions"
                ],
                "summary": "Get an interaction by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Interaction ID",
                        "name": "interaction_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Interaction"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/interactions/{interaction_id}/feedback": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Provide feedback for an interaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "interactions"
                ],
                "summary": "Provide feedback for an interaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Interaction ID",
                        "name": "interaction_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Feedback",
                        "name": "feedback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.FeedbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Interaction"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/rdp-connection": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Wolf streaming connection details for accessing a session (replaces RDP)",
                "tags": [
                    "sessions"
                ],
                "summary": "Get Wolf connection info for a session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/step-info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.StepInfo"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/wolf-app-state": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the current Wolf app state for an external agent session (absent/running/resumable)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Get Wolf app state for a session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SessionWolfAppStateResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/zed-config": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get Helix-managed Zed MCP configuration for a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zed"
                ],
                "summary": "Get Zed configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ZedConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/zed-config/user": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update user's custom Zed settings overrides",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zed"
                ],
                "summary": "Update Zed user settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User settings overrides",
                        "name": "overrides",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/sessions/{id}/zed-settings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get merged Helix + user Zed settings for a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zed"
                ],
                "summary": "Get merged Zed settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/skills": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all available YAML-based skills",
                "tags": [
                    "skills"
                ],
                "summary": "List YAML skills",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by OAuth provider",
                        "name": "provider",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SkillsListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/skills/reload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reload all YAML skills from the filesystem",
                "tags": [
                    "skills"
                ],
                "summary": "Reload skills",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/skills/validate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validate MCP skill configuration",
                "tags": [
                    "skills"
                ],
                "summary": "Validate MCP skill configuration",
                "parameters": [
                    {
                        "description": "MCP skill configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AssistantMCP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ToolMCPClientConfig"
                        }
                    }
                }
            }
        },
        "/api/v1/skills/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific YAML skill",
                "tags": [
                    "skills"
                ],
                "summary": "Get a skill by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Skill ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SkillDefinition"
                        }
                    }
                }
            }
        },
        "/api/v1/slots/{slot_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a slot from the scheduler's desired state, allowing reconciliation to clean it up from the runner",
                "tags": [
                    "dashboard"
                ],
                "summary": "Delete a slot from scheduler state",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slot ID",
                        "name": "slot_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks": {
            "get": {
                "description": "List spec-driven tasks with optional filtering by project, status, or user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "List spec-driven tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.SpecTask"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/from-demo": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new SpecTask with a demo repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpecTasks"
                ],
                "summary": "Create SpecTask from demo repo",
                "parameters": [
                    {
                        "description": "Demo task request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateSpecTaskFromDemoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/from-prompt": {
            "post": {
                "description": "Create a new task from a simple description and start spec generation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Create spec-driven task from simple prompt",
                "parameters": [
                    {
                        "description": "Task creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{id}/design-docs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the design documents from helix-design-docs worktree",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpecTasks"
                ],
                "summary": "Get design docs for SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.DesignDocsResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{id}/design-docs/share": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a token-based shareable link for viewing design documents on any device",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpecTasks"
                ],
                "summary": "Generate shareable design docs link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.DesignDocsShareLinkResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{id}/external-agent/start": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Start or resume the external agent for a SpecTask (allocates GPU)",
                "tags": [
                    "SpecTasks"
                ],
                "summary": "Start SpecTask external agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{id}/external-agent/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the current status and info for a SpecTask's external agent",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SpecTasks"
                ],
                "summary": "Get SpecTask external agent status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SpecTaskExternalAgentStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{id}/external-agent/stop": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Manually stop the external agent for a SpecTask (frees GPU)",
                "tags": [
                    "SpecTasks"
                ],
                "summary": "Stop SpecTask external agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}": {
            "get": {
                "description": "Get detailed information about a specific spec-driven task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get spec-driven task details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTask"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update SpecTask status, priority, or other fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Update SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/approve-specs": {
            "post": {
                "description": "Human approval/rejection of specs generated by AI agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Approve or reject generated specifications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Approval response",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SpecApprovalResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/approve-with-handoff": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Combined endpoint that approves specifications and immediately executes document handoff workflow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Approve specs and execute document handoff",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Approval and handoff configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ApprovalWithHandoffRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.CombinedApprovalHandoffResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/commit-progress": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Commit a progress update to git with current implementation status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Commit implementation progress update",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Progress update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.HandoffResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/coordination-log": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the coordination log showing inter-session communication for a SpecTask",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get coordination log for SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Limit number of events",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.CoordinationLogResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/document-status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current status of document handoff and git integration for a SpecTask",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get document handoff status for SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.DocumentHandoffStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/documents/{document}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the content of a specific spec document (requirements.md, design.md, or tasks.md)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get specific spec document content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "requirements",
                            "design",
                            "tasks",
                            "metadata"
                        ],
                        "type": "string",
                        "description": "Document name",
                        "name": "document",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SpecDocumentContentResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/download-documents": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download the generated spec documents as a zip file or individual files",
                "produces": [
                    "application/zip"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Download generated spec documents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "zip",
                            "individual"
                        ],
                        "type": "string",
                        "default": "zip",
                        "description": "Download format",
                        "name": "format",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/execute-handoff": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Execute the complete document handoff when specs are approved, including git commit and implementation start",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Execute complete document handoff workflow",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Handoff configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.DocumentHandoffConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.HandoffResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/generate-documents": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate Kiro-style spec documents (requirements.md, design.md, tasks.md) and commit to git repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Generate and commit spec documents to git",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Document generation configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.SpecDocumentConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.SpecDocumentResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/implementation-sessions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create multiple work sessions from an approved SpecTask implementation plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Create implementation sessions for a SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Implementation sessions configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskImplementationSessionsCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskMultiSessionOverviewResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/implementation-tasks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all parsed implementation tasks from a SpecTask's implementation plan",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "List implementation tasks for a SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskImplementationTaskListResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/multi-session-overview": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive overview of all work sessions and progress for a SpecTask",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get multi-session overview for a SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskMultiSessionOverviewResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/progress": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed progress information including phase progress and implementation task status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get detailed progress for a SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskProgressResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/specs": {
            "get": {
                "description": "Get the generated specifications for human review",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get task specifications for review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.TaskSpecsResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/work-sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all work sessions associated with a specific SpecTask",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "List work sessions for a SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "planning",
                            "implementation",
                            "validation"
                        ],
                        "type": "string",
                        "description": "Filter by phase",
                        "name": "phase",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskWorkSessionListResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/zed-instance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current status and information about a Zed instance associated with a SpecTask",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zed-integration"
                ],
                "summary": "Get Zed instance status for a SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ZedInstanceStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually shutdown a Zed instance and all its threads for a SpecTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zed-integration"
                ],
                "summary": "Shutdown Zed instance for a SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/spec-tasks/{taskId}/zed-threads": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all Zed threads associated with a SpecTask",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zed-integration"
                ],
                "summary": "List Zed threads for a SpecTask",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SpecTask ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskZedThreadListResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/specs/repositories": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a git repository specifically for a SpecTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "specs"
                ],
                "summary": "Create SpecTask repository",
                "parameters": [
                    {
                        "description": "SpecTask repository creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateSpecTaskRepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/services.GitRepository"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/specs/sample-types": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of available sample repository types and templates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "specs"
                ],
                "summary": "Get sample repository types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SampleTypesResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/ssh-keys": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all SSH keys for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSHKeys"
                ],
                "summary": "List SSH keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.SSHKeyResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new SSH key for git operations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSHKeys"
                ],
                "summary": "Create SSH key",
                "parameters": [
                    {
                        "description": "SSH key details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SSHKeyCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SSHKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/ssh-keys/generate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a new SSH key pair",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSHKeys"
                ],
                "summary": "Generate SSH key",
                "parameters": [
                    {
                        "description": "SSH key generation parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SSHKeyGenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SSHKeyGenerateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/ssh-keys/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an SSH key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSHKeys"
                ],
                "summary": "Delete SSH key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SSH key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SSHKeyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/subscription/manage": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manage a subscription",
                "tags": [
                    "wallets"
                ],
                "summary": "Manage a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "org_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription session URL",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/subscription/new": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a subscription",
                "tags": [
                    "wallets"
                ],
                "summary": "Create a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "org_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription session URL",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/system/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get global system settings. Requires admin privileges.",
                "tags": [
                    "system"
                ],
                "summary": "Get system settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SystemSettingsResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update global system settings. Requires admin privileges.",
                "tags": [
                    "system"
                ],
                "summary": "Update system settings",
                "parameters": [
                    {
                        "description": "System settings update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SystemSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SystemSettingsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/top-ups/new": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a top up with specified amount",
                "tags": [
                    "wallets"
                ],
                "summary": "Create a top up",
                "parameters": [
                    {
                        "description": "Request body with amount",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateTopUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Top up session URL",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/triggers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all triggers configurations for either user or the org or user within an org",
                "tags": [
                    "apps"
                ],
                "summary": "List all triggers configurations for either user or the org or user within an org",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "org_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Trigger type, defaults to 'cron'",
                        "name": "trigger_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.TriggerConfiguration"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create triggers for the app. Used to create standalone trigger configurations such as cron tasks for agents that could be owned by a different user than the owner of the app",
                "tags": [
                    "apps"
                ],
                "summary": "Create app triggers",
                "parameters": [
                    {
                        "description": "Trigger configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.TriggerConfiguration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TriggerConfiguration"
                        }
                    }
                }
            }
        },
        "/api/v1/triggers/{trigger_id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update triggers for the app, for example to change the cron schedule or enable/disable the trigger",
                "tags": [
                    "apps"
                ],
                "summary": "Update app triggers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "trigger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Trigger configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.TriggerConfiguration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TriggerConfiguration"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete triggers for the app",
                "tags": [
                    "apps"
                ],
                "summary": "Delete app triggers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "trigger_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TriggerConfiguration"
                        }
                    }
                }
            }
        },
        "/api/v1/triggers/{trigger_id}/execute": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update triggers for the app, for example to change the cron schedule or enable/disable the trigger",
                "tags": [
                    "apps"
                ],
                "summary": "Execute app trigger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "trigger_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TriggerExecuteResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/triggers/{trigger_id}/executions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List executions for the trigger",
                "tags": [
                    "apps"
                ],
                "summary": "List trigger executions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trigger ID",
                        "name": "trigger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.TriggerExecution"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get daily usage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usage"
                ],
                "summary": "Get daily usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "org_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.AggregatedUsageMetric"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List users with pagination support and optional filtering by email domain or username. Supports ILIKE matching for email domains (e.g., \"hotmail.com\" will find all users with @hotmail.com emails) and partial username matching.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users with pagination and filtering",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of users per page (max: 200, default: 50)",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email domain (e.g., 'hotmail.com') or exact email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by username (partial match)",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by admin status",
                        "name": "admin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by token type",
                        "name": "token_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PaginatedUsersList"
                        }
                    }
                }
            }
        },
        "/api/v1/users/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search users by email, name, or username",
                "tags": [
                    "users"
                ],
                "summary": "Search users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.UserSearchResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/token-usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user's monthly token usage and limits",
                "tags": [
                    "users"
                ],
                "summary": "Get user token usage",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.UserTokenUsageResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user by ID",
                "tags": [
                    "users"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    }
                }
            }
        },
        "/api/v1/wallet": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a wallet",
                "tags": [
                    "wallets"
                ],
                "summary": "Get a wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "org_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Wallet"
                        }
                    }
                }
            }
        },
        "/api/v1/wolf/ui-app-id": {
            "get": {
                "description": "Get the Wolf UI app ID for lobbies mode streaming",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wolf"
                ],
                "summary": "Get Wolf UI app ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/system.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/work-sessions/{sessionId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive details about a specific work session including related entities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get detailed information about a work session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskWorkSessionDetailResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/work-sessions/{sessionId}/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the session history log for a work session from git repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Get session history log from git",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "conversation",
                            "code_change",
                            "decision",
                            "coordination"
                        ],
                        "type": "string",
                        "description": "Filter by activity type",
                        "name": "activity_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Limit number of entries",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SessionHistoryResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/work-sessions/{sessionId}/record-history": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Record session activity (conversation, code changes, decisions) to git repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Record session activity to git",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Session activity record",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.SessionHistoryRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/work-sessions/{sessionId}/spawn": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new work session that is spawned from an existing active work session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Spawn a new work session from an existing one",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Parent Work Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Spawn configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskWorkSessionSpawnRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskWorkSessionDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/work-sessions/{sessionId}/status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the status of a work session and handle state transitions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Update work session status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskWorkSessionUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskWorkSession"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/work-sessions/{sessionId}/zed-thread": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the status of a Zed thread associated with a work session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Update Zed thread status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Zed thread status update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskZedThreadUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskZedThread"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Manually create a Zed thread for a specific work session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zed-integration"
                ],
                "summary": "Create Zed thread for work session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Work Session ID",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Thread creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskZedThreadCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskZedThread"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/zed-threads/create-session": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new Helix work session when a Zed thread is created (reverse flow)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spec-driven-tasks"
                ],
                "summary": "Create Helix session from Zed thread",
                "parameters": [
                    {
                        "description": "Zed thread creation context",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ZedThreadCreationContext"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/services.ZedSessionCreationResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/zed/events": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Process events from Zed instances including status changes, thread updates, and coordination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zed-integration"
                ],
                "summary": "Handle Zed instance events",
                "parameters": [
                    {
                        "description": "Zed instance event",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ZedInstanceEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/zed/instances/{instanceId}/heartbeat": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Process heartbeat signals from Zed instances to maintain connection status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zed-integration"
                ],
                "summary": "Handle Zed connection heartbeat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Zed Instance ID",
                        "name": "instanceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Heartbeat data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/zed/instances/{instanceId}/threads/{threadId}/events": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Process thread-specific events from Zed instances",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zed-integration"
                ],
                "summary": "Handle Zed thread-specific events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Zed Instance ID",
                        "name": "instanceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Zed Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Thread event data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/api/v1/zed/threads/{threadId}/activity": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update activity timestamp and status for a Zed thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zed-integration"
                ],
                "summary": "Update Zed thread activity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Zed Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Activity data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SpecTaskZedThread"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.APIError"
                        }
                    }
                }
            }
        },
        "/v1/chat/completions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a model response for the given chat conversation.",
                "tags": [
                    "chat"
                ],
                "summary": "Stream responses for chat",
                "parameters": [
                    {
                        "description": "Request body with options for conversational AI.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openai.ChatCompletionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openai.ChatCompletionResponse"
                        }
                    }
                }
            }
        },
        "/v1/embeddings": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates an embedding vector representing the input text. Supports both standard OpenAI embedding format and Chat Embeddings API format with messages.",
                "tags": [
                    "embeddings"
                ],
                "summary": "Creates an embedding vector representing the input text",
                "parameters": [
                    {
                        "description": "Request body with options for embeddings. Can use either 'input' field (standard) or 'messages' field (Chat Embeddings API).",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.FlexibleEmbeddingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.FlexibleEmbeddingResponse"
                        }
                    }
                }
            }
        },
        "/v1/models": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider",
                        "name": "provider",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.OpenAIModelsList"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.MemoryEstimationResponse": {
            "type": "object",
            "properties": {
                "cached": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                },
                "estimate": {
                    "$ref": "#/definitions/memory.MemoryEstimate"
                },
                "model_id": {
                    "type": "string"
                }
            }
        },
        "filestore.Config": {
            "type": "object",
            "properties": {
                "folders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/filestore.Folder"
                    }
                },
                "user_prefix": {
                    "description": "this will be the virtual path from the storage instance\nto the users root directory\nwe use this to strip the full paths in the frontend so we can deal with only relative paths",
                    "type": "string"
                }
            }
        },
        "filestore.Folder": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "readonly": {
                    "type": "boolean"
                }
            }
        },
        "filestore.Item": {
            "type": "object",
            "properties": {
                "created": {
                    "description": "timestamp",
                    "type": "integer"
                },
                "directory": {
                    "description": "is this thing a folder or not?",
                    "type": "boolean"
                },
                "name": {
                    "description": "the filename",
                    "type": "string"
                },
                "path": {
                    "description": "the relative path to the file from the base path of the storage instance",
                    "type": "string"
                },
                "size": {
                    "description": "bytes",
                    "type": "integer"
                },
                "url": {
                    "description": "the URL that can be used to load the object directly",
                    "type": "string"
                }
            }
        },
        "github_com_helixml_helix_api_pkg_types.Config": {
            "type": "object",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Rule"
                    }
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "mcp.Meta": {
            "type": "object",
            "properties": {
                "additionalFields": {
                    "description": "AdditionalFields are any fields present in the Meta that are not\notherwise defined in the protocol.",
                    "type": "object",
                    "additionalProperties": {}
                },
                "progressToken": {
                    "description": "If specified, the caller is requesting out-of-band progress\nnotifications for this request (as represented by\nnotifications/progress). The value of this parameter is an\nopaque token that will be attached to any subsequent\nnotifications. The receiver is not obligated to provide these\nnotifications."
                }
            }
        },
        "mcp.Tool": {
            "type": "object",
            "properties": {
                "_meta": {
                    "description": "Meta is a metadata object that is reserved by MCP for storing additional information.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/mcp.Meta"
                        }
                    ]
                },
                "annotations": {
                    "description": "Optional properties describing tool behavior",
                    "allOf": [
                        {
                            "$ref": "#/definitions/mcp.ToolAnnotation"
                        }
                    ]
                },
                "description": {
                    "description": "A human-readable description of the tool.",
                    "type": "string"
                },
                "inputSchema": {
                    "description": "A JSON Schema object defining the expected parameters for the tool.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/mcp.ToolInputSchema"
                        }
                    ]
                },
                "name": {
                    "description": "The name of the tool.",
                    "type": "string"
                }
            }
        },
        "mcp.ToolAnnotation": {
            "type": "object",
            "properties": {
                "destructiveHint": {
                    "description": "If true, the tool may perform destructive updates",
                    "type": "boolean"
                },
                "idempotentHint": {
                    "description": "If true, repeated calls with same args have no additional effect",
                    "type": "boolean"
                },
                "openWorldHint": {
                    "description": "If true, tool interacts with external entities",
                    "type": "boolean"
                },
                "readOnlyHint": {
                    "description": "If true, the tool does not modify its environment",
                    "type": "boolean"
                },
                "title": {
                    "description": "Human-readable title for the tool",
                    "type": "string"
                }
            }
        },
        "mcp.ToolInputSchema": {
            "type": "object",
            "properties": {
                "$defs": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "required": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "memory.EstimateOptions": {
            "type": "object",
            "properties": {
                "flash_attention": {
                    "description": "Advanced options",
                    "type": "boolean"
                },
                "kv_cache_type": {
                    "description": "\"f16\", \"q8_0\", \"q4_0\"",
                    "type": "string"
                },
                "num_batch": {
                    "description": "Batch size",
                    "type": "integer"
                },
                "num_ctx": {
                    "description": "Context size",
                    "type": "integer"
                },
                "num_gpu": {
                    "description": "⚠️  CRITICAL CONFUSION WARNING ⚠️\nNumGPU is NOT the number of GPUs in your hardware configuration!\nNumGPU is the number of MODEL LAYERS to offload to GPU (-1 for auto-detect all that fit)\n\nExamples:\n- NumGPU = -1: Auto-detect max layers that fit (RECOMMENDED - gives full model memory)\n- NumGPU = 1:  Only offload 1 layer to GPU (gives tiny memory estimate)\n- NumGPU = 0:  CPU only (no GPU layers)\n\nTo estimate for different GPU hardware configs (1 GPU vs 4 GPUs),\nyou pass different GPU configuration arrays to the estimation function,\nNOT different NumGPU values!",
                    "type": "integer"
                },
                "num_parallel": {
                    "description": "Number of parallel sequences",
                    "type": "integer"
                }
            }
        },
        "memory.GPUInfo": {
            "type": "object",
            "properties": {
                "compute": {
                    "type": "string"
                },
                "dependency_path": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "driver_major": {
                    "type": "integer"
                },
                "driver_minor": {
                    "type": "integer"
                },
                "env_workarounds": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "free_memory": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "library": {
                    "description": "\"cuda\", \"rocm\", \"metal\", \"cpu\"",
                    "type": "string"
                },
                "minimum_memory": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "total_memory": {
                    "type": "integer"
                },
                "unreliable_free_memory": {
                    "type": "boolean"
                },
                "variant": {
                    "description": "Additional fields for compatibility with Ollama's estimation",
                    "type": "string"
                }
            }
        },
        "memory.MemoryEstimate": {
            "type": "object",
            "properties": {
                "architecture": {
                    "description": "Metadata",
                    "type": "string"
                },
                "estimated_at": {
                    "type": "string"
                },
                "fully_loaded": {
                    "description": "Whether all layers fit on GPU",
                    "type": "boolean"
                },
                "gpu_sizes": {
                    "description": "Memory allocation per GPU",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "gpus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/memory.GPUInfo"
                    }
                },
                "graph": {
                    "description": "Graph memory requirement",
                    "type": "integer"
                },
                "graph_mem": {
                    "description": "Graph computation memory",
                    "type": "integer"
                },
                "kv_cache": {
                    "description": "Breakdown for analysis",
                    "type": "integer"
                },
                "layers": {
                    "description": "Core results",
                    "type": "integer"
                },
                "model_path": {
                    "type": "string"
                },
                "options": {
                    "description": "Configuration used for estimation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/memory.EstimateOptions"
                        }
                    ]
                },
                "projectors": {
                    "description": "Projector weights (for multimodal)",
                    "type": "integer"
                },
                "requires_fallback": {
                    "description": "Whether CPU fallback is needed",
                    "type": "boolean"
                },
                "tensor_split": {
                    "description": "Layers per GPU for tensor parallel",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "total_size": {
                    "description": "Total memory requirement",
                    "type": "integer"
                },
                "vram_size": {
                    "description": "Total VRAM usage",
                    "type": "integer"
                },
                "weights": {
                    "description": "Model weights memory",
                    "type": "integer"
                }
            }
        },
        "openai.ChatCompletionChoice": {
            "type": "object",
            "properties": {
                "content_filter_results": {
                    "$ref": "#/definitions/openai.ContentFilterResults"
                },
                "finish_reason": {
                    "description": "FinishReason\nstop: API returned complete message,\nor a message terminated by one of the stop sequences provided via the stop parameter\nlength: Incomplete model output due to max_tokens parameter or token limit\nfunction_call: The model decided to call a function\ncontent_filter: Omitted content due to a flag from our content filters\nnull: API response still in progress or incomplete",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openai.FinishReason"
                        }
                    ]
                },
                "index": {
                    "type": "integer"
                },
                "logprobs": {
                    "$ref": "#/definitions/openai.LogProbs"
                },
                "message": {
                    "$ref": "#/definitions/openai.ChatCompletionMessage"
                }
            }
        },
        "openai.ChatCompletionMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "function_call": {
                    "$ref": "#/definitions/openai.FunctionCall"
                },
                "multiContent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.ChatMessagePart"
                    }
                },
                "name": {
                    "description": "This property isn't in the official documentation, but it's in\nthe documentation for the official library for python:\n- https://github.com/openai/openai-python/blob/main/chatml.md\n- https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb",
                    "type": "string"
                },
                "refusal": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "tool_call_id": {
                    "description": "For Role=tool prompts this should be set to the ID given in the assistant's prior request to call a tool.",
                    "type": "string"
                },
                "tool_calls": {
                    "description": "For Role=assistant prompts this may be set to the tool calls generated by the model, such as function calls.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.ToolCall"
                    }
                }
            }
        },
        "openai.ChatCompletionRequest": {
            "type": "object",
            "properties": {
                "frequency_penalty": {
                    "type": "number"
                },
                "function_call": {
                    "description": "Deprecated: use ToolChoice instead."
                },
                "functions": {
                    "description": "Deprecated: use Tools instead.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.FunctionDefinition"
                    }
                },
                "logit_bias": {
                    "description": "LogitBias is must be a token id string (specified by their token ID in the tokenizer), not a word string.\nincorrect: `\"logit_bias\":{\"You\": 6}`, correct: `\"logit_bias\":{\"1639\": 6}`\nrefs: https://platform.openai.com/docs/api-reference/chat/create#chat/create-logit_bias",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "logprobs": {
                    "description": "LogProbs indicates whether to return log probabilities of the output tokens or not.\nIf true, returns the log probabilities of each output token returned in the content of message.\nThis option is currently not available on the gpt-4-vision-preview model.",
                    "type": "boolean"
                },
                "max_completion_tokens": {
                    "description": "MaxCompletionTokens An upper bound for the number of tokens that can be generated for a completion,\nincluding visible output tokens and reasoning tokens https://platform.openai.com/docs/guides/reasoning",
                    "type": "integer"
                },
                "max_tokens": {
                    "description": "MaxTokens The maximum number of tokens that can be generated in the chat completion.\nThis value can be used to control costs for text generated via API.\nThis value is now deprecated in favor of max_completion_tokens, and is not compatible with o1 series models.\nrefs: https://platform.openai.com/docs/api-reference/chat/create#chat-create-max_tokens",
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.ChatCompletionMessage"
                    }
                },
                "metadata": {
                    "description": "Metadata to store with the completion.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "model": {
                    "type": "string"
                },
                "n": {
                    "type": "integer"
                },
                "parallel_tool_calls": {
                    "description": "Disable the default behavior of parallel tool calls by setting it: false."
                },
                "presence_penalty": {
                    "type": "number"
                },
                "reasoning_effort": {
                    "description": "Controls effort on reasoning for reasoning models. It can be set to \"low\", \"medium\", or \"high\".",
                    "type": "string"
                },
                "response_format": {
                    "$ref": "#/definitions/openai.ChatCompletionResponseFormat"
                },
                "seed": {
                    "type": "integer"
                },
                "stop": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "store": {
                    "description": "Store can be set to true to store the output of this completion request for use in distillations and evals.\nhttps://platform.openai.com/docs/api-reference/chat/create#chat-create-store",
                    "type": "boolean"
                },
                "stream": {
                    "type": "boolean"
                },
                "stream_options": {
                    "description": "Options for streaming response. Only set this when you set stream: true.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openai.StreamOptions"
                        }
                    ]
                },
                "temperature": {
                    "type": "number"
                },
                "tool_choice": {
                    "description": "This can be either a string or an ToolChoice object."
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.Tool"
                    }
                },
                "top_logprobs": {
                    "description": "TopLogProbs is an integer between 0 and 5 specifying the number of most likely tokens to return at each\ntoken position, each with an associated log probability.\nlogprobs must be set to true if this parameter is used.",
                    "type": "integer"
                },
                "top_p": {
                    "type": "number"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "openai.ChatCompletionResponse": {
            "type": "object",
            "properties": {
                "choices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.ChatCompletionChoice"
                    }
                },
                "created": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "prompt_filter_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.PromptFilterResult"
                    }
                },
                "system_fingerprint": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/openai.Usage"
                }
            }
        },
        "openai.ChatCompletionResponseFormat": {
            "type": "object",
            "properties": {
                "json_schema": {
                    "$ref": "#/definitions/openai.ChatCompletionResponseFormatJSONSchema"
                },
                "type": {
                    "$ref": "#/definitions/openai.ChatCompletionResponseFormatType"
                }
            }
        },
        "openai.ChatCompletionResponseFormatJSONSchema": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema": {},
                "strict": {
                    "type": "boolean"
                }
            }
        },
        "openai.ChatCompletionResponseFormatType": {
            "type": "string",
            "enum": [
                "json_object",
                "json_schema",
                "text"
            ],
            "x-enum-varnames": [
                "ChatCompletionResponseFormatTypeJSONObject",
                "ChatCompletionResponseFormatTypeJSONSchema",
                "ChatCompletionResponseFormatTypeText"
            ]
        },
        "openai.ChatMessageImageURL": {
            "type": "object",
            "properties": {
                "detail": {
                    "$ref": "#/definitions/openai.ImageURLDetail"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "openai.ChatMessagePart": {
            "type": "object",
            "properties": {
                "image_url": {
                    "$ref": "#/definitions/openai.ChatMessageImageURL"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/openai.ChatMessagePartType"
                }
            }
        },
        "openai.ChatMessagePartType": {
            "type": "string",
            "enum": [
                "text",
                "image_url"
            ],
            "x-enum-varnames": [
                "ChatMessagePartTypeText",
                "ChatMessagePartTypeImageURL"
            ]
        },
        "openai.CompletionTokensDetails": {
            "type": "object",
            "properties": {
                "audio_tokens": {
                    "type": "integer"
                },
                "reasoning_tokens": {
                    "type": "integer"
                }
            }
        },
        "openai.ContentFilterResults": {
            "type": "object",
            "properties": {
                "hate": {
                    "$ref": "#/definitions/openai.Hate"
                },
                "jailbreak": {
                    "$ref": "#/definitions/openai.JailBreak"
                },
                "profanity": {
                    "$ref": "#/definitions/openai.Profanity"
                },
                "self_harm": {
                    "$ref": "#/definitions/openai.SelfHarm"
                },
                "sexual": {
                    "$ref": "#/definitions/openai.Sexual"
                },
                "violence": {
                    "$ref": "#/definitions/openai.Violence"
                }
            }
        },
        "openai.FinishReason": {
            "type": "string",
            "enum": [
                "stop",
                "length",
                "function_call",
                "tool_calls",
                "content_filter",
                "null"
            ],
            "x-enum-varnames": [
                "FinishReasonStop",
                "FinishReasonLength",
                "FinishReasonFunctionCall",
                "FinishReasonToolCalls",
                "FinishReasonContentFilter",
                "FinishReasonNull"
            ]
        },
        "openai.FunctionCall": {
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "call function with arguments in JSON format",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "openai.FunctionDefinition": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "description": "Parameters is an object describing the function.\nYou can pass json.RawMessage to describe the schema,\nor you can pass in a struct which serializes to the proper JSON schema.\nThe jsonschema package is provided for convenience, but you should\nconsider another specialized library if you require more complex schemas."
                },
                "strict": {
                    "type": "boolean"
                }
            }
        },
        "openai.Hate": {
            "type": "object",
            "properties": {
                "filtered": {
                    "type": "boolean"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "openai.ImageURLDetail": {
            "type": "string",
            "enum": [
                "high",
                "low",
                "auto"
            ],
            "x-enum-varnames": [
                "ImageURLDetailHigh",
                "ImageURLDetailLow",
                "ImageURLDetailAuto"
            ]
        },
        "openai.JailBreak": {
            "type": "object",
            "properties": {
                "detected": {
                    "type": "boolean"
                },
                "filtered": {
                    "type": "boolean"
                }
            }
        },
        "openai.LogProb": {
            "type": "object",
            "properties": {
                "bytes": {
                    "description": "Omitting the field if it is null",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "logprob": {
                    "type": "number"
                },
                "token": {
                    "type": "string"
                },
                "top_logprobs": {
                    "description": "TopLogProbs is a list of the most likely tokens and their log probability, at this token position.\nIn rare cases, there may be fewer than the number of requested top_logprobs returned.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.TopLogProbs"
                    }
                }
            }
        },
        "openai.LogProbs": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content is a list of message content tokens with log probability information.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.LogProb"
                    }
                }
            }
        },
        "openai.Profanity": {
            "type": "object",
            "properties": {
                "detected": {
                    "type": "boolean"
                },
                "filtered": {
                    "type": "boolean"
                }
            }
        },
        "openai.PromptFilterResult": {
            "type": "object",
            "properties": {
                "content_filter_results": {
                    "$ref": "#/definitions/openai.ContentFilterResults"
                },
                "index": {
                    "type": "integer"
                }
            }
        },
        "openai.PromptTokensDetails": {
            "type": "object",
            "properties": {
                "audio_tokens": {
                    "type": "integer"
                },
                "cached_tokens": {
                    "type": "integer"
                }
            }
        },
        "openai.SelfHarm": {
            "type": "object",
            "properties": {
                "filtered": {
                    "type": "boolean"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "openai.Sexual": {
            "type": "object",
            "properties": {
                "filtered": {
                    "type": "boolean"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "openai.StreamOptions": {
            "type": "object",
            "properties": {
                "include_usage": {
                    "description": "If set, an additional chunk will be streamed before the data: [DONE] message.\nThe usage field on this chunk shows the token usage statistics for the entire request,\nand the choices field will always be an empty array.\nAll other chunks will also include a usage field, but with a null value.",
                    "type": "boolean"
                }
            }
        },
        "openai.Tool": {
            "type": "object",
            "properties": {
                "function": {
                    "$ref": "#/definitions/openai.FunctionDefinition"
                },
                "type": {
                    "$ref": "#/definitions/openai.ToolType"
                }
            }
        },
        "openai.ToolCall": {
            "type": "object",
            "properties": {
                "function": {
                    "$ref": "#/definitions/openai.FunctionCall"
                },
                "id": {
                    "type": "string"
                },
                "index": {
                    "description": "Index is not nil only in chat completion chunk object",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/openai.ToolType"
                }
            }
        },
        "openai.ToolType": {
            "type": "string",
            "enum": [
                "function"
            ],
            "x-enum-varnames": [
                "ToolTypeFunction"
            ]
        },
        "openai.TopLogProbs": {
            "type": "object",
            "properties": {
                "bytes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "logprob": {
                    "type": "number"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "openai.Usage": {
            "type": "object",
            "properties": {
                "completion_tokens": {
                    "type": "integer"
                },
                "completion_tokens_details": {
                    "$ref": "#/definitions/openai.CompletionTokensDetails"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "prompt_tokens_details": {
                    "$ref": "#/definitions/openai.PromptTokensDetails"
                },
                "total_tokens": {
                    "type": "integer"
                }
            }
        },
        "openai.Violence": {
            "type": "object",
            "properties": {
                "filtered": {
                    "type": "boolean"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "server.AgentProgressItem": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "current_task": {
                    "$ref": "#/definitions/server.TaskItemDTO"
                },
                "last_update": {
                    "type": "string"
                },
                "phase": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "task_name": {
                    "type": "string"
                },
                "tasks_after": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.TaskItemDTO"
                    }
                },
                "tasks_before": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.TaskItemDTO"
                    }
                }
            }
        },
        "server.AgentSandboxesDebugResponse": {
            "type": "object",
            "properties": {
                "apps": {
                    "description": "Apps mode",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.WolfAppInfo"
                    }
                },
                "lobbies": {
                    "description": "Lobbies mode",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.WolfLobbyInfo"
                    }
                },
                "memory": {
                    "$ref": "#/definitions/server.WolfSystemMemory"
                },
                "moonlight_clients": {
                    "description": "NEW: moonlight-web client connections",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.MoonlightClientInfo"
                    }
                },
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.WolfSessionInfo"
                    }
                },
                "wolf_mode": {
                    "description": "Current Wolf mode (\"apps\" or \"lobbies\")",
                    "type": "string"
                }
            }
        },
        "server.AppCreateResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/types.AppConfig"
                },
                "created": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "model_substitutions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.ModelSubstitution"
                    }
                },
                "organization_id": {
                    "type": "string"
                },
                "owner": {
                    "description": "uuid of user ID",
                    "type": "string"
                },
                "owner_type": {
                    "description": "e.g. user, system, org",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OwnerType"
                        }
                    ]
                },
                "updated": {
                    "type": "string"
                },
                "user": {
                    "description": "Owner user struct, populated by the server for organization views",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.User"
                        }
                    ]
                }
            }
        },
        "server.ApprovalWithHandoffRequest": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comments": {
                    "type": "string"
                },
                "create_pull_request": {
                    "type": "boolean"
                },
                "handoff_config": {
                    "$ref": "#/definitions/services.DocumentHandoffConfig"
                },
                "project_path": {
                    "type": "string"
                }
            }
        },
        "server.CloneCommandResponse": {
            "type": "object",
            "properties": {
                "clone_command": {
                    "type": "string"
                },
                "clone_url": {
                    "type": "string"
                },
                "repository_id": {
                    "type": "string"
                },
                "target_dir": {
                    "type": "string"
                }
            }
        },
        "server.CombinedApprovalHandoffResult": {
            "type": "object",
            "properties": {
                "approval": {
                    "$ref": "#/definitions/types.SpecApprovalResponse"
                },
                "handoff_result": {
                    "$ref": "#/definitions/services.HandoffResult"
                },
                "message": {
                    "type": "string"
                },
                "next_steps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "spec_task": {
                    "$ref": "#/definitions/types.SpecTask"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "server.CoordinationLogResponse": {
            "type": "object",
            "properties": {
                "active_sessions": {
                    "type": "integer"
                },
                "completed_sessions": {
                    "type": "integer"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.CoordinationEvent"
                    }
                },
                "events_by_type": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "filtered_events": {
                    "type": "integer"
                },
                "last_activity": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "total_events": {
                    "type": "integer"
                }
            }
        },
        "server.CreatePersonalDevEnvironmentRequest": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_fps": {
                    "description": "Default: 120",
                    "type": "integer"
                },
                "display_height": {
                    "description": "Default: 1640 (iPad Pro)",
                    "type": "integer"
                },
                "display_width": {
                    "description": "Display configuration for the streaming session",
                    "type": "integer"
                },
                "environment_name": {
                    "type": "string"
                }
            }
        },
        "server.CreateSampleRepositoryRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "kodit_indexing": {
                    "description": "Enable Kodit code intelligence indexing",
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "sample_type": {
                    "type": "string"
                }
            }
        },
        "server.CreateSpecTaskFromDemoRequest": {
            "type": "object",
            "required": [
                "demo_repo",
                "prompt"
            ],
            "properties": {
                "demo_repo": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "prompt": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "server.CreateSpecTaskRepositoryRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "template_files": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "server.CreateTopUpRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "org_id": {
                    "type": "string"
                }
            }
        },
        "server.DesignDocsResponse": {
            "type": "object",
            "properties": {
                "current_task_index": {
                    "type": "integer"
                },
                "design_markdown": {
                    "type": "string"
                },
                "progress_markdown": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "server.DesignDocsShareLinkResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "share_url": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "server.ForkSampleProjectRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "private": {
                    "type": "boolean"
                },
                "project_name": {
                    "type": "string"
                },
                "sample_project_id": {
                    "type": "string"
                }
            }
        },
        "server.ForkSampleProjectResponse": {
            "type": "object",
            "properties": {
                "github_repo_url": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                }
            }
        },
        "server.ForkSimpleProjectRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "project_name": {
                    "type": "string"
                },
                "sample_project_id": {
                    "type": "string"
                }
            }
        },
        "server.ForkSimpleProjectResponse": {
            "type": "object",
            "properties": {
                "github_repo_url": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "tasks_created": {
                    "type": "integer"
                }
            }
        },
        "server.InitializeSampleRepositoriesRequest": {
            "type": "object",
            "properties": {
                "owner_id": {
                    "type": "string"
                },
                "sample_types": {
                    "description": "If empty, creates all samples",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.InitializeSampleRepositoriesResponse": {
            "type": "object",
            "properties": {
                "created_count": {
                    "type": "integer"
                },
                "created_repositories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.GitRepository"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "server.LicenseKeyRequest": {
            "type": "object",
            "properties": {
                "license_key": {
                    "type": "string"
                }
            }
        },
        "server.LiveAgentFleetProgressResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.AgentProgressItem"
                    }
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "server.LogsSummary": {
            "type": "object",
            "properties": {
                "active_instances": {
                    "type": "integer"
                },
                "error_retention_hours": {
                    "type": "integer"
                },
                "instances_with_errors": {
                    "type": "integer"
                },
                "max_lines_per_buffer": {
                    "type": "integer"
                },
                "recent_errors": {
                    "type": "integer"
                },
                "slots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.SlotLogSummary"
                    }
                }
            }
        },
        "server.ModelSubstitution": {
            "type": "object",
            "properties": {
                "assistant_name": {
                    "type": "string"
                },
                "new_model": {
                    "type": "string"
                },
                "new_provider": {
                    "type": "string"
                },
                "original_model": {
                    "type": "string"
                },
                "original_provider": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "server.MoonlightClientInfo": {
            "type": "object",
            "properties": {
                "client_unique_id": {
                    "description": "Unique Moonlight client ID (null for browser clients)",
                    "type": "string"
                },
                "has_websocket": {
                    "description": "Is a WebRTC client currently connected?",
                    "type": "boolean"
                },
                "mode": {
                    "description": "\"create\", \"keepalive\", \"join\"",
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "server.PersonalDevEnvironmentResponse": {
            "type": "object",
            "properties": {
                "appID": {
                    "description": "Helix App ID for configuration (MCP servers, tools, etc.)",
                    "type": "string"
                },
                "configured_tools": {
                    "description": "MCP servers enabled",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "container_name": {
                    "description": "Container information for direct network access",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "data_sources": {
                    "description": "Connected data sources",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "display_fps": {
                    "description": "Streaming framerate",
                    "type": "integer"
                },
                "display_height": {
                    "description": "Streaming resolution height",
                    "type": "integer"
                },
                "display_width": {
                    "description": "Display configuration for streaming",
                    "type": "integer"
                },
                "environment_name": {
                    "description": "User-friendly name",
                    "type": "string"
                },
                "instanceID": {
                    "type": "string"
                },
                "instanceType": {
                    "description": "\"spec_task\", \"personal_dev\", \"shared_workspace\"",
                    "type": "string"
                },
                "is_personal_env": {
                    "description": "Personal dev environment specific",
                    "type": "boolean"
                },
                "lastActivity": {
                    "type": "string"
                },
                "projectPath": {
                    "type": "string"
                },
                "specTaskID": {
                    "description": "Optional - null for personal dev environments",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "stream_url": {
                    "type": "string"
                },
                "threadCount": {
                    "type": "integer"
                },
                "userID": {
                    "description": "Always required",
                    "type": "string"
                },
                "vnc_port": {
                    "description": "VNC port inside container (5901)",
                    "type": "integer"
                },
                "wolf_session_id": {
                    "description": "Wolf's numeric session ID for API calls",
                    "type": "string"
                }
            }
        },
        "server.PhaseProgress": {
            "type": "object",
            "properties": {
                "agent": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "revision_count": {
                    "type": "integer"
                },
                "session_id": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "server.SampleProject": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "\"web\", \"api\", \"mobile\", \"data\", \"ai\"",
                    "type": "string"
                },
                "default_branch": {
                    "type": "string"
                },
                "demo_url": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "difficulty": {
                    "description": "\"beginner\", \"intermediate\", \"advanced\"",
                    "type": "string"
                },
                "github_repo": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "sample_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.SampleProjectTask"
                    }
                },
                "technologies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.SampleProjectTask": {
            "type": "object",
            "properties": {
                "acceptance_criteria": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "estimated_hours": {
                    "type": "integer"
                },
                "files_to_modify": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "priority": {
                    "description": "\"low\", \"medium\", \"high\", \"critical\"",
                    "type": "string"
                },
                "status": {
                    "description": "\"backlog\", \"ready\", \"in_progress\", \"review\", \"done\"",
                    "type": "string"
                },
                "technical_notes": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "\"feature\", \"bug\", \"task\", \"epic\"",
                    "type": "string"
                }
            }
        },
        "server.SampleTaskPrompt": {
            "type": "object",
            "properties": {
                "constraints": {
                    "description": "Any specific constraints or requirements",
                    "type": "string"
                },
                "context": {
                    "description": "Additional context about the codebase",
                    "type": "string"
                },
                "labels": {
                    "description": "Tags for organization",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "priority": {
                    "description": "\"low\", \"medium\", \"high\", \"critical\"",
                    "type": "string"
                },
                "prompt": {
                    "description": "Natural language request",
                    "type": "string"
                }
            }
        },
        "server.SampleType": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tech_stack": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.SampleTypesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "sample_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.SampleType"
                    }
                }
            }
        },
        "server.SessionHistoryEntry": {
            "type": "object",
            "properties": {
                "activity_type": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "files_affected": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "server.SessionHistoryResponse": {
            "type": "object",
            "properties": {
                "activity_type": {
                    "type": "string"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.SessionHistoryEntry"
                    }
                },
                "git_branch": {
                    "type": "string"
                },
                "last_commit": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "total_entries": {
                    "type": "integer"
                },
                "work_session_id": {
                    "type": "string"
                }
            }
        },
        "server.SessionWolfAppStateResponse": {
            "type": "object",
            "properties": {
                "client_unique_id": {
                    "description": "Unique Moonlight client ID for this agent",
                    "type": "string"
                },
                "has_websocket": {
                    "description": "Is a browser client currently connected?",
                    "type": "boolean"
                },
                "session_id": {
                    "type": "string"
                },
                "state": {
                    "description": "\"absent\", \"running\", \"resumable\"",
                    "type": "string"
                },
                "wolf_app_id": {
                    "type": "string"
                }
            }
        },
        "server.SimpleSampleProject": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "default_branch": {
                    "type": "string"
                },
                "demo_url": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "github_repo": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "task_prompts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.SampleTaskPrompt"
                    }
                },
                "technologies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.SlotLogSummary": {
            "type": "object",
            "properties": {
                "has_logs": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "runner_id": {
                    "type": "string"
                }
            }
        },
        "server.SpecDocumentContentResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "content_type": {
                    "type": "string"
                },
                "document_name": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "last_modified": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "spec_task_id": {
                    "type": "string"
                }
            }
        },
        "server.SpecTaskExternalAgentStatusResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "external_agent_id": {
                    "type": "string"
                },
                "helix_session_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "idle_minutes": {
                    "type": "integer"
                },
                "session_count": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "warning_threshold": {
                    "type": "boolean"
                },
                "will_terminate_in": {
                    "type": "integer"
                },
                "wolf_app_id": {
                    "type": "string"
                },
                "workspace_dir": {
                    "type": "string"
                }
            }
        },
        "server.TaskItemDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "server.TaskProgressResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "implementation": {
                    "$ref": "#/definitions/server.PhaseProgress"
                },
                "specification": {
                    "$ref": "#/definitions/server.PhaseProgress"
                },
                "status": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "server.TaskSpecsResponse": {
            "type": "object",
            "properties": {
                "implementation_plan": {
                    "type": "string"
                },
                "original_prompt": {
                    "type": "string"
                },
                "requirements_spec": {
                    "type": "string"
                },
                "spec_approved_at": {
                    "type": "string"
                },
                "spec_approved_by": {
                    "type": "string"
                },
                "spec_revision_count": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "technical_design": {
                    "type": "string"
                }
            }
        },
        "server.WolfAppInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "server.WolfAppMemory": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "app_name": {
                    "type": "string"
                },
                "client_count": {
                    "type": "integer"
                },
                "memory_bytes": {
                    "type": "integer"
                },
                "resolution": {
                    "type": "string"
                }
            }
        },
        "server.WolfClientConnection": {
            "type": "object",
            "properties": {
                "app_id": {
                    "description": "apps mode: connected app",
                    "type": "string"
                },
                "client_ip": {
                    "type": "string"
                },
                "lobby_id": {
                    "description": "lobbies mode: connected lobby",
                    "type": "string"
                },
                "memory_bytes": {
                    "type": "integer"
                },
                "resolution": {
                    "type": "string"
                },
                "session_id": {
                    "description": "Wolf returns this as string (Moonlight protocol requirement)",
                    "type": "string"
                }
            }
        },
        "server.WolfLobbyInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "multi_user": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "pin": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "started_by_profile_id": {
                    "type": "string"
                },
                "stop_when_everyone_leaves": {
                    "type": "boolean"
                }
            }
        },
        "server.WolfLobbyMemory": {
            "type": "object",
            "properties": {
                "client_count": {
                    "type": "integer"
                },
                "lobby_id": {
                    "type": "string"
                },
                "lobby_name": {
                    "type": "string"
                },
                "memory_bytes": {
                    "type": "integer"
                },
                "resolution": {
                    "type": "string"
                }
            }
        },
        "server.WolfSessionInfo": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "client_ip": {
                    "type": "string"
                },
                "display_mode": {
                    "type": "object",
                    "properties": {
                        "av1_supported": {
                            "type": "boolean"
                        },
                        "height": {
                            "type": "integer"
                        },
                        "hevc_supported": {
                            "type": "boolean"
                        },
                        "refresh_rate": {
                            "type": "integer"
                        },
                        "width": {
                            "type": "integer"
                        }
                    }
                },
                "session_id": {
                    "description": "Exposed as session_id for frontend",
                    "type": "string"
                }
            }
        },
        "server.WolfSystemMemory": {
            "type": "object",
            "properties": {
                "apps": {
                    "description": "Apps mode",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.WolfAppMemory"
                    }
                },
                "clients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.WolfClientConnection"
                    }
                },
                "gstreamer_buffer_bytes": {
                    "type": "integer"
                },
                "lobbies": {
                    "description": "Lobbies mode",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.WolfLobbyMemory"
                    }
                },
                "process_rss_bytes": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "total_memory_bytes": {
                    "type": "integer"
                }
            }
        },
        "services.CoordinationEvent": {
            "type": "object",
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_at": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "event_type": {
                    "$ref": "#/definitions/services.CoordinationEventType"
                },
                "from_session_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "to_session_id": {
                    "description": "Empty for broadcast",
                    "type": "string"
                }
            }
        },
        "services.CoordinationEventType": {
            "type": "string",
            "enum": [
                "handoff",
                "blocking",
                "notification",
                "request",
                "response",
                "broadcast",
                "completion",
                "spawn"
            ],
            "x-enum-varnames": [
                "CoordinationEventTypeHandoff",
                "CoordinationEventTypeBlocking",
                "CoordinationEventTypeNotification",
                "CoordinationEventTypeRequest",
                "CoordinationEventTypeResponse",
                "CoordinationEventTypeBroadcast",
                "CoordinationEventTypeCompletion",
                "CoordinationEventTypeSpawn"
            ]
        },
        "services.CreateTaskRequest": {
            "type": "object",
            "properties": {
                "priority": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "prompt": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "services.DocumentHandoffConfig": {
            "type": "object",
            "properties": {
                "auto_merge_approved_specs": {
                    "type": "boolean"
                },
                "commit_frequency_minutes": {
                    "type": "integer"
                },
                "custom_git_hooks": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "enable_git_integration": {
                    "type": "boolean"
                },
                "enable_pull_requests": {
                    "type": "boolean"
                },
                "enable_session_recording": {
                    "type": "boolean"
                },
                "notification_webhooks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "require_code_review": {
                    "type": "boolean"
                },
                "spec_reviewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.DocumentHandoffStatus": {
            "type": "object",
            "properties": {
                "current_phase": {
                    "type": "string"
                },
                "documents_generated": {
                    "type": "boolean"
                },
                "git_integration_status": {
                    "type": "string"
                },
                "last_commit_hash": {
                    "type": "string"
                },
                "last_commit_time": {
                    "type": "string"
                },
                "session_recording_active": {
                    "type": "boolean"
                },
                "spec_task_id": {
                    "type": "string"
                }
            }
        },
        "services.GitRepository": {
            "type": "object",
            "properties": {
                "branches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clone_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "default_branch": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_activity": {
                    "type": "string"
                },
                "local_path": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "repo_type": {
                    "$ref": "#/definitions/services.GitRepositoryType"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/services.GitRepositoryStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "services.GitRepositoryCreateRequest": {
            "type": "object",
            "properties": {
                "default_branch": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "initial_files": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "repo_type": {
                    "$ref": "#/definitions/services.GitRepositoryType"
                },
                "spec_task_id": {
                    "type": "string"
                }
            }
        },
        "services.GitRepositoryStatus": {
            "type": "string",
            "enum": [
                "active",
                "archived",
                "deleted"
            ],
            "x-enum-varnames": [
                "GitRepositoryStatusActive",
                "GitRepositoryStatusArchived",
                "GitRepositoryStatusDeleted"
            ]
        },
        "services.GitRepositoryType": {
            "type": "string",
            "enum": [
                "project",
                "spec_task",
                "sample",
                "template"
            ],
            "x-enum-comments": {
                "GitRepositoryTypeProject": "User project repository",
                "GitRepositoryTypeSample": "Sample/demo repository",
                "GitRepositoryTypeSpecTask": "SpecTask-specific repository",
                "GitRepositoryTypeTemplate": "Template repository"
            },
            "x-enum-varnames": [
                "GitRepositoryTypeProject",
                "GitRepositoryTypeSpecTask",
                "GitRepositoryTypeSample",
                "GitRepositoryTypeTemplate"
            ]
        },
        "services.HandoffResult": {
            "type": "object",
            "properties": {
                "branch_name": {
                    "type": "string"
                },
                "estimated_completion": {
                    "type": "string"
                },
                "files_committed": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "git_commit_hash": {
                    "type": "string"
                },
                "handoff_timestamp": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "next_actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "notifications_sent": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "phase": {
                    "description": "\"spec_commit\", \"implementation_start\", \"progress_update\", \"completion\"",
                    "type": "string"
                },
                "pull_request_url": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "work_sessions_created": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "zed_instance_id": {
                    "type": "string"
                }
            }
        },
        "services.SampleProjectCode": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "files": {
                    "description": "filepath -\u003e content",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "github_repo": {
                    "type": "string"
                },
                "gitignore": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "readme_url": {
                    "type": "string"
                },
                "technologies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.SessionHistoryRecord": {
            "type": "object",
            "properties": {
                "activity_type": {
                    "description": "\"conversation\", \"code_change\", \"decision\", \"coordination\"",
                    "type": "string"
                },
                "code_changes": {
                    "type": "object",
                    "additionalProperties": true
                },
                "content": {
                    "type": "string"
                },
                "coordination_data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "files_affected": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "helix_session_id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "timestamp": {
                    "type": "string"
                },
                "work_session_id": {
                    "type": "string"
                },
                "zed_thread_id": {
                    "type": "string"
                }
            }
        },
        "services.SpecDocumentConfig": {
            "type": "object",
            "properties": {
                "branch_name": {
                    "type": "string"
                },
                "commit_message": {
                    "type": "string"
                },
                "create_pull_request": {
                    "type": "boolean"
                },
                "custom_metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "generate_task_board": {
                    "type": "boolean"
                },
                "include_timestamps": {
                    "type": "boolean"
                },
                "overwrite_existing": {
                    "type": "boolean"
                },
                "project_path": {
                    "type": "string"
                },
                "reviewers_needed": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "spec_task_id": {
                    "type": "string"
                }
            }
        },
        "services.SpecDocumentResult": {
            "type": "object",
            "properties": {
                "branch_name": {
                    "type": "string"
                },
                "commit_hash": {
                    "type": "string"
                },
                "files_created": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generated_files": {
                    "description": "filename -\u003e content",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "pull_request_url": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.ZedSessionCreationResult": {
            "type": "object",
            "properties": {
                "creation_method": {
                    "description": "\"spawned\", \"planned\", \"ad_hoc\"",
                    "type": "string"
                },
                "helix_session": {
                    "$ref": "#/definitions/types.Session"
                },
                "message": {
                    "type": "string"
                },
                "parent_work_session": {
                    "$ref": "#/definitions/types.SpecTaskWorkSession"
                },
                "spec_task": {
                    "$ref": "#/definitions/types.SpecTask"
                },
                "success": {
                    "type": "boolean"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "work_session": {
                    "$ref": "#/definitions/types.SpecTaskWorkSession"
                },
                "zed_thread": {
                    "$ref": "#/definitions/types.SpecTaskZedThread"
                }
            }
        },
        "services.ZedThreadCreationContext": {
            "type": "object",
            "properties": {
                "agent_configuration": {
                    "type": "object",
                    "additionalProperties": true
                },
                "environment_variables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "estimated_duration_hours": {
                    "type": "number"
                },
                "expected_work_type": {
                    "type": "string"
                },
                "initial_prompt": {
                    "type": "string"
                },
                "parent_zed_thread_id": {
                    "type": "string"
                },
                "project_path": {
                    "type": "string"
                },
                "related_implementation_task": {
                    "type": "integer"
                },
                "spawn_reason": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "thread_description": {
                    "type": "string"
                },
                "thread_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "zed_instance_id": {
                    "type": "string"
                },
                "zed_thread_id": {
                    "type": "string"
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "stripe.SubscriptionStatus": {
            "type": "string",
            "enum": [
                "active",
                "canceled",
                "incomplete",
                "incomplete_expired",
                "past_due",
                "paused",
                "trialing",
                "unpaid"
            ],
            "x-enum-varnames": [
                "SubscriptionStatusActive",
                "SubscriptionStatusCanceled",
                "SubscriptionStatusIncomplete",
                "SubscriptionStatusIncompleteExpired",
                "SubscriptionStatusPastDue",
                "SubscriptionStatusPaused",
                "SubscriptionStatusTrialing",
                "SubscriptionStatusUnpaid"
            ]
        },
        "system.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "types.APIError": {
            "type": "object",
            "properties": {
                "code": {},
                "message": {
                    "type": "string"
                },
                "param": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.APIKeyType": {
            "type": "string",
            "enum": [
                "",
                "api",
                "app"
            ],
            "x-enum-varnames": [
                "APIkeytypeNone",
                "APIkeytypeAPI",
                "APIkeytypeApp"
            ]
        },
        "types.AccessGrant": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "organization_id": {
                    "description": "If granted to an organization",
                    "type": "string"
                },
                "resource_id": {
                    "description": "App ID, Knowledge ID, etc",
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Role"
                    }
                },
                "team_id": {
                    "description": "If granted to a team",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "description": "Populated by the server if UserID is set",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "If granted to a user",
                    "type": "string"
                }
            }
        },
        "types.Action": {
            "type": "string",
            "enum": [
                "Get",
                "List",
                "Delete",
                "Update",
                "Create",
                "UseAction"
            ],
            "x-enum-comments": {
                "ActionUseAction": "For example \"use app\""
            },
            "x-enum-varnames": [
                "ActionGet",
                "ActionList",
                "ActionDelete",
                "ActionUpdate",
                "ActionCreate",
                "ActionUseAction"
            ]
        },
        "types.AddOrganizationMemberRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "$ref": "#/definitions/types.OrganizationRole"
                },
                "user_reference": {
                    "description": "Either user ID or user email",
                    "type": "string"
                }
            }
        },
        "types.AddTeamMemberRequest": {
            "type": "object",
            "properties": {
                "user_reference": {
                    "description": "Either user ID or user email",
                    "type": "string"
                }
            }
        },
        "types.AgentDashboardSummary": {
            "type": "object",
            "properties": {
                "active_help_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HelpRequest"
                    }
                },
                "active_sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentSessionStatus"
                    }
                },
                "global_allocation_decisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GlobalAllocationDecision"
                    }
                },
                "last_updated": {
                    "type": "string"
                },
                "pending_reviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.JobCompletion"
                    }
                },
                "pending_work": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentWorkItem"
                    }
                },
                "queue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.WorkloadSummary"
                    }
                },
                "recent_completions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.JobCompletion"
                    }
                },
                "runners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DashboardRunner"
                    }
                },
                "running_work": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentWorkItem"
                    }
                },
                "scheduling_decisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SchedulingDecision"
                    }
                },
                "sessions_needing_help": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentSessionStatus"
                    }
                },
                "work_queue_stats": {
                    "$ref": "#/definitions/types.AgentWorkQueueStats"
                }
            }
        },
        "types.AgentFleetSummary": {
            "type": "object",
            "properties": {
                "active_help_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HelpRequest"
                    }
                },
                "active_sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentSessionStatus"
                    }
                },
                "external_agent_runners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ExternalAgentConnection"
                    }
                },
                "last_updated": {
                    "type": "string"
                },
                "pending_reviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.JobCompletion"
                    }
                },
                "pending_work": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentWorkItem"
                    }
                },
                "recent_completions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.JobCompletion"
                    }
                },
                "running_work": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentWorkItem"
                    }
                },
                "sessions_needing_help": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentSessionStatus"
                    }
                },
                "work_queue_stats": {
                    "$ref": "#/definitions/types.AgentWorkQueueStats"
                }
            }
        },
        "types.AgentSessionStatus": {
            "type": "object",
            "properties": {
                "agent_type": {
                    "type": "string"
                },
                "app_id": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "configuration": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "container_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "current_task": {
                    "description": "What the agent is currently doing",
                    "type": "string"
                },
                "current_work_item": {
                    "type": "string"
                },
                "health_checked_at": {
                    "type": "string"
                },
                "health_status": {
                    "description": "\"healthy\", \"unhealthy\", \"unknown\"",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_activity": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "organization_id": {
                    "type": "string"
                },
                "process_id": {
                    "type": "integer"
                },
                "rdp_port": {
                    "type": "integer"
                },
                "session_id": {
                    "type": "string"
                },
                "state": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "description": "\"starting\", \"active\", \"waiting_for_help\", \"paused\", \"completed\", \"pending_review\", \"failed\"",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "workspace_dir": {
                    "type": "string"
                }
            }
        },
        "types.AgentSessionsResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentSessionStatus"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "types.AgentType": {
            "type": "string",
            "enum": [
                "helix_basic",
                "helix_agent",
                "zed_external"
            ],
            "x-enum-comments": {
                "AgentTypeHelixAgent": "Standard Helix agent with skills",
                "AgentTypeHelixBasic": "Basic Helix agent",
                "AgentTypeZedExternal": "Zed-integrated agent"
            },
            "x-enum-varnames": [
                "AgentTypeHelixBasic",
                "AgentTypeHelixAgent",
                "AgentTypeZedExternal"
            ]
        },
        "types.AgentWorkConfig": {
            "type": "object",
            "properties": {
                "environment": {
                    "description": "Agent environment and setup",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "github": {
                    "description": "Source integration settings",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.GitHubWorkConfig"
                        }
                    ]
                },
                "instructions": {
                    "description": "Custom instructions or context",
                    "type": "string"
                },
                "manual": {
                    "$ref": "#/definitions/types.ManualWorkConfig"
                },
                "skills": {
                    "description": "Skills to enable for this work type",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "webhook": {
                    "$ref": "#/definitions/types.WebhookWorkConfig"
                },
                "working_dir": {
                    "type": "string"
                }
            }
        },
        "types.AgentWorkItem": {
            "type": "object",
            "properties": {
                "agent_type": {
                    "description": "Required agent type",
                    "type": "string"
                },
                "app_id": {
                    "type": "string"
                },
                "assigned_session_id": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "config": {
                    "description": "Agent configuration",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deadline_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "description": "Labels/tags for filtering",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "last_error": {
                    "type": "string"
                },
                "max_retries": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "priority": {
                    "description": "Lower = higher priority",
                    "type": "integer"
                },
                "retry_count": {
                    "type": "integer"
                },
                "scheduled_for": {
                    "description": "When to start this work",
                    "type": "string"
                },
                "source": {
                    "description": "\"github\", \"manual\", \"webhook\", etc.",
                    "type": "string"
                },
                "source_id": {
                    "description": "External ID from source system",
                    "type": "string"
                },
                "source_url": {
                    "description": "URL to source (e.g., GitHub issue URL)",
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "description": "\"pending\", \"assigned\", \"in_progress\", \"completed\", \"failed\", \"cancelled\"",
                    "type": "string"
                },
                "trigger_config_id": {
                    "description": "Links to TriggerConfiguration",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "work_data": {
                    "description": "Work-specific data",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.AgentWorkItemCreateRequest": {
            "type": "object",
            "properties": {
                "agent_type": {
                    "type": "string"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "deadline_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_retries": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "scheduled_for": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "source_id": {
                    "type": "string"
                },
                "source_url": {
                    "type": "string"
                },
                "work_data": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "types.AgentWorkItemUpdateRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "description": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "work_data": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "types.AgentWorkItemsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AgentWorkItem"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "types.AgentWorkQueueStats": {
            "type": "object",
            "properties": {
                "active_sessions": {
                    "type": "integer"
                },
                "average_wait_time_minutes": {
                    "type": "number"
                },
                "by_agent_type": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "by_priority": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "by_source": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "oldest_pending": {
                    "type": "string"
                },
                "total_completed": {
                    "type": "integer"
                },
                "total_failed": {
                    "type": "integer"
                },
                "total_pending": {
                    "type": "integer"
                },
                "total_running": {
                    "type": "integer"
                }
            }
        },
        "types.AgentWorkQueueTrigger": {
            "type": "object",
            "properties": {
                "agent_type": {
                    "description": "\"zed\", \"helix\", etc.",
                    "type": "string"
                },
                "auto_assign": {
                    "description": "Auto-assign to available agents",
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "max_retries": {
                    "description": "Maximum retry attempts",
                    "type": "integer"
                },
                "priority": {
                    "description": "Lower numbers = higher priority",
                    "type": "integer"
                },
                "timeout_mins": {
                    "description": "Timeout in minutes",
                    "type": "integer"
                },
                "work_config": {
                    "description": "Work item configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.AgentWorkConfig"
                        }
                    ]
                }
            }
        },
        "types.AggregatedUsageMetric": {
            "type": "object",
            "properties": {
                "completion_cost": {
                    "type": "number"
                },
                "completion_tokens": {
                    "type": "integer"
                },
                "date": {
                    "description": "ID    string    `json:\"id\" gorm:\"primaryKey\"`",
                    "type": "string"
                },
                "latency_ms": {
                    "type": "number"
                },
                "prompt_cost": {
                    "type": "number"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "request_size_bytes": {
                    "type": "integer"
                },
                "response_size_bytes": {
                    "type": "integer"
                },
                "total_cost": {
                    "description": "Total cost of the call (prompt and completion tokens)",
                    "type": "number"
                },
                "total_requests": {
                    "type": "integer"
                },
                "total_tokens": {
                    "type": "integer"
                }
            }
        },
        "types.AllocationPlanView": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "integer"
                },
                "evictions_needed": {
                    "description": "Slot IDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gpu_count": {
                    "type": "integer"
                },
                "gpus": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "string"
                },
                "is_multi_gpu": {
                    "type": "boolean"
                },
                "is_valid": {
                    "type": "boolean"
                },
                "memory_per_gpu": {
                    "type": "integer"
                },
                "requires_eviction": {
                    "type": "boolean"
                },
                "runner_capacity": {
                    "description": "GPU index -\u003e total memory",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "runner_id": {
                    "type": "string"
                },
                "runner_memory_state": {
                    "description": "GPU index -\u003e allocated memory",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "runtime": {
                    "$ref": "#/definitions/types.Runtime"
                },
                "tensor_parallel_size": {
                    "type": "integer"
                },
                "total_memory_required": {
                    "type": "integer"
                },
                "validation_error": {
                    "type": "string"
                }
            }
        },
        "types.ApiKey": {
            "type": "object",
            "properties": {
                "app_id": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "created": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "owner_type": {
                    "$ref": "#/definitions/types.OwnerType"
                },
                "type": {
                    "$ref": "#/definitions/types.APIKeyType"
                }
            }
        },
        "types.App": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/types.AppConfig"
                },
                "created": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "owner": {
                    "description": "uuid of user ID",
                    "type": "string"
                },
                "owner_type": {
                    "description": "e.g. user, system, org",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OwnerType"
                        }
                    ]
                },
                "updated": {
                    "type": "string"
                },
                "user": {
                    "description": "Owner user struct, populated by the server for organization views",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.User"
                        }
                    ]
                }
            }
        },
        "types.AppConfig": {
            "type": "object",
            "properties": {
                "allowed_domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "helix": {
                    "$ref": "#/definitions/types.AppHelixConfig"
                },
                "secrets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "types.AppHelixConfig": {
            "type": "object",
            "properties": {
                "assistants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AssistantConfig"
                    }
                },
                "avatar": {
                    "type": "string"
                },
                "avatar_content_type": {
                    "type": "string"
                },
                "default_agent_type": {
                    "description": "Agent configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.AgentType"
                        }
                    ]
                },
                "description": {
                    "type": "string"
                },
                "external_agent_config": {
                    "$ref": "#/definitions/types.ExternalAgentConfig"
                },
                "external_agent_enabled": {
                    "type": "boolean"
                },
                "external_url": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Trigger"
                    }
                }
            }
        },
        "types.AssistantAPI": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "oauth_provider": {
                    "description": "OAuth configuration",
                    "type": "string"
                },
                "oauth_scopes": {
                    "description": "Required OAuth scopes for this API",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path_params": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "query": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "request_prep_template": {
                    "type": "string"
                },
                "response_error_template": {
                    "type": "string"
                },
                "response_success_template": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                },
                "skip_unknown_keys": {
                    "description": "if true, unknown keys in the response body will be removed before\nreturning to the agent for interpretation",
                    "type": "boolean"
                },
                "system_prompt": {
                    "type": "string"
                },
                "transform_output": {
                    "description": "Transform JSON into readable text to reduce the\nsize of the response body",
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.AssistantAzureDevOps": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "organization_url": {
                    "type": "string"
                },
                "personal_access_token": {
                    "type": "string"
                }
            }
        },
        "types.AssistantBrowser": {
            "type": "object",
            "properties": {
                "cache": {
                    "description": "If true, the browser will cache the results of the tool call",
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "markdown_post_processing": {
                    "description": "If true, the browser will return the HTML as markdown",
                    "type": "boolean"
                },
                "no_browser": {
                    "description": "If true, the browser will not be used to open URLs, it will be a simple GET request",
                    "type": "boolean"
                },
                "process_output": {
                    "description": "If true, the browser will process the output of the tool call before returning it to the top loop. Useful for skills that return structured data such as Browser,",
                    "type": "boolean"
                }
            }
        },
        "types.AssistantCalculator": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "types.AssistantConfig": {
            "type": "object",
            "properties": {
                "agent_mode": {
                    "description": "AgentMode triggers the use of the agent loop (deprecated - use AgentType instead)",
                    "type": "boolean"
                },
                "agent_type": {
                    "description": "AgentType specifies the type of agent to use",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.AgentType"
                        }
                    ]
                },
                "apis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AssistantAPI"
                    }
                },
                "avatar": {
                    "type": "string"
                },
                "azure_devops": {
                    "$ref": "#/definitions/types.AssistantAzureDevOps"
                },
                "browser": {
                    "$ref": "#/definitions/types.AssistantBrowser"
                },
                "calculator": {
                    "$ref": "#/definitions/types.AssistantCalculator"
                },
                "context_limit": {
                    "description": "ContextLimit - the number of messages to include in the context for the AI assistant.\nWhen set to 1, the AI assistant will only see and remember the most recent message.",
                    "type": "integer"
                },
                "conversation_starters": {
                    "description": "ConversationStarters is a list of messages that will be presented to the user\nwhen a new session is about to be launched. Use this to showcase the capabilities of the assistant.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "$ref": "#/definitions/types.AssistantEmail"
                },
                "frequency_penalty": {
                    "description": "How much to penalize new tokens based on their frequency in the text so far.\nIncreases the model's likelihood to talk about new topics\n0 - balanced\n2 - less repetitive",
                    "type": "number"
                },
                "generation_model": {
                    "type": "string"
                },
                "generation_model_provider": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "is_actionable_history_length": {
                    "description": "Defaults to 4",
                    "type": "integer"
                },
                "is_actionable_template": {
                    "type": "string"
                },
                "knowledge": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AssistantKnowledge"
                    }
                },
                "lora_id": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "max_tokens": {
                    "description": "The maximum number of tokens to generate before stopping.",
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AssistantMCP"
                    }
                },
                "memory": {
                    "description": "Enable/disable user based memory for the agent",
                    "type": "boolean"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "presence_penalty": {
                    "description": "How much to penalize new tokens based on whether they appear in the text so far.\nIncreases the model's likelihood to talk about new topics\n0 - balanced\n2 - open minded",
                    "type": "number"
                },
                "provider": {
                    "type": "string"
                },
                "rag_source_id": {
                    "type": "string"
                },
                "reasoning_effort": {
                    "description": "Controls effort on reasoning for reasoning models. It can be set to \"low\", \"medium\", or \"high\".",
                    "type": "string"
                },
                "reasoning_model": {
                    "type": "string"
                },
                "reasoning_model_effort": {
                    "type": "string"
                },
                "reasoning_model_provider": {
                    "type": "string"
                },
                "small_generation_model": {
                    "type": "string"
                },
                "small_generation_model_provider": {
                    "type": "string"
                },
                "small_reasoning_model": {
                    "type": "string"
                },
                "small_reasoning_model_effort": {
                    "type": "string"
                },
                "small_reasoning_model_provider": {
                    "type": "string"
                },
                "system_prompt": {
                    "type": "string"
                },
                "temperature": {
                    "description": "Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n0.01 - precise\n1 - neutral\n2 - creative",
                    "type": "number"
                },
                "tests": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "steps": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/types.TestStep"
                                }
                            }
                        }
                    }
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Tool"
                    }
                },
                "top_p": {
                    "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability mass.\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\n0 - balanced\n2 - more creative",
                    "type": "number"
                },
                "web_search": {
                    "$ref": "#/definitions/types.AssistantWebSearch"
                },
                "zapier": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AssistantZapier"
                    }
                }
            }
        },
        "types.AssistantEmail": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "template_example": {
                    "type": "string"
                }
            }
        },
        "types.AssistantKnowledge": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the knowledge, will be used in the prompt\nto explain the knowledge to the assistant",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the knowledge, will be unique within the Helix app",
                    "type": "string"
                },
                "rag_settings": {
                    "description": "RAGSettings defines the settings for the RAG system, how\nchunking is configured and where the index/query service is\nhosted.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.RAGSettings"
                        }
                    ]
                },
                "refresh_enabled": {
                    "description": "RefreshEnabled defines if the knowledge should be refreshed periodically\nor on events. For example a Google Drive knowledge can be refreshed\nevery 24 hours.",
                    "type": "boolean"
                },
                "refresh_schedule": {
                    "description": "RefreshSchedule defines the schedule for refreshing the knowledge.\nIt can be specified in cron format or as a duration for example '@every 2h'\nor 'every 5m' or '0 0 * * *' for daily at midnight.",
                    "type": "string"
                },
                "source": {
                    "description": "Source defines where the raw data is fetched from. It can be\ndirectly uploaded files, S3, GCS, Google Drive, Gmail, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.KnowledgeSource"
                        }
                    ]
                }
            }
        },
        "types.AssistantMCP": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "oauth_provider": {
                    "description": "The name of the OAuth provider to use for authentication",
                    "type": "string"
                },
                "oauth_scopes": {
                    "description": "Required OAuth scopes for this API",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Tool"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.AssistantWebSearch": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "max_results": {
                    "type": "integer"
                }
            }
        },
        "types.AssistantZapier": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.AuthenticatedResponse": {
            "type": "object",
            "properties": {
                "authenticated": {
                    "type": "boolean"
                }
            }
        },
        "types.AzureDevOpsTrigger": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "types.ChatCompletionMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "multiContent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ChatMessagePart"
                    }
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "tool_call_id": {
                    "description": "For Role=tool prompts this should be set to the ID given in the assistant's prior request to call a tool.",
                    "type": "string"
                },
                "tool_calls": {
                    "description": "For Role=assistant prompts this may be set to the tool calls generated by the model, such as function calls.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.ToolCall"
                    }
                }
            }
        },
        "types.ChatMessageImageURL": {
            "type": "object",
            "properties": {
                "detail": {
                    "$ref": "#/definitions/types.ImageURLDetail"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.ChatMessagePart": {
            "type": "object",
            "properties": {
                "image_url": {
                    "$ref": "#/definitions/types.ChatMessageImageURL"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.ChatMessagePartType"
                }
            }
        },
        "types.ChatMessagePartType": {
            "type": "string",
            "enum": [
                "text",
                "image_url"
            ],
            "x-enum-varnames": [
                "ChatMessagePartTypeText",
                "ChatMessagePartTypeImageURL"
            ]
        },
        "types.Choice": {
            "type": "object",
            "properties": {
                "delta": {
                    "$ref": "#/definitions/types.OpenAIMessage"
                },
                "finish_reason": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "message": {
                    "$ref": "#/definitions/types.OpenAIMessage"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "types.ContextMenuAction": {
            "type": "object",
            "properties": {
                "action_label": {
                    "description": "Forms the grouping in the UI",
                    "type": "string"
                },
                "label": {
                    "description": "The label that will be shown in the UI",
                    "type": "string"
                },
                "value": {
                    "description": "The value written to the text area when the action is selected",
                    "type": "string"
                }
            }
        },
        "types.ContextMenuResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ContextMenuAction"
                    }
                }
            }
        },
        "types.CrawledSources": {
            "type": "object",
            "properties": {
                "urls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.CrawledURL"
                    }
                }
            }
        },
        "types.CrawledURL": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "string"
                },
                "duration_ms": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.CreateAccessGrantRequest": {
            "type": "object",
            "properties": {
                "roles": {
                    "description": "Role names",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "team_id": {
                    "description": "Team ID",
                    "type": "string"
                },
                "user_reference": {
                    "description": "User ID or email",
                    "type": "string"
                }
            }
        },
        "types.CreateTeamRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                }
            }
        },
        "types.CrispTrigger": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "identifier": {
                    "description": "Token identifier",
                    "type": "string"
                },
                "nickname": {
                    "description": "Optional",
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "types.CronTrigger": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "input": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                }
            }
        },
        "types.DashboardData": {
            "type": "object",
            "properties": {
                "global_allocation_decisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GlobalAllocationDecision"
                    }
                },
                "queue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.WorkloadSummary"
                    }
                },
                "runners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DashboardRunner"
                    }
                },
                "scheduling_decisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SchedulingDecision"
                    }
                }
            }
        },
        "types.DashboardRunner": {
            "type": "object",
            "properties": {
                "allocated_memory": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "free_memory": {
                    "type": "integer"
                },
                "gpu_count": {
                    "description": "Number of GPUs detected",
                    "type": "integer"
                },
                "gpu_memory_stats": {
                    "description": "GPU memory stabilization statistics",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.GPUMemoryStats"
                        }
                    ]
                },
                "gpus": {
                    "description": "Per-GPU memory status",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GPUStatus"
                    }
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "memory_string": {
                    "type": "string"
                },
                "models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RunnerModelStatus"
                    }
                },
                "process_stats": {
                    "description": "Process tracking and cleanup statistics"
                },
                "slots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.RunnerSlot"
                    }
                },
                "total_memory": {
                    "type": "integer"
                },
                "updated": {
                    "type": "string"
                },
                "used_memory": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "types.DiscordTrigger": {
            "type": "object",
            "properties": {
                "server_name": {
                    "type": "string"
                }
            }
        },
        "types.DynamicModelInfo": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "model_info": {
                    "$ref": "#/definitions/types.ModelInfo"
                },
                "name": {
                    "description": "Model name",
                    "type": "string"
                },
                "provider": {
                    "description": "helix, openai, etc. (Helix internal information)",
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.Effect": {
            "type": "string",
            "enum": [
                "allow",
                "deny"
            ],
            "x-enum-varnames": [
                "EffectAllow",
                "EffectDeny"
            ]
        },
        "types.ExternalAgentConfig": {
            "type": "object",
            "properties": {
                "auto_connect_rdp": {
                    "description": "Whether to auto-connect RDP viewer",
                    "type": "boolean"
                },
                "display_height": {
                    "description": "Streaming resolution height (default: 1600)",
                    "type": "integer"
                },
                "display_refresh_rate": {
                    "description": "Streaming refresh rate (default: 60)",
                    "type": "integer"
                },
                "display_width": {
                    "description": "Video settings for streaming (Phase 3.5) - matches PDE display settings",
                    "type": "integer"
                },
                "env_vars": {
                    "description": "Environment variables in KEY=VALUE format",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project_path": {
                    "description": "Relative path for the project directory",
                    "type": "string"
                },
                "workspace_dir": {
                    "description": "Custom working directory",
                    "type": "string"
                }
            }
        },
        "types.ExternalAgentConnection": {
            "type": "object",
            "properties": {
                "connected_at": {
                    "type": "string"
                },
                "last_ping": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.Feedback": {
            "type": "string",
            "enum": [
                "like",
                "dislike"
            ],
            "x-enum-varnames": [
                "FeedbackLike",
                "FeedbackDislike"
            ]
        },
        "types.FeedbackRequest": {
            "type": "object",
            "properties": {
                "feedback": {
                    "$ref": "#/definitions/types.Feedback"
                },
                "feedback_message": {
                    "type": "string"
                }
            }
        },
        "types.Firecrawl": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "api_url": {
                    "type": "string"
                }
            }
        },
        "types.FlexibleEmbeddingRequest": {
            "type": "object",
            "properties": {
                "dimensions": {
                    "type": "integer"
                },
                "encoding_format": {
                    "type": "string"
                },
                "input": {
                    "description": "Can be string, []string, [][]int, etc."
                },
                "messages": {
                    "description": "For Chat Embeddings API format",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ChatCompletionMessage"
                    }
                },
                "model": {
                    "type": "string"
                }
            }
        },
        "types.FlexibleEmbeddingResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "embedding": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            },
                            "index": {
                                "type": "integer"
                            },
                            "object": {
                                "type": "string"
                            }
                        }
                    }
                },
                "model": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "usage": {
                    "type": "object",
                    "properties": {
                        "prompt_tokens": {
                            "type": "integer"
                        },
                        "total_tokens": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "types.FrontendLicenseInfo": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "object",
                    "properties": {
                        "users": {
                            "type": "boolean"
                        }
                    }
                },
                "limits": {
                    "type": "object",
                    "properties": {
                        "machines": {
                            "type": "integer"
                        },
                        "users": {
                            "type": "integer"
                        }
                    }
                },
                "organization": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                },
                "valid_until": {
                    "type": "string"
                }
            }
        },
        "types.GPUMemoryDataPoint": {
            "type": "object",
            "properties": {
                "actual_free_mb": {
                    "description": "Actual free memory (from nvidia-smi)",
                    "type": "integer"
                },
                "actual_total_mb": {
                    "description": "Total GPU memory",
                    "type": "integer"
                },
                "actual_used_mb": {
                    "description": "Actual memory used (from nvidia-smi)",
                    "type": "integer"
                },
                "allocated_mb": {
                    "description": "Memory allocated by Helix scheduler",
                    "type": "integer"
                },
                "gpu_index": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "types.GPUMemoryReading": {
            "type": "object",
            "properties": {
                "delta_mb": {
                    "type": "integer"
                },
                "is_stable": {
                    "type": "boolean"
                },
                "memory_mb": {
                    "type": "integer"
                },
                "poll_number": {
                    "type": "integer"
                },
                "stable_count": {
                    "type": "integer"
                }
            }
        },
        "types.GPUMemoryStabilizationEvent": {
            "type": "object",
            "properties": {
                "context": {
                    "description": "\"startup\" or \"deletion\"",
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "memory_delta_threshold_mb": {
                    "type": "integer"
                },
                "memory_readings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GPUMemoryReading"
                    }
                },
                "poll_interval_ms": {
                    "type": "integer"
                },
                "polls_taken": {
                    "type": "integer"
                },
                "required_stable_polls": {
                    "type": "integer"
                },
                "runtime": {
                    "type": "string"
                },
                "slot_id": {
                    "type": "string"
                },
                "stabilized_memory_mb": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "timeout_seconds": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "total_wait_seconds": {
                    "type": "integer"
                }
            }
        },
        "types.GPUMemoryStats": {
            "type": "object",
            "properties": {
                "average_wait_time_seconds": {
                    "type": "number"
                },
                "failed_stabilizations": {
                    "type": "integer"
                },
                "last_stabilization": {
                    "type": "string"
                },
                "max_wait_time_seconds": {
                    "type": "integer"
                },
                "memory_time_series": {
                    "description": "Last 10 minutes of memory data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GPUMemoryDataPoint"
                    }
                },
                "min_wait_time_seconds": {
                    "type": "integer"
                },
                "recent_events": {
                    "description": "Last 20 events",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GPUMemoryStabilizationEvent"
                    }
                },
                "scheduling_events": {
                    "description": "Last 10 minutes of scheduling events",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SchedulingEvent"
                    }
                },
                "successful_stabilizations": {
                    "type": "integer"
                },
                "total_stabilizations": {
                    "type": "integer"
                }
            }
        },
        "types.GPUState": {
            "type": "object",
            "properties": {
                "active_slots": {
                    "description": "Slot IDs using this GPU",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allocated_memory": {
                    "type": "integer"
                },
                "free_memory": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                },
                "total_memory": {
                    "type": "integer"
                },
                "utilization": {
                    "description": "0.0 - 1.0",
                    "type": "number"
                }
            }
        },
        "types.GPUStatus": {
            "type": "object",
            "properties": {
                "cuda_version": {
                    "description": "CUDA version",
                    "type": "string"
                },
                "driver_version": {
                    "description": "NVIDIA driver version",
                    "type": "string"
                },
                "free_memory": {
                    "description": "Free memory in bytes",
                    "type": "integer"
                },
                "index": {
                    "description": "GPU index (0, 1, 2, etc.)",
                    "type": "integer"
                },
                "model_name": {
                    "description": "GPU model name (e.g., \"NVIDIA H100 PCIe\", \"NVIDIA GeForce RTX 4090\")",
                    "type": "string"
                },
                "total_memory": {
                    "description": "Total memory in bytes",
                    "type": "integer"
                },
                "used_memory": {
                    "description": "Used memory in bytes",
                    "type": "integer"
                }
            }
        },
        "types.GitHubWorkConfig": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "auto_comment": {
                    "description": "Comment when starting work",
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "issue_types": {
                    "description": "\"issue\", \"pull_request\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "Filter by labels",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repo_name": {
                    "type": "string"
                },
                "repo_owner": {
                    "type": "string"
                }
            }
        },
        "types.GlobalAllocationDecision": {
            "type": "object",
            "properties": {
                "after_state": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/types.RunnerStateView"
                    }
                },
                "before_state": {
                    "description": "Global state snapshots",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/types.RunnerStateView"
                    }
                },
                "considered_plans": {
                    "description": "All plans considered",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AllocationPlanView"
                    }
                },
                "created": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "execution_time_ms": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "model_name": {
                    "type": "string"
                },
                "optimization_score": {
                    "description": "How optimal the final decision was",
                    "type": "number"
                },
                "planning_time_ms": {
                    "description": "Timing information",
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                },
                "runtime": {
                    "$ref": "#/definitions/types.Runtime"
                },
                "selected_plan": {
                    "$ref": "#/definitions/types.AllocationPlanView"
                },
                "session_id": {
                    "type": "string"
                },
                "success": {
                    "description": "Decision outcome",
                    "type": "boolean"
                },
                "total_plans_generated": {
                    "type": "integer"
                },
                "total_runners_evaluated": {
                    "description": "Decision metadata",
                    "type": "integer"
                },
                "total_time_ms": {
                    "type": "integer"
                },
                "workload_id": {
                    "type": "string"
                }
            }
        },
        "types.HelpRequest": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "attempted_solutions": {
                    "description": "What the agent has already tried",
                    "type": "string"
                },
                "context": {
                    "description": "Brief context about the current task",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "help_type": {
                    "description": "\"decision\", \"expertise\", \"clarification\", \"review\", \"guidance\", \"stuck\", \"other\"",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interaction_id": {
                    "type": "string"
                },
                "metadata": {
                    "description": "Additional metadata as JSON",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "resolution": {
                    "description": "The resolution or guidance provided",
                    "type": "string"
                },
                "resolved_at": {
                    "type": "string"
                },
                "resolved_by": {
                    "description": "UserID of the human who resolved this",
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "specific_need": {
                    "description": "Specific description of what help is needed",
                    "type": "string"
                },
                "status": {
                    "description": "\"pending\", \"in_progress\", \"resolved\", \"cancelled\"",
                    "type": "string"
                },
                "suggested_approaches": {
                    "description": "Potential approaches the agent suggests",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "urgency": {
                    "description": "\"low\", \"medium\", \"high\", \"critical\"",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.HelpRequestsListResponse": {
            "type": "object",
            "properties": {
                "help_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.HelpRequest"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "types.ImageURLDetail": {
            "type": "string",
            "enum": [
                "high",
                "low",
                "auto"
            ],
            "x-enum-varnames": [
                "ImageURLDetailHigh",
                "ImageURLDetailLow",
                "ImageURLDetailAuto"
            ]
        },
        "types.Interaction": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "completed": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "display_message": {
                    "description": "if this is defined, the UI will always display it instead of the message (so we can augment the internal prompt with RAG context)",
                    "type": "string"
                },
                "duration_ms": {
                    "description": "How long the interaction took to complete in milliseconds",
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "feedback": {
                    "$ref": "#/definitions/types.Feedback"
                },
                "feedback_message": {
                    "type": "string"
                },
                "generation_id": {
                    "description": "GenerationID, starts at 0, increments for each regeneration (when user retries a message, anywhere from the past)\nit is used to keep a timeline when querying the database for messages or viewing previous generations",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/types.SessionMode"
                },
                "prompt_message": {
                    "description": "User prompt (text)",
                    "type": "string"
                },
                "prompt_message_content": {
                    "description": "User prompt (multi-part)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MessageContent"
                        }
                    ]
                },
                "rag_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SessionRAGResult"
                    }
                },
                "response_format": {
                    "description": "e.g. json",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ResponseFormat"
                        }
                    ]
                },
                "response_format_response": {
                    "description": "e.g. json",
                    "type": "string"
                },
                "response_message": {
                    "description": "TODO: add the full multi-part response content\nResponseMessageContent MessageContent `json:\"response_message_content\"` // LLM response",
                    "type": "string"
                },
                "runner": {
                    "description": "the ID of the runner that processed this interaction",
                    "type": "string"
                },
                "scheduled": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/types.InteractionState"
                },
                "status": {
                    "type": "string"
                },
                "system_prompt": {
                    "description": "System prompt for the interaction (copy of the session's system prompt that was used to create this interaction)",
                    "type": "string"
                },
                "tool_call_id": {
                    "description": "For Role=tool prompts this should be set to the ID given in the assistant's prior request to call a tool.",
                    "type": "string"
                },
                "tool_calls": {
                    "description": "For Role=assistant prompts this may be set to the tool calls generated by the model, such as function calls.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.ToolCall"
                    }
                },
                "tools": {
                    "description": "Model function calling, not to be mistaken with Helix tools",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.Tool"
                    }
                },
                "trigger": {
                    "description": "Session (default), slack, crisp, etc",
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/types.Usage"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.InteractionState": {
            "type": "string",
            "enum": [
                "",
                "waiting",
                "editing",
                "complete",
                "error"
            ],
            "x-enum-varnames": [
                "InteractionStateNone",
                "InteractionStateWaiting",
                "InteractionStateEditing",
                "InteractionStateComplete",
                "InteractionStateError"
            ]
        },
        "types.Item": {
            "type": "object",
            "properties": {
                "b64_json": {
                    "type": "string"
                },
                "embedding": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "index": {
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "url": {
                    "description": "Images",
                    "type": "string"
                }
            }
        },
        "types.JobCompletion": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "completion_status": {
                    "description": "\"fully_completed\", \"milestone_reached\", etc.",
                    "type": "string"
                },
                "confidence": {
                    "description": "\"high\", \"medium\", \"low\"",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deliverables": {
                    "type": "string"
                },
                "files_created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interaction_id": {
                    "type": "string"
                },
                "limitations": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "next_steps": {
                    "type": "string"
                },
                "review_needed": {
                    "type": "boolean"
                },
                "review_notes": {
                    "type": "string"
                },
                "review_type": {
                    "description": "\"approval\", \"feedback\", \"validation\", etc.",
                    "type": "string"
                },
                "reviewed_at": {
                    "type": "string"
                },
                "reviewed_by": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "description": "\"pending_review\", \"approved\", \"needs_changes\", \"archived\"",
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "time_spent": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "work_item_id": {
                    "type": "string"
                }
            }
        },
        "types.Knowledge": {
            "type": "object",
            "properties": {
                "app_id": {
                    "description": "AppID through which the knowledge was created",
                    "type": "string"
                },
                "crawled_sources": {
                    "description": "URLs crawled in the last run (should match last knowledge version)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.CrawledSources"
                        }
                    ]
                },
                "created": {
                    "type": "string"
                },
                "description": {
                    "description": "Description of the knowledge, will be used in the prompt\nto explain the knowledge to the assistant",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "description": "Set if something wrong happens",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "next_run": {
                    "description": "Populated by the cron job controller",
                    "type": "string"
                },
                "owner": {
                    "description": "User ID",
                    "type": "string"
                },
                "owner_type": {
                    "description": "e.g. user, system, org",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OwnerType"
                        }
                    ]
                },
                "progress": {
                    "description": "Ephemeral state from knowledge controller",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.KnowledgeProgress"
                        }
                    ]
                },
                "rag_settings": {
                    "$ref": "#/definitions/types.RAGSettings"
                },
                "refresh_enabled": {
                    "description": "RefreshEnabled defines if the knowledge should be refreshed periodically\nor on events. For example a Google Drive knowledge can be refreshed\nevery 24 hours.",
                    "type": "boolean"
                },
                "refresh_schedule": {
                    "description": "RefreshSchedule defines the schedule for refreshing the knowledge.\nIt can be specified in cron format or as a duration for example '@every 2h'\nor 'every 5m' or '0 0 * * *' for daily at midnight.",
                    "type": "string"
                },
                "size": {
                    "description": "Size of the knowledge in bytes",
                    "type": "integer"
                },
                "source": {
                    "description": "Source defines where the raw data is fetched from. It can be\ndirectly uploaded files, S3, GCS, Google Drive, Gmail, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.KnowledgeSource"
                        }
                    ]
                },
                "state": {
                    "$ref": "#/definitions/types.KnowledgeState"
                },
                "updated": {
                    "type": "string"
                },
                "version": {
                    "description": "Version of the knowledge, will be used to separate different versions\nof the same knowledge when updating it. Format is\nYYYY-MM-DD-HH-MM-SS.",
                    "type": "string"
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.KnowledgeVersion"
                    }
                }
            }
        },
        "types.KnowledgeProgress": {
            "type": "object",
            "properties": {
                "elapsed_seconds": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "progress": {
                    "type": "integer"
                },
                "started_at": {
                    "type": "string"
                },
                "step": {
                    "type": "string"
                }
            }
        },
        "types.KnowledgeSearchResult": {
            "type": "object",
            "properties": {
                "duration_ms": {
                    "type": "integer"
                },
                "knowledge": {
                    "$ref": "#/definitions/types.Knowledge"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SessionRAGResult"
                    }
                }
            }
        },
        "types.KnowledgeSource": {
            "type": "object",
            "properties": {
                "filestore": {
                    "$ref": "#/definitions/types.KnowledgeSourceHelixFilestore"
                },
                "gcs": {
                    "$ref": "#/definitions/types.KnowledgeSourceGCS"
                },
                "s3": {
                    "$ref": "#/definitions/types.KnowledgeSourceS3"
                },
                "text": {
                    "type": "string"
                },
                "web": {
                    "$ref": "#/definitions/types.KnowledgeSourceWeb"
                }
            }
        },
        "types.KnowledgeSourceGCS": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "types.KnowledgeSourceHelixFilestore": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string"
                },
                "seed_zip_url": {
                    "type": "string"
                }
            }
        },
        "types.KnowledgeSourceS3": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "types.KnowledgeSourceWeb": {
            "type": "object",
            "properties": {
                "auth": {
                    "$ref": "#/definitions/types.KnowledgeSourceWebAuth"
                },
                "crawler": {
                    "description": "Additional options for the crawler",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.WebsiteCrawler"
                        }
                    ]
                },
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.KnowledgeSourceWebAuth": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.KnowledgeState": {
            "type": "string",
            "enum": [
                "preparing",
                "pending",
                "indexing",
                "ready",
                "error"
            ],
            "x-enum-varnames": [
                "KnowledgeStatePreparing",
                "KnowledgeStatePending",
                "KnowledgeStateIndexing",
                "KnowledgeStateReady",
                "KnowledgeStateError"
            ]
        },
        "types.KnowledgeVersion": {
            "type": "object",
            "properties": {
                "crawled_sources": {
                    "$ref": "#/definitions/types.CrawledSources"
                },
                "created": {
                    "type": "string"
                },
                "embeddings_model": {
                    "description": "Model used to embed the knowledge",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "knowledge_id": {
                    "type": "string"
                },
                "message": {
                    "description": "Set if something wrong happens",
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/types.KnowledgeState"
                },
                "updated": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "types.LLMCall": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "completion_cost": {
                    "type": "number"
                },
                "completion_tokens": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "duration_ms": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interaction_id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "original_request": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "prompt_cost": {
                    "type": "number"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "request": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "session_id": {
                    "type": "string"
                },
                "step": {
                    "$ref": "#/definitions/types.LLMCallStep"
                },
                "stream": {
                    "type": "boolean"
                },
                "total_cost": {
                    "description": "Total cost of the call (prompt and completion tokens)",
                    "type": "number"
                },
                "total_tokens": {
                    "type": "integer"
                },
                "updated": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.LLMCallStep": {
            "type": "string",
            "enum": [
                "default",
                "is_actionable",
                "prepare_api_request",
                "interpret_response",
                "generate_title",
                "summarize_conversation"
            ],
            "x-enum-varnames": [
                "LLMCallStepDefault",
                "LLMCallStepIsActionable",
                "LLMCallStepPrepareAPIRequest",
                "LLMCallStepInterpretResponse",
                "LLMCallStepGenerateTitle",
                "LLMCallStepSummarizeConversation"
            ]
        },
        "types.LoginRequest": {
            "type": "object",
            "properties": {
                "redirect_uri": {
                    "type": "string"
                }
            }
        },
        "types.ManualWorkConfig": {
            "type": "object",
            "properties": {
                "allow_anonymous": {
                    "type": "boolean"
                },
                "default_priority": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "types.Memory": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "contents": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "$ref": "#/definitions/types.MessageContent"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Interaction ID",
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/types.InteractionState"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.MessageContent": {
            "type": "object",
            "properties": {
                "content_type": {
                    "description": "text, image_url, multimodal_text",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.MessageContentType"
                        }
                    ]
                },
                "parts": {
                    "description": "Parts is a list of strings or objects. For example for text, it's a list of strings, for\nmulti-modal it can be an object:\n\"parts\": [\n\t\t{\n\t\t\t\t\"content_type\": \"image_asset_pointer\",\n\t\t\t\t\"asset_pointer\": \"file-service://file-28uHss2LgJ8HUEEVAnXa70Tg\",\n\t\t\t\t\"size_bytes\": 185427,\n\t\t\t\t\"width\": 2048,\n\t\t\t\t\"height\": 1020,\n\t\t\t\t\"fovea\": null,\n\t\t\t\t\"metadata\": null\n\t\t},\n\t\t\"what is in the image?\"\n]",
                    "type": "array",
                    "items": {}
                }
            }
        },
        "types.MessageContentType": {
            "type": "string",
            "enum": [
                "text"
            ],
            "x-enum-varnames": [
                "MessageContentTypeText"
            ]
        },
        "types.Modality": {
            "type": "string",
            "enum": [
                "text",
                "image",
                "file"
            ],
            "x-enum-varnames": [
                "ModalityText",
                "ModalityImage",
                "ModalityFile"
            ]
        },
        "types.Model": {
            "type": "object",
            "properties": {
                "allocated_gpu_count": {
                    "type": "integer"
                },
                "allocated_memory": {
                    "description": "EXPORTED ALLOCATION FIELDS: Set by NewModelForGPUAllocation based on scheduler's GPU allocation decision",
                    "type": "integer"
                },
                "allocated_per_gpu_memory": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "allocated_specific_gpus": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "allocation_configured": {
                    "description": "Safety flag",
                    "type": "boolean"
                },
                "auto_pull": {
                    "description": "Whether to automatically pull the model if missing in the runner",
                    "type": "boolean"
                },
                "concurrency": {
                    "description": "max concurrent requests per slot (0 = use global default)",
                    "type": "integer"
                },
                "context_length": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "hide": {
                    "type": "boolean"
                },
                "id": {
                    "description": "for example 'phi3.5:3.8b-mini-instruct-q8_0'",
                    "type": "string"
                },
                "memory": {
                    "description": "DATABASE FIELD: Admin-configured memory for VLLM models, MUST be 0 for Ollama models",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "prewarm": {
                    "description": "Whether to prewarm this model to fill free GPU memory on runners",
                    "type": "boolean"
                },
                "runtime": {
                    "$ref": "#/definitions/types.Runtime"
                },
                "runtime_args": {
                    "description": "Runtime-specific arguments (e.g., VLLM command line args)",
                    "type": "object",
                    "additionalProperties": true
                },
                "sort_order": {
                    "description": "Order for sorting models in UI (lower numbers appear first)",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/types.ModelType"
                },
                "updated": {
                    "type": "string"
                },
                "user_modified": {
                    "description": "User modification tracking - system defaults are automatically updated if this is false",
                    "type": "boolean"
                }
            }
        },
        "types.ModelInfo": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "context_length": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "input_modalities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Modality"
                    }
                },
                "max_completion_tokens": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "output_modalities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Modality"
                    }
                },
                "pricing": {
                    "$ref": "#/definitions/types.Pricing"
                },
                "provider_model_id": {
                    "type": "string"
                },
                "provider_slug": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "supported_parameters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "supports_reasoning": {
                    "type": "boolean"
                }
            }
        },
        "types.ModelType": {
            "type": "string",
            "enum": [
                "chat",
                "image",
                "embed"
            ],
            "x-enum-varnames": [
                "ModelTypeChat",
                "ModelTypeImage",
                "ModelTypeEmbed"
            ]
        },
        "types.OAuthConnection": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "OAuth token fields",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "profile": {
                    "$ref": "#/definitions/types.OAuthUserInfo"
                },
                "provider": {
                    "description": "Provider is a reference to the OAuth provider",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OAuthProvider"
                        }
                    ]
                },
                "provider_id": {
                    "type": "string"
                },
                "provider_user_email": {
                    "type": "string"
                },
                "provider_user_id": {
                    "description": "User details from the provider",
                    "type": "string"
                },
                "provider_username": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.OAuthConnectionTestResult": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "provider_details": {
                    "description": "Returned from the provider itself",
                    "type": "object",
                    "additionalProperties": {}
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "types.OAuthProvider": {
            "type": "object",
            "properties": {
                "auth_url": {
                    "description": "OAuth 2.0 fields",
                    "type": "string"
                },
                "callback_url": {
                    "type": "string"
                },
                "client_id": {
                    "description": "Common fields for all providers",
                    "type": "string"
                },
                "client_secret": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "creator_id": {
                    "description": "Who created/owns this provider",
                    "type": "string"
                },
                "creator_type": {
                    "$ref": "#/definitions/types.OwnerType"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "discovery_url": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "scopes": {
                    "description": "Misc configuration",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token_url": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.OAuthProviderType"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_info_url": {
                    "type": "string"
                }
            }
        },
        "types.OAuthProviderType": {
            "type": "string",
            "enum": [
                "",
                "atlassian",
                "google",
                "microsoft",
                "github",
                "slack",
                "linkedin",
                "hubspot",
                "custom"
            ],
            "x-enum-varnames": [
                "OAuthProviderTypeUnknown",
                "OAuthProviderTypeAtlassian",
                "OAuthProviderTypeGoogle",
                "OAuthProviderTypeMicrosoft",
                "OAuthProviderTypeGitHub",
                "OAuthProviderTypeSlack",
                "OAuthProviderTypeLinkedIn",
                "OAuthProviderTypeHubSpot",
                "OAuthProviderTypeCustom"
            ]
        },
        "types.OAuthUserInfo": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "raw": {
                    "description": "Raw JSON response from provider",
                    "type": "string"
                }
            }
        },
        "types.OpenAIMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "The message content",
                    "type": "string"
                },
                "role": {
                    "description": "The message role",
                    "type": "string"
                },
                "tool_call_id": {
                    "description": "For Role=tool prompts this should be set to the ID given in the assistant's prior request to call a tool.",
                    "type": "string"
                },
                "tool_calls": {
                    "description": "For Role=assistant prompts this may be set to the tool calls generated by the model, such as function calls.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openai.ToolCall"
                    }
                }
            }
        },
        "types.OpenAIModel": {
            "type": "object",
            "properties": {
                "context_length": {
                    "type": "integer"
                },
                "created": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "hide": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "model_info": {
                    "$ref": "#/definitions/types.ModelInfo"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "owned_by": {
                    "type": "string"
                },
                "parent": {
                    "type": "string"
                },
                "permission": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.OpenAIPermission"
                    }
                },
                "root": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.OpenAIModelsList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.OpenAIModel"
                    }
                }
            }
        },
        "types.OpenAIPermission": {
            "type": "object",
            "properties": {
                "allow_create_engine": {
                    "type": "boolean"
                },
                "allow_fine_tuning": {
                    "type": "boolean"
                },
                "allow_logprobs": {
                    "type": "boolean"
                },
                "allow_sampling": {
                    "type": "boolean"
                },
                "allow_search_indices": {
                    "type": "boolean"
                },
                "allow_view": {
                    "type": "boolean"
                },
                "created": {
                    "type": "integer"
                },
                "group": {},
                "id": {
                    "type": "string"
                },
                "is_blocking": {
                    "type": "boolean"
                },
                "object": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                }
            }
        },
        "types.OpenAIResponse": {
            "type": "object",
            "properties": {
                "choices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Choice"
                    }
                },
                "created": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Item"
                    }
                },
                "id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/types.OpenAIUsage"
                }
            }
        },
        "types.OpenAIUsage": {
            "type": "object",
            "properties": {
                "completion_tokens": {
                    "type": "integer"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "total_tokens": {
                    "type": "integer"
                }
            }
        },
        "types.Organization": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "memberships": {
                    "description": "Memberships in the organization",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.OrganizationMembership"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "description": "Who created the org",
                    "type": "string"
                },
                "roles": {
                    "description": "Roles in the organization",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Role"
                    }
                },
                "teams": {
                    "description": "Teams in the organization",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Team"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.OrganizationMembership": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "role": {
                    "description": "Role - the role of the user in the organization (owner or member)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OrganizationRole"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/types.User"
                },
                "user_id": {
                    "description": "composite key",
                    "type": "string"
                }
            }
        },
        "types.OrganizationRole": {
            "type": "string",
            "enum": [
                "owner",
                "member"
            ],
            "x-enum-comments": {
                "OrganizationRoleMember": "Can see every member and team in the organization and can create new apps",
                "OrganizationRoleOwner": "Has full administrative access to the entire organization."
            },
            "x-enum-varnames": [
                "OrganizationRoleOwner",
                "OrganizationRoleMember"
            ]
        },
        "types.OwnerType": {
            "type": "string",
            "enum": [
                "user",
                "runner",
                "system",
                "socket",
                "org"
            ],
            "x-enum-varnames": [
                "OwnerTypeUser",
                "OwnerTypeRunner",
                "OwnerTypeSystem",
                "OwnerTypeSocket",
                "OwnerTypeOrg"
            ]
        },
        "types.PaginatedInteractions": {
            "type": "object",
            "properties": {
                "interactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Interaction"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "types.PaginatedLLMCalls": {
            "type": "object",
            "properties": {
                "calls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.LLMCall"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "types.PaginatedSessionsList": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SessionSummary"
                    }
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "types.PaginatedUsersList": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.User"
                    }
                }
            }
        },
        "types.Pricing": {
            "type": "object",
            "properties": {
                "audio": {
                    "type": "string"
                },
                "completion": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "internal_reasoning": {
                    "type": "string"
                },
                "prompt": {
                    "type": "string"
                },
                "request": {
                    "type": "string"
                },
                "web_search": {
                    "type": "string"
                }
            }
        },
        "types.Provider": {
            "type": "string",
            "enum": [
                "openai",
                "togetherai",
                "anthropic",
                "helix",
                "vllm"
            ],
            "x-enum-varnames": [
                "ProviderOpenAI",
                "ProviderTogetherAI",
                "ProviderAnthropic",
                "ProviderHelix",
                "ProviderVLLM"
            ]
        },
        "types.ProviderEndpoint": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "api_key_file": {
                    "description": "Must be mounted to the container",
                    "type": "string"
                },
                "available_models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.OpenAIModel"
                    }
                },
                "base_url": {
                    "type": "string"
                },
                "billing_enabled": {
                    "type": "boolean"
                },
                "created": {
                    "type": "string"
                },
                "default": {
                    "description": "Set from environment variable",
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "endpoint_type": {
                    "description": "global, user (TODO: orgs, teams)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProviderEndpointType"
                        }
                    ]
                },
                "error": {
                    "type": "string"
                },
                "headers": {
                    "description": "If for example anthropic expects x-api-key and anthropic-version",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "models": {
                    "description": "Optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "owner_type": {
                    "description": "user, system, org",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OwnerType"
                        }
                    ]
                },
                "status": {
                    "description": "If we can't fetch models",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProviderEndpointStatus"
                        }
                    ]
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.ProviderEndpointStatus": {
            "type": "string",
            "enum": [
                "ok",
                "error",
                "loading",
                "disabled"
            ],
            "x-enum-varnames": [
                "ProviderEndpointStatusOK",
                "ProviderEndpointStatusError",
                "ProviderEndpointStatusLoading",
                "ProviderEndpointStatusDisabled"
            ]
        },
        "types.ProviderEndpointType": {
            "type": "string",
            "enum": [
                "global",
                "user",
                "org",
                "team"
            ],
            "x-enum-varnames": [
                "ProviderEndpointTypeGlobal",
                "ProviderEndpointTypeUser",
                "ProviderEndpointTypeOrg",
                "ProviderEndpointTypeTeam"
            ]
        },
        "types.Question": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "question": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.QuestionSet": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "description": "The organization this session belongs to, if any",
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Question"
                    }
                },
                "updated": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Creator of the question set",
                    "type": "string"
                }
            }
        },
        "types.RAGSettings": {
            "type": "object",
            "properties": {
                "chunk_overflow": {
                    "description": "the amount of overlap between chunks - will default to 32 bytes",
                    "type": "integer"
                },
                "chunk_size": {
                    "description": "the size of each text chunk - will default to 2000 bytes",
                    "type": "integer"
                },
                "delete_url": {
                    "description": "the URL of the delete endpoint (defaults to Helix RAG_DELETE_URL env var)",
                    "type": "string"
                },
                "disable_chunking": {
                    "description": "if true, we will not chunk the text and send the entire file to the RAG indexing endpoint",
                    "type": "boolean"
                },
                "disable_downloading": {
                    "description": "if true, we will not download the file and send the URL to the RAG indexing endpoint",
                    "type": "boolean"
                },
                "distance_function": {
                    "description": "this is one of l2, inner_product or cosine - will default to cosine",
                    "type": "string"
                },
                "enable_vision": {
                    "description": "if true, we will use the vision pipeline -- Future - might want to specify different pipelines",
                    "type": "boolean"
                },
                "index_url": {
                    "description": "RAG endpoint configuration if used with a custom RAG service",
                    "type": "string"
                },
                "prompt_template": {
                    "description": "the prompt template to use for the RAG query",
                    "type": "string"
                },
                "query_url": {
                    "description": "the URL of the query endpoint (defaults to Helix RAG_QUERY_URL env var)",
                    "type": "string"
                },
                "results_count": {
                    "description": "this is the max number of results to return - will default to 3",
                    "type": "integer"
                },
                "text_splitter": {
                    "description": "Markdown if empty or 'text'",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.TextSplitterType"
                        }
                    ]
                },
                "threshold": {
                    "description": "this is the threshold for a \"good\" answer - will default to 0.2",
                    "type": "number"
                },
                "typesense": {
                    "type": "object",
                    "properties": {
                        "api_key": {
                            "type": "string"
                        },
                        "collection": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "types.Resource": {
            "type": "string",
            "enum": [
                "Team",
                "Organization",
                "Role",
                "Membership",
                "MembershipRoleBinding",
                "Application",
                "AccessGrants",
                "Knowledge",
                "User",
                "*",
                "Dataset"
            ],
            "x-enum-varnames": [
                "ResourceTeam",
                "ResourceOrganization",
                "ResourceRole",
                "ResourceMembership",
                "ResourceMembershipRoleBinding",
                "ResourceApplication",
                "ResourceAccessGrants",
                "ResourceKnowledge",
                "ResourceUser",
                "ResourceAny",
                "ResourceTypeDataset"
            ]
        },
        "types.ResponseFormat": {
            "type": "object",
            "properties": {
                "schema": {
                    "$ref": "#/definitions/openai.ChatCompletionResponseFormatJSONSchema"
                },
                "type": {
                    "$ref": "#/definitions/types.ResponseFormatType"
                }
            }
        },
        "types.ResponseFormatType": {
            "type": "string",
            "enum": [
                "json_object",
                "text"
            ],
            "x-enum-varnames": [
                "ResponseFormatTypeJSONObject",
                "ResponseFormatTypeText"
            ]
        },
        "types.Role": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/github_com_helixml_helix_api_pkg_types.Config"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.Rule": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Action"
                    }
                },
                "effect": {
                    "$ref": "#/definitions/types.Effect"
                },
                "resource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Resource"
                    }
                }
            }
        },
        "types.RunAPIActionRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "types.RunAPIActionResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "response": {
                    "description": "Raw response from the API",
                    "type": "string"
                }
            }
        },
        "types.RunnerModelStatus": {
            "type": "object",
            "properties": {
                "download_in_progress": {
                    "type": "boolean"
                },
                "download_percent": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "memory": {
                    "description": "Memory requirement in bytes",
                    "type": "integer"
                },
                "model_id": {
                    "type": "string"
                },
                "runtime": {
                    "$ref": "#/definitions/types.Runtime"
                }
            }
        },
        "types.RunnerSlot": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "active_requests": {
                    "type": "integer"
                },
                "command_line": {
                    "type": "string"
                },
                "context_length": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "gpu_allocation_data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "gpu_index": {
                    "type": "integer"
                },
                "gpu_indices": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "string"
                },
                "max_concurrency": {
                    "type": "integer"
                },
                "memory_estimation_meta": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "model": {
                    "type": "string"
                },
                "model_memory_requirement": {
                    "type": "integer"
                },
                "ready": {
                    "type": "boolean"
                },
                "runner_id": {
                    "type": "string"
                },
                "runtime": {
                    "$ref": "#/definitions/types.Runtime"
                },
                "runtime_args": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "status": {
                    "type": "string"
                },
                "tensor_parallel_size": {
                    "type": "integer"
                },
                "updated": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "workload_data": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "types.RunnerStateView": {
            "type": "object",
            "properties": {
                "active_slots": {
                    "type": "integer"
                },
                "gpu_states": {
                    "description": "GPU index -\u003e state",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/types.GPUState"
                    }
                },
                "is_connected": {
                    "type": "boolean"
                },
                "runner_id": {
                    "type": "string"
                },
                "total_slots": {
                    "type": "integer"
                },
                "warm_slots": {
                    "type": "integer"
                }
            }
        },
        "types.Runtime": {
            "type": "string",
            "enum": [
                "ollama",
                "diffusers",
                "axolotl",
                "vllm"
            ],
            "x-enum-varnames": [
                "RuntimeOllama",
                "RuntimeDiffusers",
                "RuntimeAxolotl",
                "RuntimeVLLM"
            ]
        },
        "types.SSHKeyCreateRequest": {
            "type": "object",
            "required": [
                "key_name",
                "private_key",
                "public_key"
            ],
            "properties": {
                "key_name": {
                    "type": "string"
                },
                "private_key": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                }
            }
        },
        "types.SSHKeyGenerateRequest": {
            "type": "object",
            "required": [
                "key_name"
            ],
            "properties": {
                "key_name": {
                    "type": "string"
                },
                "key_type": {
                    "description": "\"ed25519\" or \"rsa\", defaults to ed25519",
                    "type": "string"
                }
            }
        },
        "types.SSHKeyGenerateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "key_name": {
                    "type": "string"
                },
                "private_key": {
                    "description": "Only returned once during generation",
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                }
            }
        },
        "types.SSHKeyResponse": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key_name": {
                    "type": "string"
                },
                "last_used": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                }
            }
        },
        "types.SchedulingDecision": {
            "type": "object",
            "properties": {
                "available_runners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created": {
                    "type": "string"
                },
                "decision_type": {
                    "$ref": "#/definitions/types.SchedulingDecisionType"
                },
                "id": {
                    "type": "string"
                },
                "memory_available": {
                    "type": "integer"
                },
                "memory_required": {
                    "type": "integer"
                },
                "mode": {
                    "$ref": "#/definitions/types.SessionMode"
                },
                "model_name": {
                    "type": "string"
                },
                "processing_time_ms": {
                    "type": "integer"
                },
                "queue_position": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                },
                "repeat_count": {
                    "type": "integer"
                },
                "runner_id": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "slot_id": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "total_slot_count": {
                    "type": "integer"
                },
                "warm_slot_count": {
                    "type": "integer"
                },
                "workload_id": {
                    "type": "string"
                }
            }
        },
        "types.SchedulingDecisionType": {
            "type": "string",
            "enum": [
                "queued",
                "reuse_warm_slot",
                "create_new_slot",
                "evict_stale_slot",
                "rejected",
                "error",
                "unschedulable"
            ],
            "x-enum-comments": {
                "SchedulingDecisionTypeCreateNewSlot": "Started new model instance",
                "SchedulingDecisionTypeError": "Error during scheduling",
                "SchedulingDecisionTypeEvictStaleSlot": "Evicted stale slot to free memory",
                "SchedulingDecisionTypeQueued": "Added to queue",
                "SchedulingDecisionTypeRejected": "Rejected (insufficient resources, etc.)",
                "SchedulingDecisionTypeReuseWarmSlot": "Reused existing warm model instance",
                "SchedulingDecisionTypeUnschedulable": "Cannot be scheduled (no warm slots available)"
            },
            "x-enum-varnames": [
                "SchedulingDecisionTypeQueued",
                "SchedulingDecisionTypeReuseWarmSlot",
                "SchedulingDecisionTypeCreateNewSlot",
                "SchedulingDecisionTypeEvictStaleSlot",
                "SchedulingDecisionTypeRejected",
                "SchedulingDecisionTypeError",
                "SchedulingDecisionTypeUnschedulable"
            ]
        },
        "types.SchedulingEvent": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "event_type": {
                    "description": "\"slot_created\", \"slot_deleted\", \"eviction\", \"stabilization_start\", \"stabilization_end\"",
                    "type": "string"
                },
                "gpu_indices": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "memory_mb": {
                    "type": "integer"
                },
                "model_name": {
                    "type": "string"
                },
                "runtime": {
                    "type": "string"
                },
                "slot_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "types.Secret": {
            "type": "object",
            "properties": {
                "app_id": {
                    "description": "optional, if set, the secret will be available to the specified app",
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "ownerType": {
                    "$ref": "#/definitions/types.OwnerType"
                },
                "updated": {
                    "type": "string"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.ServerConfigForFrontend": {
            "type": "object",
            "properties": {
                "apps_enabled": {
                    "type": "boolean"
                },
                "billing_enabled": {
                    "description": "Charging for usage",
                    "type": "boolean"
                },
                "deployment_id": {
                    "type": "string"
                },
                "disable_llm_call_logging": {
                    "type": "boolean"
                },
                "eval_user_id": {
                    "type": "string"
                },
                "filestore_prefix": {
                    "description": "used to prepend onto raw filestore paths to download files\nthe filestore path will have the user info in it - i.e.\nit's a low level filestore path\nif we are using an object storage thing - then this URL\ncan be the prefix to the bucket",
                    "type": "string"
                },
                "google_analytics_frontend": {
                    "type": "string"
                },
                "latest_version": {
                    "type": "string"
                },
                "license": {
                    "$ref": "#/definitions/types.FrontendLicenseInfo"
                },
                "moonlight_web_mode": {
                    "description": "\"single\" or \"multi\" - determines streaming architecture",
                    "type": "string"
                },
                "organizations_create_enabled_for_non_admins": {
                    "type": "boolean"
                },
                "rudderstack_data_plane_url": {
                    "type": "string"
                },
                "rudderstack_write_key": {
                    "type": "string"
                },
                "sentry_dsn_frontend": {
                    "type": "string"
                },
                "stripe_enabled": {
                    "description": "Stripe top-ups enabled",
                    "type": "boolean"
                },
                "tools_enabled": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "types.Session": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "named config for backward compat",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SessionMetadata"
                        }
                    ]
                },
                "created": {
                    "type": "string"
                },
                "generation_id": {
                    "description": "Current generation ID",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "interactions": {
                    "description": "for now we just whack the entire history of the interaction in here, json\nstyle",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Interaction"
                    }
                },
                "lora_dir": {
                    "description": "if type == finetune, we record a filestore path to e.g. lora file here\ncurrently the only place you can do inference on a finetune is within the\nsession where the finetune was generated",
                    "type": "string"
                },
                "mode": {
                    "description": "e.g. inference, finetune",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SessionMode"
                        }
                    ]
                },
                "model_name": {
                    "type": "string"
                },
                "name": {
                    "description": "name that goes in the UI - ideally autogenerated by AI but for now can be\nnamed manually",
                    "type": "string"
                },
                "organization_id": {
                    "description": "the organization this session belongs to, if any",
                    "type": "string"
                },
                "owner": {
                    "description": "uuid of owner entity",
                    "type": "string"
                },
                "owner_type": {
                    "description": "e.g. user, system, org",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OwnerType"
                        }
                    ]
                },
                "parent_app": {
                    "description": "the app this session was spawned from\nTODO: rename to AppID",
                    "type": "string"
                },
                "parent_session": {
                    "type": "string"
                },
                "provider": {
                    "description": "huggingface model name e.g. mistralai/Mistral-7B-Instruct-v0.1 or\nstabilityai/stable-diffusion-xl-base-1.0",
                    "type": "string"
                },
                "trigger": {
                    "type": "string"
                },
                "type": {
                    "description": "e.g. text, image",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SessionType"
                        }
                    ]
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.SessionChatRequest": {
            "type": "object",
            "properties": {
                "agent_type": {
                    "description": "Agent type: \"helix\" or \"zed_external\"",
                    "type": "string"
                },
                "app_id": {
                    "description": "Assign the session settings from the specified app",
                    "type": "string"
                },
                "assistant_id": {
                    "description": "Which assistant are we speaking to?",
                    "type": "string"
                },
                "external_agent_config": {
                    "description": "Configuration for external agents",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ExternalAgentConfig"
                        }
                    ]
                },
                "interaction_id": {
                    "description": "If empty, we will start a new interaction",
                    "type": "string"
                },
                "lora_dir": {
                    "type": "string"
                },
                "messages": {
                    "description": "Initial messages",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Message"
                    }
                },
                "model": {
                    "description": "The model to use",
                    "type": "string"
                },
                "organization_id": {
                    "description": "The organization this session belongs to, if any",
                    "type": "string"
                },
                "provider": {
                    "description": "The provider to use",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Provider"
                        }
                    ]
                },
                "regenerate": {
                    "description": "If true, we will regenerate the response for the last message",
                    "type": "boolean"
                },
                "session_id": {
                    "description": "If empty, we will start a new session",
                    "type": "string"
                },
                "stream": {
                    "description": "If true, we will stream the response",
                    "type": "boolean"
                },
                "system": {
                    "description": "System message, only applicable when starting a new session",
                    "type": "string"
                },
                "tools": {
                    "description": "Available tools to use in the session",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "e.g. text, image",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SessionType"
                        }
                    ]
                }
            }
        },
        "types.SessionMetadata": {
            "type": "object",
            "properties": {
                "active_tools": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "agent_type": {
                    "description": "Agent type: \"helix\" or \"zed_external\"",
                    "type": "string"
                },
                "agent_video_height": {
                    "description": "Streaming resolution height (default: 1600)",
                    "type": "integer"
                },
                "agent_video_refresh_rate": {
                    "description": "Streaming refresh rate (default: 60)",
                    "type": "integer"
                },
                "agent_video_width": {
                    "description": "Video settings for external agent sessions (Phase 3.5)",
                    "type": "integer"
                },
                "app_query_params": {
                    "description": "Passing through user defined app params",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "assistant_id": {
                    "description": "which assistant are we talking to?",
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "document_group_id": {
                    "type": "string"
                },
                "document_ids": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "eval_automatic_reason": {
                    "type": "string"
                },
                "eval_automatic_score": {
                    "type": "string"
                },
                "eval_manual_reason": {
                    "type": "string"
                },
                "eval_manual_score": {
                    "type": "string"
                },
                "eval_original_user_prompts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "eval_run_id": {
                    "description": "Evals are cool. Scores are strings of floats so we can distinguish \"\"\n(not rated) from \"0.0\"",
                    "type": "string"
                },
                "eval_user_reason": {
                    "type": "string"
                },
                "eval_user_score": {
                    "type": "string"
                },
                "external_agent_config": {
                    "description": "Configuration for external agents",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ExternalAgentConfig"
                        }
                    ]
                },
                "external_agent_id": {
                    "description": "NEW: External agent ID for this session",
                    "type": "string"
                },
                "external_agent_status": {
                    "description": "NEW: External agent status (running, stopped, terminated_idle)",
                    "type": "string"
                },
                "helix_version": {
                    "type": "string"
                },
                "implementation_task_index": {
                    "description": "Index of implementation task this session handles",
                    "type": "integer"
                },
                "manually_review_questions": {
                    "type": "boolean"
                },
                "phase": {
                    "description": "NEW: SpecTask phase (planning, implementation)",
                    "type": "string"
                },
                "priority": {
                    "type": "boolean"
                },
                "rag_enabled": {
                    "description": "these settings control which features of a session we want to use\neven if we have a Lora file and RAG indexed prepared\nwe might choose to not use them (this will help our eval framework know what works the best)\nwe well as activate RAG - we also get to control some properties, e.g. which distance function to use,\nand what the threshold for a \"good\" answer is",
                    "type": "boolean"
                },
                "rag_settings": {
                    "$ref": "#/definitions/types.RAGSettings"
                },
                "session_rag_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SessionRAGResult"
                    }
                },
                "session_role": {
                    "description": "\"planning\", \"implementation\", \"coordination\"",
                    "type": "string"
                },
                "spec_task_id": {
                    "description": "Multi-session SpecTask context",
                    "type": "string"
                },
                "stream": {
                    "type": "boolean"
                },
                "system_prompt": {
                    "type": "string"
                },
                "text_finetune_enabled": {
                    "description": "without any user input, this will default to true",
                    "type": "boolean"
                },
                "uploaded_data_entity_id": {
                    "description": "when we do fine tuning or RAG, we need to know which data entity we used",
                    "type": "string"
                },
                "wolf_lobby_id": {
                    "description": "Wolf lobby ID for streaming",
                    "type": "string"
                },
                "wolf_lobby_pin": {
                    "description": "PIN for Wolf lobby access (Phase 3: Multi-tenancy)",
                    "type": "string"
                },
                "work_session_id": {
                    "description": "ID of associated WorkSession",
                    "type": "string"
                },
                "zed_instance_id": {
                    "description": "Associated Zed instance ID",
                    "type": "string"
                },
                "zed_thread_id": {
                    "description": "Associated Zed thread ID",
                    "type": "string"
                }
            }
        },
        "types.SessionMode": {
            "type": "string",
            "enum": [
                "",
                "inference",
                "finetune",
                "action"
            ],
            "x-enum-comments": {
                "SessionModeAction": "Running tool actions (e.g. API, function calls)"
            },
            "x-enum-varnames": [
                "SessionModeNone",
                "SessionModeInference",
                "SessionModeFinetune",
                "SessionModeAction"
            ]
        },
        "types.SessionRAGResult": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "content_offset": {
                    "type": "integer"
                },
                "distance": {
                    "type": "number"
                },
                "document_group_id": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interaction_id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "session_id": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "types.SessionSummary": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "created": {
                    "description": "these are all values of the last interaction",
                    "type": "string"
                },
                "model_name": {
                    "description": "InteractionID string      `json:\"interaction_id\"`",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "priority": {
                    "type": "boolean"
                },
                "session_id": {
                    "type": "string"
                },
                "summary": {
                    "description": "this is either the prompt or the summary of the training data",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/types.SessionType"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.SessionType": {
            "type": "string",
            "enum": [
                "",
                "text",
                "image"
            ],
            "x-enum-varnames": [
                "SessionTypeNone",
                "SessionTypeText",
                "SessionTypeImage"
            ]
        },
        "types.SkillDefinition": {
            "type": "object",
            "properties": {
                "baseUrl": {
                    "description": "API configuration",
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "configurable": {
                    "description": "Metadata",
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "filePath": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "icon": {
                    "$ref": "#/definitions/types.SkillIcon"
                },
                "id": {
                    "type": "string"
                },
                "loadedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oauthProvider": {
                    "description": "OAuth configuration",
                    "type": "string"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "requiredParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SkillRequiredParameter"
                    }
                },
                "schema": {
                    "type": "string"
                },
                "skipUnknownKeys": {
                    "description": "if true, unknown keys in the response body will be removed before\nreturning to the agent for interpretation",
                    "type": "boolean"
                },
                "systemPrompt": {
                    "type": "string"
                },
                "transformOutput": {
                    "description": "Transform JSON into readable text to reduce the\nsize of the response body",
                    "type": "boolean"
                }
            }
        },
        "types.SkillIcon": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "e.g., \"GitHub\", \"Google\"",
                    "type": "string"
                },
                "type": {
                    "description": "e.g., \"material-ui\", \"custom\"",
                    "type": "string"
                }
            }
        },
        "types.SkillRequiredParameter": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "description": "\"query\", \"header\", \"path\"",
                    "type": "string"
                }
            }
        },
        "types.SkillsListResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SkillDefinition"
                    }
                }
            }
        },
        "types.SlackTrigger": {
            "type": "object",
            "properties": {
                "app_token": {
                    "type": "string"
                },
                "bot_token": {
                    "type": "string"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "types.SpecApprovalResponse": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "approved_at": {
                    "type": "string"
                },
                "approved_by": {
                    "type": "string"
                },
                "changes": {
                    "description": "Specific requested changes",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comments": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "types.SpecTask": {
            "type": "object",
            "properties": {
                "attached_repositories": {
                    "description": "Git repository attachments (multiple repos can be attached)",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "branch_name": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "description": "Metadata",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "estimated_hours": {
                    "description": "Simple tracking",
                    "type": "integer"
                },
                "external_agent_id": {
                    "description": "External agent tracking (single agent per SpecTask, spans multiple sessions)",
                    "type": "string"
                },
                "helix_app_id": {
                    "description": "NEW: Single Helix Agent for entire workflow (App type in code)",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "implementation_agent": {
                    "type": "string"
                },
                "implementation_plan": {
                    "description": "Discrete tasks breakdown (markdown)",
                    "type": "string"
                },
                "implementation_session_id": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                },
                "original_prompt": {
                    "description": "Kiro's actual approach: simple, human-readable artifacts",
                    "type": "string"
                },
                "planning_session_id": {
                    "description": "Session tracking (same agent, different Helix sessions per phase)",
                    "type": "string"
                },
                "primary_repository_id": {
                    "type": "string"
                },
                "priority": {
                    "description": "\"low\", \"medium\", \"high\", \"critical\"",
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "project_path": {
                    "type": "string"
                },
                "requirements_spec": {
                    "description": "User stories + EARS acceptance criteria (markdown)",
                    "type": "string"
                },
                "spec_agent": {
                    "description": "Legacy fields (deprecated, keeping for backward compatibility)",
                    "type": "string"
                },
                "spec_approved_at": {
                    "type": "string"
                },
                "spec_approved_by": {
                    "description": "Approval tracking",
                    "type": "string"
                },
                "spec_revision_count": {
                    "description": "Number of spec revisions requested",
                    "type": "integer"
                },
                "spec_session_id": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "description": "Spec-driven workflow statuses - see constants below",
                    "type": "string"
                },
                "technical_design": {
                    "description": "Design document (markdown)",
                    "type": "string"
                },
                "type": {
                    "description": "\"feature\", \"bug\", \"refactor\"",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "zed_instance_id": {
                    "description": "Multi-session support",
                    "type": "string"
                }
            }
        },
        "types.SpecTaskActivityLogEntry": {
            "type": "object",
            "properties": {
                "activity_type": {
                    "$ref": "#/definitions/types.SpecTaskActivityType"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "spec_task_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "work_session_id": {
                    "type": "string"
                }
            }
        },
        "types.SpecTaskActivityType": {
            "type": "string",
            "enum": [
                "session_created",
                "session_completed",
                "session_spawned",
                "task_completed",
                "zed_connected",
                "zed_disconnected",
                "phase_transition"
            ],
            "x-enum-varnames": [
                "SpecTaskActivitySessionCreated",
                "SpecTaskActivitySessionCompleted",
                "SpecTaskActivitySessionSpawned",
                "SpecTaskActivityTaskCompleted",
                "SpecTaskActivityZedConnected",
                "SpecTaskActivityZedDisconnected",
                "SpecTaskActivityPhaseTransition"
            ]
        },
        "types.SpecTaskImplementationSessionsCreateRequest": {
            "type": "object",
            "required": [
                "spec_task_id"
            ],
            "properties": {
                "auto_create_sessions": {
                    "type": "boolean",
                    "default": true
                },
                "project_path": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "workspace_config": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "types.SpecTaskImplementationStatus": {
            "type": "string",
            "enum": [
                "pending",
                "assigned",
                "in_progress",
                "completed",
                "blocked"
            ],
            "x-enum-varnames": [
                "SpecTaskImplementationStatusPending",
                "SpecTaskImplementationStatusAssigned",
                "SpecTaskImplementationStatusInProgress",
                "SpecTaskImplementationStatusCompleted",
                "SpecTaskImplementationStatusBlocked"
            ]
        },
        "types.SpecTaskImplementationTask": {
            "type": "object",
            "properties": {
                "acceptance_criteria": {
                    "type": "string"
                },
                "assigned_work_session": {
                    "$ref": "#/definitions/types.SpecTaskWorkSession"
                },
                "assigned_work_session_id": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "dependencies": {
                    "description": "Array of other task indices",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "estimated_effort": {
                    "description": "'small', 'medium', 'large'",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "index": {
                    "description": "Order within the plan",
                    "type": "integer"
                },
                "priority": {
                    "type": "integer"
                },
                "spec_task": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SpecTask"
                        }
                    ]
                },
                "spec_task_id": {
                    "type": "string"
                },
                "status": {
                    "description": "Implementation tracking",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SpecTaskImplementationStatus"
                        }
                    ]
                },
                "title": {
                    "description": "Task details",
                    "type": "string"
                }
            }
        },
        "types.SpecTaskImplementationTaskListResponse": {
            "type": "object",
            "properties": {
                "implementation_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SpecTaskImplementationTask"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "types.SpecTaskMultiSessionOverviewResponse": {
            "type": "object",
            "properties": {
                "active_sessions": {
                    "type": "integer"
                },
                "completed_sessions": {
                    "type": "integer"
                },
                "implementation_tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SpecTaskImplementationTask"
                    }
                },
                "last_activity": {
                    "type": "string"
                },
                "spec_task": {
                    "$ref": "#/definitions/types.SpecTask"
                },
                "work_session_count": {
                    "type": "integer"
                },
                "work_sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SpecTaskWorkSession"
                    }
                },
                "zed_instance_id": {
                    "type": "string"
                },
                "zed_thread_count": {
                    "type": "integer"
                }
            }
        },
        "types.SpecTaskPhase": {
            "type": "string",
            "enum": [
                "planning",
                "implementation",
                "validation"
            ],
            "x-enum-varnames": [
                "SpecTaskPhasePlanning",
                "SpecTaskPhaseImplementation",
                "SpecTaskPhaseValidation"
            ]
        },
        "types.SpecTaskProgressResponse": {
            "type": "object",
            "properties": {
                "active_work_sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SpecTaskWorkSession"
                    }
                },
                "implementation_progress": {
                    "description": "Task index -\u003e progress",
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "overall_progress": {
                    "description": "0.0 to 1.0",
                    "type": "number"
                },
                "phase_progress": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "recent_activity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SpecTaskActivityLogEntry"
                    }
                },
                "spec_task": {
                    "$ref": "#/definitions/types.SpecTask"
                }
            }
        },
        "types.SpecTaskUpdateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.SpecTaskWorkSession": {
            "type": "object",
            "properties": {
                "agent_config": {
                    "description": "Configuration",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "description": "State tracking",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "environment_config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "helix_session_id": {
                    "description": "1:1 mapping",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "implementation_task_description": {
                    "type": "string"
                },
                "implementation_task_index": {
                    "type": "integer"
                },
                "implementation_task_title": {
                    "description": "Implementation context (parsed from ImplementationPlan)",
                    "type": "string"
                },
                "name": {
                    "description": "Work session details",
                    "type": "string"
                },
                "parent_work_session_id": {
                    "description": "Relationships for spawning/branching",
                    "type": "string"
                },
                "phase": {
                    "$ref": "#/definitions/types.SpecTaskPhase"
                },
                "spawned_by_session_id": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.SpecTaskWorkSessionStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SpecTaskWorkSessionDetailResponse": {
            "type": "object",
            "properties": {
                "child_work_sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SpecTaskWorkSession"
                    }
                },
                "helix_session": {
                    "$ref": "#/definitions/types.Session"
                },
                "implementation_task": {
                    "$ref": "#/definitions/types.SpecTaskImplementationTask"
                },
                "spec_task": {
                    "$ref": "#/definitions/types.SpecTask"
                },
                "work_session": {
                    "$ref": "#/definitions/types.SpecTaskWorkSession"
                },
                "zed_thread": {
                    "$ref": "#/definitions/types.SpecTaskZedThread"
                }
            }
        },
        "types.SpecTaskWorkSessionListResponse": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "work_sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SpecTaskWorkSession"
                    }
                }
            }
        },
        "types.SpecTaskWorkSessionSpawnRequest": {
            "type": "object",
            "required": [
                "name",
                "parent_work_session_id"
            ],
            "properties": {
                "agent_config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "description": {
                    "type": "string"
                },
                "environment_config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "parent_work_session_id": {
                    "type": "string"
                }
            }
        },
        "types.SpecTaskWorkSessionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "active",
                "completed",
                "failed",
                "cancelled",
                "blocked"
            ],
            "x-enum-varnames": [
                "SpecTaskWorkSessionStatusPending",
                "SpecTaskWorkSessionStatusActive",
                "SpecTaskWorkSessionStatusCompleted",
                "SpecTaskWorkSessionStatusFailed",
                "SpecTaskWorkSessionStatusCancelled",
                "SpecTaskWorkSessionStatusBlocked"
            ]
        },
        "types.SpecTaskWorkSessionUpdateRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "status": {
                    "enum": [
                        "pending",
                        "active",
                        "completed",
                        "failed",
                        "cancelled",
                        "blocked"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SpecTaskWorkSessionStatus"
                        }
                    ]
                }
            }
        },
        "types.SpecTaskZedStatus": {
            "type": "string",
            "enum": [
                "pending",
                "active",
                "disconnected",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "SpecTaskZedStatusPending",
                "SpecTaskZedStatusActive",
                "SpecTaskZedStatusDisconnected",
                "SpecTaskZedStatusCompleted",
                "SpecTaskZedStatusFailed"
            ]
        },
        "types.SpecTaskZedThread": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_activity_at": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.SpecTaskZedStatus"
                },
                "thread_config": {
                    "description": "Thread-specific configuration",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "work_session": {
                    "description": "Relationships (loaded via joins, not stored in database)\nNOTE: We store IDs, not nested objects, to avoid circular references\nUse GORM preloading: db.Preload(\"WorkSession\").Find(\u0026zedThread)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SpecTaskWorkSession"
                        }
                    ]
                },
                "work_session_id": {
                    "description": "1:1 mapping",
                    "type": "string"
                },
                "zed_thread_id": {
                    "type": "string"
                }
            }
        },
        "types.SpecTaskZedThreadCreateRequest": {
            "type": "object",
            "required": [
                "work_session_id"
            ],
            "properties": {
                "thread_config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "work_session_id": {
                    "type": "string"
                }
            }
        },
        "types.SpecTaskZedThreadListResponse": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "zed_threads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SpecTaskZedThread"
                    }
                }
            }
        },
        "types.SpecTaskZedThreadUpdateRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "pending",
                        "active",
                        "disconnected",
                        "completed",
                        "failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.SpecTaskZedStatus"
                        }
                    ]
                },
                "thread_config": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "types.StepInfo": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "details": {
                    "description": "That were used to call the tool",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.StepInfoDetails"
                        }
                    ]
                },
                "duration_ms": {
                    "description": "How long the step took in milliseconds (useful for API calls, database queries, etc.)",
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "icon": {
                    "description": "Either Material UI icon, emoji or SVG. Leave empty for default",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interaction_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.StepInfoDetails": {
            "type": "object",
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "types.SystemSettingsRequest": {
            "type": "object",
            "properties": {
                "huggingface_token": {
                    "type": "string"
                }
            }
        },
        "types.SystemSettingsResponse": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "huggingface_token_set": {
                    "description": "Sensitive fields are masked",
                    "type": "boolean"
                },
                "huggingface_token_source": {
                    "description": "\"database\", \"environment\", or \"none\"",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.Team": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "memberships": {
                    "description": "Memberships in the team",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.TeamMembership"
                    }
                },
                "name": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.TeamMembership": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "team": {
                    "$ref": "#/definitions/types.Team"
                },
                "team_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "description": "extra data fields (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "composite key",
                    "type": "string"
                }
            }
        },
        "types.TestStep": {
            "type": "object",
            "properties": {
                "expected_output": {
                    "type": "string"
                },
                "prompt": {
                    "type": "string"
                }
            }
        },
        "types.TextSplitterType": {
            "type": "string",
            "enum": [
                "markdown",
                "text"
            ],
            "x-enum-varnames": [
                "TextSplitterTypeMarkdown",
                "TextSplitterTypeText"
            ]
        },
        "types.TokenType": {
            "type": "string",
            "enum": [
                "",
                "runner",
                "keycloak",
                "oidc",
                "api_key",
                "socket"
            ],
            "x-enum-varnames": [
                "TokenTypeNone",
                "TokenTypeRunner",
                "TokenTypeKeycloak",
                "TokenTypeOIDC",
                "TokenTypeAPIKey",
                "TokenTypeSocket"
            ]
        },
        "types.Tool": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/types.ToolConfig"
                },
                "description": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "system_prompt": {
                    "description": "E.g. As a restaurant expert, you provide personalized restaurant recommendations",
                    "type": "string"
                },
                "tool_type": {
                    "$ref": "#/definitions/types.ToolType"
                }
            }
        },
        "types.ToolAPIAction": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "types.ToolAPIConfig": {
            "type": "object",
            "properties": {
                "actions": {
                    "description": "Read-only, parsed from schema on creation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ToolAPIAction"
                    }
                },
                "headers": {
                    "description": "Headers (authentication, etc)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "model": {
                    "type": "string"
                },
                "oauth_provider": {
                    "description": "OAuth configuration",
                    "type": "string"
                },
                "oauth_scopes": {
                    "description": "Required OAuth scopes for this API",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path_params": {
                    "description": "Path parameters that will be substituted in URLs",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "query": {
                    "description": "Query parameters that will be always set",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "request_prep_template": {
                    "description": "Template for request preparation, leave empty for default",
                    "type": "string"
                },
                "response_error_template": {
                    "description": "Template for error response, leave empty for default",
                    "type": "string"
                },
                "response_success_template": {
                    "description": "Template for successful response, leave empty for default",
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                },
                "skip_unknown_keys": {
                    "description": "if true, unknown keys in the response body will be removed before\nreturning to the agent for interpretation",
                    "type": "boolean"
                },
                "system_prompt": {
                    "description": "System prompt to guide the AI when using this API",
                    "type": "string"
                },
                "transform_output": {
                    "description": "Transform JSON into readable text to reduce the\nsize of the response body",
                    "type": "boolean"
                },
                "url": {
                    "description": "Server override",
                    "type": "string"
                }
            }
        },
        "types.ToolAzureDevOpsConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "organization_url": {
                    "type": "string"
                },
                "personal_access_token": {
                    "type": "string"
                }
            }
        },
        "types.ToolBrowserConfig": {
            "type": "object",
            "properties": {
                "cache": {
                    "description": "If true, the browser will cache the results of the tool call",
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "markdown_post_processing": {
                    "description": "If true, the browser will return the HTML as markdown",
                    "type": "boolean"
                },
                "no_browser": {
                    "description": "If true, the browser will not be used to open URLs, it will be a simple GET request",
                    "type": "boolean"
                },
                "process_output": {
                    "description": "If true, the browser will process the output of the tool call before returning it to the top loop. Useful for skills that return structured data such as Browser,",
                    "type": "boolean"
                }
            }
        },
        "types.ToolCalculatorConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "types.ToolConfig": {
            "type": "object",
            "properties": {
                "api": {
                    "$ref": "#/definitions/types.ToolAPIConfig"
                },
                "azure_devops": {
                    "$ref": "#/definitions/types.ToolAzureDevOpsConfig"
                },
                "browser": {
                    "$ref": "#/definitions/types.ToolBrowserConfig"
                },
                "calculator": {
                    "$ref": "#/definitions/types.ToolCalculatorConfig"
                },
                "email": {
                    "$ref": "#/definitions/types.ToolEmailConfig"
                },
                "mcp": {
                    "$ref": "#/definitions/types.ToolMCPClientConfig"
                },
                "web_search": {
                    "$ref": "#/definitions/types.ToolWebSearchConfig"
                },
                "zapier": {
                    "$ref": "#/definitions/types.ToolZapierConfig"
                }
            }
        },
        "types.ToolEmailConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "template_example": {
                    "type": "string"
                }
            }
        },
        "types.ToolMCPClientConfig": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "oauth_provider": {
                    "type": "string"
                },
                "oauth_scopes": {
                    "description": "Required OAuth scopes for this API",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Tool"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "types.ToolType": {
            "type": "string",
            "enum": [
                "api",
                "browser",
                "zapier",
                "calculator",
                "email",
                "web_search",
                "azure_devops",
                "mcp"
            ],
            "x-enum-varnames": [
                "ToolTypeAPI",
                "ToolTypeBrowser",
                "ToolTypeZapier",
                "ToolTypeCalculator",
                "ToolTypeEmail",
                "ToolTypeWebSearch",
                "ToolTypeAzureDevOps",
                "ToolTypeMCP"
            ]
        },
        "types.ToolWebSearchConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "max_results": {
                    "type": "integer"
                }
            }
        },
        "types.ToolZapierConfig": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                }
            }
        },
        "types.Trigger": {
            "type": "object",
            "properties": {
                "agent_work_queue": {
                    "$ref": "#/definitions/types.AgentWorkQueueTrigger"
                },
                "azure_devops": {
                    "$ref": "#/definitions/types.AzureDevOpsTrigger"
                },
                "crisp": {
                    "$ref": "#/definitions/types.CrispTrigger"
                },
                "cron": {
                    "$ref": "#/definitions/types.CronTrigger"
                },
                "discord": {
                    "$ref": "#/definitions/types.DiscordTrigger"
                },
                "slack": {
                    "$ref": "#/definitions/types.SlackTrigger"
                }
            }
        },
        "types.TriggerConfiguration": {
            "type": "object",
            "properties": {
                "app_id": {
                    "description": "App ID",
                    "type": "string"
                },
                "archived": {
                    "type": "boolean"
                },
                "created": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Name of the trigger configuration",
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                },
                "organization_id": {
                    "description": "Organization ID",
                    "type": "string"
                },
                "owner": {
                    "description": "User ID",
                    "type": "string"
                },
                "owner_type": {
                    "description": "User or Organization",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OwnerType"
                        }
                    ]
                },
                "status": {
                    "type": "string"
                },
                "trigger": {
                    "$ref": "#/definitions/types.Trigger"
                },
                "trigger_type": {
                    "$ref": "#/definitions/types.TriggerType"
                },
                "updated": {
                    "type": "string"
                },
                "webhook_url": {
                    "description": "Webhook URL for the trigger configuration, applicable to webhook type triggers like Azure DevOps, GitHub, etc.",
                    "type": "string"
                }
            }
        },
        "types.TriggerExecuteResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "types.TriggerExecution": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "duration_ms": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Will most likely match session name, based on the trigger name at the time of execution",
                    "type": "string"
                },
                "output": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/types.TriggerExecutionStatus"
                },
                "trigger_configuration_id": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.TriggerExecutionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "running",
                "success",
                "error"
            ],
            "x-enum-varnames": [
                "TriggerExecutionStatusPending",
                "TriggerExecutionStatusRunning",
                "TriggerExecutionStatusSuccess",
                "TriggerExecutionStatusError"
            ]
        },
        "types.TriggerStatus": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/types.TriggerType"
                }
            }
        },
        "types.TriggerType": {
            "type": "string",
            "enum": [
                "agent_work_queue",
                "slack",
                "crisp",
                "azure_devops",
                "cron"
            ],
            "x-enum-varnames": [
                "TriggerTypeAgentWorkQueue",
                "TriggerTypeSlack",
                "TriggerTypeCrisp",
                "TriggerTypeAzureDevOps",
                "TriggerTypeCron"
            ]
        },
        "types.UpdateOrganizationMemberRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "$ref": "#/definitions/types.OrganizationRole"
                }
            }
        },
        "types.UpdateProviderEndpoint": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "api_key_file": {
                    "description": "Must be mounted to the container",
                    "type": "string"
                },
                "base_url": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endpoint_type": {
                    "description": "global, user (TODO: orgs, teams)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProviderEndpointType"
                        }
                    ]
                },
                "headers": {
                    "description": "Custom headers for the endpoint",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "models": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.UpdateTeamRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "types.Usage": {
            "type": "object",
            "properties": {
                "completion_tokens": {
                    "type": "integer"
                },
                "duration_ms": {
                    "description": "How long the request took in milliseconds",
                    "type": "integer"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "total_tokens": {
                    "type": "integer"
                }
            }
        },
        "types.User": {
            "type": "object",
            "properties": {
                "admin": {
                    "description": "if the ID of the user is contained in the env setting",
                    "type": "boolean"
                },
                "app_id": {
                    "description": "if the token is associated with an app",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deactivated": {
                    "type": "boolean"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "sb": {
                    "type": "boolean"
                },
                "token": {
                    "description": "the actual token used and its type",
                    "type": "string"
                },
                "token_type": {
                    "description": "none, runner. keycloak, api_key",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.TokenType"
                        }
                    ]
                },
                "type": {
                    "description": "these are set by the keycloak user based on the token\nif it's an app token - the keycloak user is loaded from the owner of the app\nif it's a runner token - these values will be empty",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OwnerType"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.UserAppAccessResponse": {
            "type": "object",
            "properties": {
                "can_read": {
                    "type": "boolean"
                },
                "can_write": {
                    "type": "boolean"
                },
                "is_admin": {
                    "type": "boolean"
                }
            }
        },
        "types.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "types.UserSearchResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.User"
                    }
                }
            }
        },
        "types.UserTokenUsageResponse": {
            "type": "object",
            "properties": {
                "is_pro_tier": {
                    "type": "boolean"
                },
                "monthly_limit": {
                    "type": "integer"
                },
                "monthly_usage": {
                    "type": "integer"
                },
                "quotas_enabled": {
                    "type": "boolean"
                },
                "usage_percentage": {
                    "type": "number"
                }
            }
        },
        "types.UsersAggregatedUsageMetric": {
            "type": "object",
            "properties": {
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AggregatedUsageMetric"
                    }
                },
                "user": {
                    "$ref": "#/definitions/types.User"
                }
            }
        },
        "types.Wallet": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "org_id": {
                    "description": "If belongs to an organization",
                    "type": "string"
                },
                "stripe_customer_id": {
                    "type": "string"
                },
                "stripe_subscription_id": {
                    "type": "string"
                },
                "subscription_created": {
                    "type": "integer"
                },
                "subscription_current_period_end": {
                    "type": "integer"
                },
                "subscription_current_period_start": {
                    "type": "integer"
                },
                "subscription_status": {
                    "$ref": "#/definitions/stripe.SubscriptionStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.WebhookWorkConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "json_path": {
                    "description": "JSONPath to extract work description",
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            }
        },
        "types.WebsiteCrawler": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "firecrawl": {
                    "$ref": "#/definitions/types.Firecrawl"
                },
                "ignore_robots_txt": {
                    "type": "boolean"
                },
                "max_depth": {
                    "description": "Limit crawl depth to avoid infinite crawling",
                    "type": "integer"
                },
                "readability": {
                    "description": "Apply readability middleware to the HTML content",
                    "type": "boolean"
                },
                "user_agent": {
                    "type": "string"
                }
            }
        },
        "types.WorkloadSummary": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lora_dir": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "model_name": {
                    "type": "string"
                },
                "runtime": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "types.ZedConfigResponse": {
            "type": "object",
            "properties": {
                "agent": {
                    "type": "object",
                    "additionalProperties": true
                },
                "assistant": {
                    "type": "object",
                    "additionalProperties": true
                },
                "context_servers": {
                    "type": "object",
                    "additionalProperties": true
                },
                "external_sync": {
                    "type": "object",
                    "additionalProperties": true
                },
                "language_models": {
                    "type": "object",
                    "additionalProperties": true
                },
                "theme": {
                    "type": "string"
                },
                "version": {
                    "description": "Unix timestamp of app config update",
                    "type": "integer"
                }
            }
        },
        "types.ZedInstanceEvent": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "event_type": {
                    "type": "string"
                },
                "instance_id": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "thread_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "types.ZedInstanceStatus": {
            "type": "object",
            "properties": {
                "active_threads": {
                    "type": "integer"
                },
                "last_activity": {
                    "type": "string"
                },
                "project_path": {
                    "type": "string"
                },
                "spec_task_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "thread_count": {
                    "type": "integer"
                },
                "zed_instance_id": {
                    "type": "string"
                }
            }
        }
    }
}