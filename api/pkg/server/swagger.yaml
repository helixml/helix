definitions:
  github_com_helixml_helix_api_pkg_types.Tool:
    properties:
      config:
        $ref: '#/definitions/types.ToolConfig'
      created:
        type: string
      description:
        type: string
      global:
        type: boolean
      id:
        type: string
      name:
        type: string
      owner:
        description: uuid of owner entity
        type: string
      owner_type:
        allOf:
        - $ref: '#/definitions/types.OwnerType'
        description: e.g. user, system, org
      tool_type:
        $ref: '#/definitions/github_com_helixml_helix_api_pkg_types.ToolType'
      updated:
        type: string
    type: object
  github_com_helixml_helix_api_pkg_types.ToolType:
    enum:
    - api
    - gptscript
    - zapier
    type: string
    x-enum-varnames:
    - ToolTypeAPI
    - ToolTypeGPTScript
    - ToolTypeZapier
  github_com_helixml_helix_api_pkg_types.Usage:
    properties:
      completion_tokens:
        type: integer
      duration_ms:
        description: How long the request took in milliseconds
        type: integer
      prompt_tokens:
        type: integer
      total_tokens:
        type: integer
    type: object
  github_com_sashabaranov_go-openai.ChatCompletionChoice:
    properties:
      finish_reason:
        allOf:
        - $ref: '#/definitions/github_com_sashabaranov_go-openai.FinishReason'
        description: |-
          FinishReason
          stop: API returned complete message,
          or a message terminated by one of the stop sequences provided via the stop parameter
          length: Incomplete model output due to max_tokens parameter or token limit
          function_call: The model decided to call a function
          content_filter: Omitted content due to a flag from our content filters
          null: API response still in progress or incomplete
      index:
        type: integer
      logprobs:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.LogProbs'
      message:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatCompletionMessage'
    type: object
  github_com_sashabaranov_go-openai.ChatCompletionMessage:
    properties:
      content:
        type: string
      function_call:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.FunctionCall'
      multiContent:
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatMessagePart'
        type: array
      name:
        description: |-
          This property isn't in the official documentation, but it's in
          the documentation for the official library for python:
          - https://github.com/openai/openai-python/blob/main/chatml.md
          - https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb
        type: string
      refusal:
        type: string
      role:
        type: string
      tool_call_id:
        description: For Role=tool prompts this should be set to the ID given in the
          assistant's prior request to call a tool.
        type: string
      tool_calls:
        description: For Role=assistant prompts this may be set to the tool calls
          generated by the model, such as function calls.
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.ToolCall'
        type: array
    type: object
  github_com_sashabaranov_go-openai.ChatCompletionRequest:
    properties:
      frequency_penalty:
        type: number
      function_call:
        description: 'Deprecated: use ToolChoice instead.'
      functions:
        description: 'Deprecated: use Tools instead.'
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.FunctionDefinition'
        type: array
      logit_bias:
        additionalProperties:
          type: integer
        description: |-
          LogitBias is must be a token id string (specified by their token ID in the tokenizer), not a word string.
          incorrect: `"logit_bias":{"You": 6}`, correct: `"logit_bias":{"1639": 6}`
          refs: https://platform.openai.com/docs/api-reference/chat/create#chat/create-logit_bias
        type: object
      logprobs:
        description: |-
          LogProbs indicates whether to return log probabilities of the output tokens or not.
          If true, returns the log probabilities of each output token returned in the content of message.
          This option is currently not available on the gpt-4-vision-preview model.
        type: boolean
      max_completion_tokens:
        description: |-
          MaxCompletionsTokens An upper bound for the number of tokens that can be generated for a completion,
          including visible output tokens and reasoning tokens https://platform.openai.com/docs/guides/reasoning
        type: integer
      max_tokens:
        description: |-
          MaxTokens The maximum number of tokens that can be generated in the chat completion.
          This value can be used to control costs for text generated via API.
          This value is now deprecated in favor of max_completion_tokens, and is not compatible with o1 series models.
          refs: https://platform.openai.com/docs/api-reference/chat/create#chat-create-max_tokens
        type: integer
      messages:
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatCompletionMessage'
        type: array
      model:
        type: string
      "n":
        type: integer
      parallel_tool_calls:
        description: 'Disable the default behavior of parallel tool calls by setting
          it: false.'
      presence_penalty:
        type: number
      response_format:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatCompletionResponseFormat'
      seed:
        type: integer
      stop:
        items:
          type: string
        type: array
      stream:
        type: boolean
      stream_options:
        allOf:
        - $ref: '#/definitions/github_com_sashabaranov_go-openai.StreamOptions'
        description: 'Options for streaming response. Only set this when you set stream:
          true.'
      temperature:
        type: number
      tool_choice:
        description: This can be either a string or an ToolChoice object.
      tools:
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.Tool'
        type: array
      top_logprobs:
        description: |-
          TopLogProbs is an integer between 0 and 5 specifying the number of most likely tokens to return at each
          token position, each with an associated log probability.
          logprobs must be set to true if this parameter is used.
        type: integer
      top_p:
        type: number
      user:
        type: string
    type: object
  github_com_sashabaranov_go-openai.ChatCompletionResponse:
    properties:
      choices:
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatCompletionChoice'
        type: array
      created:
        type: integer
      id:
        type: string
      model:
        type: string
      object:
        type: string
      system_fingerprint:
        type: string
      usage:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.Usage'
    type: object
  github_com_sashabaranov_go-openai.ChatCompletionResponseFormat:
    properties:
      json_schema:
        $ref: '#/definitions/openai.ChatCompletionResponseFormatJSONSchema'
      type:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatCompletionResponseFormatType'
    type: object
  github_com_sashabaranov_go-openai.ChatCompletionResponseFormatType:
    enum:
    - json_object
    - json_schema
    - text
    type: string
    x-enum-varnames:
    - ChatCompletionResponseFormatTypeJSONObject
    - ChatCompletionResponseFormatTypeJSONSchema
    - ChatCompletionResponseFormatTypeText
  github_com_sashabaranov_go-openai.ChatMessageImageURL:
    properties:
      detail:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.ImageURLDetail'
      url:
        type: string
    type: object
  github_com_sashabaranov_go-openai.ChatMessagePart:
    properties:
      image_url:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatMessageImageURL'
      text:
        type: string
      type:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatMessagePartType'
    type: object
  github_com_sashabaranov_go-openai.ChatMessagePartType:
    enum:
    - text
    - image_url
    type: string
    x-enum-varnames:
    - ChatMessagePartTypeText
    - ChatMessagePartTypeImageURL
  github_com_sashabaranov_go-openai.FinishReason:
    enum:
    - stop
    - length
    - function_call
    - tool_calls
    - content_filter
    - "null"
    type: string
    x-enum-varnames:
    - FinishReasonStop
    - FinishReasonLength
    - FinishReasonFunctionCall
    - FinishReasonToolCalls
    - FinishReasonContentFilter
    - FinishReasonNull
  github_com_sashabaranov_go-openai.FunctionCall:
    properties:
      arguments:
        description: call function with arguments in JSON format
        type: string
      name:
        type: string
    type: object
  github_com_sashabaranov_go-openai.FunctionDefinition:
    properties:
      description:
        type: string
      name:
        type: string
      parameters:
        description: |-
          Parameters is an object describing the function.
          You can pass json.RawMessage to describe the schema,
          or you can pass in a struct which serializes to the proper JSON schema.
          The jsonschema package is provided for convenience, but you should
          consider another specialized library if you require more complex schemas.
      strict:
        type: boolean
    type: object
  github_com_sashabaranov_go-openai.ImageURLDetail:
    enum:
    - high
    - low
    - auto
    type: string
    x-enum-varnames:
    - ImageURLDetailHigh
    - ImageURLDetailLow
    - ImageURLDetailAuto
  github_com_sashabaranov_go-openai.LogProb:
    properties:
      bytes:
        description: Omitting the field if it is null
        items:
          type: integer
        type: array
      logprob:
        type: number
      token:
        type: string
      top_logprobs:
        description: |-
          TopLogProbs is a list of the most likely tokens and their log probability, at this token position.
          In rare cases, there may be fewer than the number of requested top_logprobs returned.
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.TopLogProbs'
        type: array
    type: object
  github_com_sashabaranov_go-openai.LogProbs:
    properties:
      content:
        description: Content is a list of message content tokens with log probability
          information.
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.LogProb'
        type: array
    type: object
  github_com_sashabaranov_go-openai.StreamOptions:
    properties:
      include_usage:
        description: |-
          If set, an additional chunk will be streamed before the data: [DONE] message.
          The usage field on this chunk shows the token usage statistics for the entire request,
          and the choices field will always be an empty array.
          All other chunks will also include a usage field, but with a null value.
        type: boolean
    type: object
  github_com_sashabaranov_go-openai.Tool:
    properties:
      function:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.FunctionDefinition'
      type:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.ToolType'
    type: object
  github_com_sashabaranov_go-openai.ToolCall:
    properties:
      function:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.FunctionCall'
      id:
        type: string
      index:
        description: Index is not nil only in chat completion chunk object
        type: integer
      type:
        $ref: '#/definitions/github_com_sashabaranov_go-openai.ToolType'
    type: object
  github_com_sashabaranov_go-openai.ToolType:
    enum:
    - function
    type: string
    x-enum-varnames:
    - ToolTypeFunction
  github_com_sashabaranov_go-openai.TopLogProbs:
    properties:
      bytes:
        items:
          type: integer
        type: array
      logprob:
        type: number
      token:
        type: string
    type: object
  github_com_sashabaranov_go-openai.Usage:
    properties:
      completion_tokens:
        type: integer
      completion_tokens_details:
        $ref: '#/definitions/openai.CompletionTokensDetails'
      prompt_tokens:
        type: integer
      total_tokens:
        type: integer
    type: object
  openai.ChatCompletionResponseFormatJSONSchema:
    properties:
      description:
        type: string
      name:
        type: string
      schema: {}
      strict:
        type: boolean
    type: object
  openai.CompletionTokensDetails:
    properties:
      reasoning_tokens:
        type: integer
    type: object
  types.App:
    properties:
      app_source:
        $ref: '#/definitions/types.AppSource'
      config:
        $ref: '#/definitions/types.AppConfig'
      created:
        type: string
      global:
        type: boolean
      id:
        type: string
      owner:
        description: uuid of owner entity
        type: string
      owner_type:
        allOf:
        - $ref: '#/definitions/types.OwnerType'
        description: e.g. user, system, org
      shared:
        type: boolean
      updated:
        type: string
    type: object
  types.AppConfig:
    properties:
      allowed_domains:
        items:
          type: string
        type: array
      github:
        $ref: '#/definitions/types.AppGithubConfig'
      helix:
        $ref: '#/definitions/types.AppHelixConfig'
      secrets:
        additionalProperties:
          type: string
        type: object
    type: object
  types.AppGithubConfig:
    properties:
      hash:
        type: string
      key_pair:
        $ref: '#/definitions/types.KeyPair'
      last_update:
        $ref: '#/definitions/types.AppGithubConfigUpdate'
      repo:
        type: string
      webhook_secret:
        type: string
    type: object
  types.AppGithubConfigUpdate:
    properties:
      error:
        type: string
      hash:
        type: string
      updated:
        type: string
    type: object
  types.AppHelixConfig:
    properties:
      assistants:
        items:
          $ref: '#/definitions/types.AssistantConfig'
        type: array
      avatar:
        type: string
      description:
        type: string
      external_url:
        type: string
      image:
        type: string
      name:
        type: string
      triggers:
        items:
          $ref: '#/definitions/types.Trigger'
        type: array
    type: object
  types.AppSource:
    enum:
    - helix
    - github
    type: string
    x-enum-varnames:
    - AppSourceHelix
    - AppSourceGithub
  types.AssistantAPI:
    properties:
      description:
        type: string
      headers:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      query:
        additionalProperties:
          type: string
        type: object
      request_prep_template:
        description: Template for request preparation, leave empty for default
        type: string
      response_error_template:
        description: Template for error response, leave empty for default
        type: string
      response_success_template:
        description: Template for successful response, leave empty for default
        type: string
      schema:
        type: string
      url:
        type: string
    type: object
  types.AssistantConfig:
    properties:
      apis:
        description: the list of api tools this assistant will use
        items:
          $ref: '#/definitions/types.AssistantAPI'
        type: array
      avatar:
        type: string
      description:
        type: string
      gptscripts:
        description: the list of gpt scripts this assistant will use
        items:
          $ref: '#/definitions/types.AssistantGPTScript'
        type: array
      id:
        type: string
      image:
        type: string
      is_actionable_template:
        description: Template for determining if the request is actionable or informative
        type: string
      knowledge:
        description: Knowledge available to the assistant
        items:
          $ref: '#/definitions/types.AssistantKnowledge'
        type: array
      lora_id:
        description: the data entity ID that we have created for the lora fine tune
        type: string
      model:
        type: string
      name:
        type: string
      provider:
        allOf:
        - $ref: '#/definitions/types.Provider'
        description: openai, togetherai, helix, etc.
      rag_source_id:
        description: the data entity ID that we have created as the RAG source
        type: string
      system_prompt:
        type: string
      tools:
        description: |-
          these are populated from the APIs and GPTScripts on create and update
          we include tools in the JSON that we send to the browser
          but we don't include it in the yaml which feeds this struct because
          we populate the tools array from the APIs and GPTScripts arrays
          so - Tools is readonly - hence only JSON for the frontend to see
        items:
          $ref: '#/definitions/github_com_helixml_helix_api_pkg_types.Tool'
        type: array
      type:
        allOf:
        - $ref: '#/definitions/types.SessionType'
        description: |-
          so we can have fine tuned image assistants or system prompt augmentedimage inference
          defaults to text
      zapier:
        items:
          $ref: '#/definitions/types.AssistantZapier'
        type: array
    type: object
  types.AssistantGPTScript:
    properties:
      content:
        type: string
      description:
        description: When to use this tool (required)
        type: string
      file:
        type: string
      name:
        type: string
    type: object
  types.AssistantKnowledge:
    properties:
      description:
        description: |-
          Description of the knowledge, will be used in the prompt
          to explain the knowledge to the assistant
        type: string
      name:
        description: Name of the knowledge, will be unique within the Helix app
        type: string
      rag_settings:
        allOf:
        - $ref: '#/definitions/types.RAGSettings'
        description: |-
          RAGSettings defines the settings for the RAG system, how
          chunking is configured and where the index/query service is
          hosted.
      refresh_enabled:
        description: |-
          RefreshEnabled defines if the knowledge should be refreshed periodically
          or on events. For example a Google Drive knowledge can be refreshed
          every 24 hours.
        type: boolean
      refresh_schedule:
        description: |-
          RefreshSchedule defines the schedule for refreshing the knowledge.
          It can be specified in cron format or as a duration for example '@every 2h'
          or 'every 5m' or '0 0 * * *' for daily at midnight.
        type: string
      source:
        allOf:
        - $ref: '#/definitions/types.KnowledgeSource'
        description: |-
          Source defines where the raw data is fetched from. It can be
          directly uploaded files, S3, GCS, Google Drive, Gmail, etc.
    type: object
  types.AssistantZapier:
    properties:
      api_key:
        type: string
      description:
        type: string
      max_iterations:
        type: integer
      model:
        type: string
      name:
        type: string
    type: object
  types.Choice:
    properties:
      delta:
        $ref: '#/definitions/types.OpenAIMessage'
      finish_reason:
        type: string
      index:
        type: integer
      message:
        $ref: '#/definitions/types.OpenAIMessage'
      text:
        type: string
    type: object
  types.CreatorType:
    enum:
    - system
    - assistant
    - user
    - tool
    type: string
    x-enum-varnames:
    - CreatorTypeSystem
    - CreatorTypeAssistant
    - CreatorTypeUser
    - CreatorTypeTool
  types.CronTrigger:
    properties:
      input:
        type: string
      schedule:
        type: string
    type: object
  types.DataPrepChunk:
    properties:
      error:
        type: string
      index:
        type: integer
      prompt_name:
        type: string
      question_count:
        type: integer
    type: object
  types.DiscordTrigger:
    properties:
      server_name:
        type: string
    type: object
  types.Firecrawl:
    properties:
      api_key:
        type: string
      api_url:
        type: string
    type: object
  types.GptScriptRequest:
    properties:
      file_path:
        type: string
      input:
        type: string
    type: object
  types.GptScriptResponse:
    properties:
      error:
        type: string
      output:
        type: string
      retries:
        type: integer
    type: object
  types.Interaction:
    properties:
      completed:
        type: string
      created:
        type: string
      creator:
        allOf:
        - $ref: '#/definitions/types.CreatorType'
        description: e.g. User
      data_prep_chunks:
        additionalProperties:
          items:
            $ref: '#/definitions/types.DataPrepChunk'
          type: array
        type: object
      data_prep_limit:
        description: If true, the data prep is limited to a certain number of chunks
          due to quotas
        type: integer
      data_prep_limited:
        description: If true, the data prep is limited to a certain number of chunks
          due to quotas
        type: boolean
      data_prep_stage:
        $ref: '#/definitions/types.TextDataPrepStage'
      data_prep_total_chunks:
        type: integer
      display_message:
        description: if this is defined, the UI will always display it instead of
          the message (so we can augment the internal prompt with RAG context)
        type: string
      error:
        type: string
      files:
        description: list of filepath paths
        items:
          type: string
        type: array
      finished:
        description: if true, the message has finished being written to, and is ready
          for a response (e.g. from the other participant)
        type: boolean
      id:
        type: string
      lora_dir:
        description: we hoist this from files so a single interaction knows that it
          "Created a finetune file"
        type: string
      message:
        description: e.g. Prove pythagoras
        type: string
      metadata:
        additionalProperties:
          type: string
        description: different modes and models can put values here - for example,
          the image fine tuning will keep labels here to display in the frontend
        type: object
      mode:
        allOf:
        - $ref: '#/definitions/types.SessionMode'
        description: |-
          this let's us know if this interaction is part of the fine tuning process
          or if it's a chat interaction that the user is using to interact with the model
          once it's been fine-tuned
          for fine-tune models, we can filter out inference interactions
          to get down to what actually matters
      progress:
        description: e.g. 0-100
        type: integer
      rag_results:
        items:
          $ref: '#/definitions/types.SessionRAGResult'
        type: array
      response_format:
        allOf:
        - $ref: '#/definitions/types.ResponseFormat'
        description: e.g. json
      runner:
        description: the ID of the runner that processed this interaction
        type: string
      scheduled:
        type: string
      state:
        $ref: '#/definitions/types.InteractionState'
      status:
        type: string
      tool_call_id:
        description: For Role=tool prompts this should be set to the ID given in the
          assistant's prior request to call a tool.
        type: string
      tool_calls:
        description: For Role=assistant prompts this may be set to the tool calls
          generated by the model, such as function calls.
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.ToolCall'
        type: array
      tool_choice:
        description: This can be either a string or an ToolChoice object.
      tools:
        description: Model function calling, not to be mistaken with Helix tools
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.Tool'
        type: array
      updated:
        type: string
      usage:
        $ref: '#/definitions/github_com_helixml_helix_api_pkg_types.Usage'
    type: object
  types.InteractionState:
    enum:
    - ""
    - waiting
    - editing
    - complete
    - error
    type: string
    x-enum-varnames:
    - InteractionStateNone
    - InteractionStateWaiting
    - InteractionStateEditing
    - InteractionStateComplete
    - InteractionStateError
  types.Item:
    properties:
      b64_json:
        type: string
      embedding:
        items:
          type: number
        type: array
      index:
        type: integer
      object:
        type: string
      url:
        description: Images
        type: string
    type: object
  types.KeyPair:
    properties:
      privateKey:
        type: string
      publicKey:
        type: string
      type:
        type: string
    type: object
  types.KnowledgeSource:
    properties:
      filestore:
        $ref: '#/definitions/types.KnowledgeSourceHelixFilestore'
      gcs:
        $ref: '#/definitions/types.KnowledgeSourceGCS'
      s3:
        $ref: '#/definitions/types.KnowledgeSourceS3'
      text:
        type: string
      web:
        $ref: '#/definitions/types.KnowledgeSourceWeb'
    type: object
  types.KnowledgeSourceGCS:
    properties:
      bucket:
        type: string
      path:
        type: string
    type: object
  types.KnowledgeSourceHelixFilestore:
    properties:
      path:
        type: string
    type: object
  types.KnowledgeSourceS3:
    properties:
      bucket:
        type: string
      path:
        type: string
    type: object
  types.KnowledgeSourceWeb:
    properties:
      auth:
        $ref: '#/definitions/types.KnowledgeSourceWebAuth'
      crawler:
        allOf:
        - $ref: '#/definitions/types.WebsiteCrawler'
        description: Additional options for the crawler
      excludes:
        items:
          type: string
        type: array
      urls:
        items:
          type: string
        type: array
    type: object
  types.KnowledgeSourceWebAuth:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  types.LLMCall:
    properties:
      completionTokens:
        type: integer
      created:
        type: string
      duration_ms:
        type: integer
      id:
        type: string
      interaction_id:
        type: string
      model:
        type: string
      original_request:
        items:
          type: integer
        type: array
      promptTokens:
        type: integer
      provider:
        type: string
      request:
        items:
          type: integer
        type: array
      response:
        items:
          type: integer
        type: array
      session_id:
        type: string
      step:
        $ref: '#/definitions/types.LLMCallStep'
      totalTokens:
        type: integer
      updated:
        type: string
      user_id:
        type: string
    type: object
  types.LLMCallStep:
    enum:
    - default
    - is_actionable
    - prepare_api_request
    - interpret_response
    - generate_title
    type: string
    x-enum-varnames:
    - LLMCallStepDefault
    - LLMCallStepIsActionable
    - LLMCallStepPrepareAPIRequest
    - LLMCallStepInterpretResponse
    - LLMCallStepGenerateTitle
  types.Message:
    properties:
      content:
        $ref: '#/definitions/types.MessageContent'
      created_at:
        type: string
      id:
        description: Interaction ID
        type: string
      role:
        $ref: '#/definitions/types.CreatorType'
      state:
        $ref: '#/definitions/types.InteractionState'
      updated_at:
        type: string
    type: object
  types.MessageContent:
    properties:
      content_type:
        allOf:
        - $ref: '#/definitions/types.MessageContentType'
        description: text, image, multimodal_text
      parts:
        description: "Parts is a list of strings or objects. For example for text,
          it's a list of strings, for\nmulti-modal it can be an object:\n\"parts\":
          [\n\t\t{\n\t\t\t\t\"content_type\": \"image_asset_pointer\",\n\t\t\t\t\"asset_pointer\":
          \"file-service://file-28uHss2LgJ8HUEEVAnXa70Tg\",\n\t\t\t\t\"size_bytes\":
          185427,\n\t\t\t\t\"width\": 2048,\n\t\t\t\t\"height\": 1020,\n\t\t\t\t\"fovea\":
          null,\n\t\t\t\t\"metadata\": null\n\t\t},\n\t\t\"what is in the image?\"\n]"
        items: {}
        type: array
    type: object
  types.MessageContentType:
    enum:
    - text
    type: string
    x-enum-varnames:
    - MessageContentTypeText
  types.OpenAIMessage:
    properties:
      content:
        description: The message content
        type: string
      role:
        description: The message role
        type: string
      tool_call_id:
        description: For Role=tool prompts this should be set to the ID given in the
          assistant's prior request to call a tool.
        type: string
      tool_calls:
        description: For Role=assistant prompts this may be set to the tool calls
          generated by the model, such as function calls.
        items:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.ToolCall'
        type: array
    type: object
  types.OpenAIResponse:
    properties:
      choices:
        items:
          $ref: '#/definitions/types.Choice'
        type: array
      created:
        type: integer
      data:
        items:
          $ref: '#/definitions/types.Item'
        type: array
      id:
        type: string
      model:
        type: string
      object:
        type: string
      usage:
        $ref: '#/definitions/types.OpenAIUsage'
    type: object
  types.OpenAIUsage:
    properties:
      completion_tokens:
        type: integer
      prompt_tokens:
        type: integer
      total_tokens:
        type: integer
    type: object
  types.OwnerType:
    enum:
    - user
    - system
    type: string
    x-enum-varnames:
    - OwnerTypeUser
    - OwnerTypeSystem
  types.PaginatedLLMCalls:
    properties:
      calls:
        items:
          $ref: '#/definitions/types.LLMCall'
        type: array
      page:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  types.Provider:
    enum:
    - openai
    - togetherai
    - helix
    type: string
    x-enum-varnames:
    - ProviderOpenAI
    - ProviderTogetherAI
    - ProviderHelix
  types.RAGSettings:
    properties:
      chunk_overflow:
        description: the amount of overlap between chunks - will default to 32 bytes
        type: integer
      chunk_size:
        description: the size of each text chunk - will default to 2000 bytes
        type: integer
      delete_url:
        description: the URL of the delete endpoint (defaults to Helix RAG_DELETE_URL
          env var)
        type: string
      disable_chunking:
        description: if true, we will not chunk the text and send the entire file
          to the RAG indexing endpoint
        type: boolean
      disable_downloading:
        description: if true, we will not download the file and send the URL to the
          RAG indexing endpoint
        type: boolean
      distance_function:
        description: this is one of l2, inner_product or cosine - will default to
          cosine
        type: string
      index_url:
        description: RAG endpoint configuration if used with a custom RAG service
        type: string
      prompt_template:
        description: the prompt template to use for the RAG query
        type: string
      query_url:
        description: the URL of the query endpoint (defaults to Helix RAG_QUERY_URL
          env var)
        type: string
      results_count:
        description: this is the max number of results to return - will default to
          3
        type: integer
      text_splitter:
        allOf:
        - $ref: '#/definitions/types.TextSplitterType'
        description: Markdown if empty or 'text'
      threshold:
        description: this is the threshold for a "good" answer - will default to 0.2
        type: number
      typesense:
        properties:
          api_key:
            type: string
          collection:
            type: string
          url:
            type: string
        type: object
    type: object
  types.ResponseFormat:
    properties:
      schema:
        $ref: '#/definitions/openai.ChatCompletionResponseFormatJSONSchema'
      type:
        $ref: '#/definitions/types.ResponseFormatType'
    type: object
  types.ResponseFormatType:
    enum:
    - json_object
    - text
    type: string
    x-enum-varnames:
    - ResponseFormatTypeJSONObject
    - ResponseFormatTypeText
  types.Secret:
    properties:
      app_id:
        description: optional, if set, the secret will be available to the specified
          app
        type: string
      created:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      ownerType:
        $ref: '#/definitions/types.OwnerType'
      updated:
        type: string
      value:
        items:
          type: integer
        type: array
    type: object
  types.Session:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/types.SessionMetadata'
        description: named config for backward compat
      created:
        type: string
      id:
        type: string
      interactions:
        description: |-
          for now we just whack the entire history of the interaction in here, json
          style
        items:
          $ref: '#/definitions/types.Interaction'
        type: array
      lora_dir:
        description: |-
          if type == finetune, we record a filestore path to e.g. lora file here
          currently the only place you can do inference on a finetune is within the
          session where the finetune was generated
        type: string
      mode:
        allOf:
        - $ref: '#/definitions/types.SessionMode'
        description: e.g. inference, finetune
      model_name:
        description: |-
          huggingface model name e.g. mistralai/Mistral-7B-Instruct-v0.1 or
          stabilityai/stable-diffusion-xl-base-1.0
        type: string
      name:
        description: |-
          name that goes in the UI - ideally autogenerated by AI but for now can be
          named manually
        type: string
      owner:
        description: uuid of owner entity
        type: string
      owner_type:
        allOf:
        - $ref: '#/definitions/types.OwnerType'
        description: e.g. user, system, org
      parent_app:
        description: the app this session was spawned from
        type: string
      parent_session:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.SessionType'
        description: e.g. text, image
      updated:
        type: string
    type: object
  types.SessionChatRequest:
    properties:
      app_id:
        description: Assign the session settings from the specified app
        type: string
      assistant_id:
        description: Which assistant are we speaking to?
        type: string
      lora_dir:
        type: string
      lora_id:
        description: the fine tuned data entity we produced from this session
        type: string
      messages:
        description: Initial messages
        items:
          $ref: '#/definitions/types.Message'
        type: array
      model:
        description: The model to use
        type: string
      provider:
        allOf:
        - $ref: '#/definitions/types.Provider'
        description: The provider to use
      rag_source_id:
        type: string
      session_id:
        description: If empty, we will start a new session
        type: string
      stream:
        description: If true, we will stream the response
        type: boolean
      system:
        description: System message, only applicable when starting a new session
        type: string
      tools:
        description: Available tools to use in the session
        items:
          type: string
        type: array
      type:
        allOf:
        - $ref: '#/definitions/types.SessionType'
        description: e.g. text, image
    type: object
  types.SessionLearnRequest:
    properties:
      data_entity_id:
        description: FINE-TUNE MODE ONLY
        type: string
      default_rag_model:
        description: When doing RAG, allow the resulting inference session model to
          be specified
        type: string
      rag_enabled:
        description: |-
          Do we want to create a RAG data entity from this session?
          You must provide a data entity ID for the uploaded documents if yes
        type: boolean
      rag_settings:
        allOf:
        - $ref: '#/definitions/types.RAGSettings'
        description: The settings we use for the RAG source
      text_finetune_enabled:
        description: |-
          Do we want to create a lora output from this session?
          You must provide a data entity ID for the uploaded documents if yes
        type: boolean
      type:
        allOf:
        - $ref: '#/definitions/types.SessionType'
        description: e.g. text, image
    type: object
  types.SessionMetadata:
    properties:
      active_tools:
        items:
          type: string
        type: array
      app_query_params:
        additionalProperties:
          type: string
        description: Passing through user defined app params
        type: object
      assistant_id:
        description: which assistant are we talking to?
        type: string
      avatar:
        type: string
      document_group_id:
        type: string
      document_ids:
        additionalProperties:
          type: string
        type: object
      eval_automatic_reason:
        type: string
      eval_automatic_score:
        type: string
      eval_manual_reason:
        type: string
      eval_manual_score:
        type: string
      eval_original_user_prompts:
        items:
          type: string
        type: array
      eval_run_id:
        description: |-
          Evals are cool. Scores are strings of floats so we can distinguish ""
          (not rated) from "0.0"
        type: string
      eval_user_reason:
        type: string
      eval_user_score:
        type: string
      finetune_data_entity_id:
        description: the fine tuned data entity we produced from this session
        type: string
      helix_version:
        type: string
      manually_review_questions:
        type: boolean
      origin:
        $ref: '#/definitions/types.SessionOrigin'
      original_mode:
        $ref: '#/definitions/types.SessionMode'
      priority:
        type: boolean
      rag_enabled:
        description: |-
          these settings control which features of a session we want to use
          even if we have a Lora file and RAG indexed prepared
          we might choose to not use them (this will help our eval framework know what works the best)
          we well as activate RAG - we also get to control some properties, e.g. which distance function to use,
          and what the threshold for a "good" answer is
        type: boolean
      rag_settings:
        $ref: '#/definitions/types.RAGSettings'
      rag_source_data_entity_id:
        description: the RAG source data entity we produced from this session
        type: string
      shared:
        type: boolean
      stream:
        type: boolean
      system_prompt:
        type: string
      text_finetune_enabled:
        description: without any user input, this will default to true
        type: boolean
      uploaded_data_entity_id:
        description: when we do fine tuning or RAG, we need to know which data entity
          we used
        type: string
    type: object
  types.SessionMode:
    enum:
    - ""
    - inference
    - finetune
    - action
    type: string
    x-enum-comments:
      SessionModeAction: Running tool actions (e.g. API, function calls)
    x-enum-varnames:
    - SessionModeNone
    - SessionModeInference
    - SessionModeFinetune
    - SessionModeAction
  types.SessionOrigin:
    properties:
      cloned_interaction_id:
        type: string
      cloned_session_id:
        type: string
      type:
        $ref: '#/definitions/types.SessionOriginType'
    type: object
  types.SessionOriginType:
    enum:
    - ""
    - user_created
    - cloned
    type: string
    x-enum-varnames:
    - SessionOriginTypeNone
    - SessionOriginTypeUserCreated
    - SessionOriginTypeCloned
  types.SessionRAGResult:
    properties:
      content:
        type: string
      content_offset:
        type: integer
      distance:
        type: number
      document_group_id:
        type: string
      document_id:
        type: string
      filename:
        type: string
      id:
        type: string
      interaction_id:
        type: string
      session_id:
        type: string
      source:
        type: string
    type: object
  types.SessionType:
    enum:
    - ""
    - text
    - image
    type: string
    x-enum-varnames:
    - SessionTypeNone
    - SessionTypeText
    - SessionTypeImage
  types.TextDataPrepStage:
    enum:
    - ""
    - edit_files
    - extract_text
    - index_rag
    - generate_questions
    - edit_questions
    - finetune
    - complete
    type: string
    x-enum-varnames:
    - TextDataPrepStageNone
    - TextDataPrepStageEditFiles
    - TextDataPrepStageExtractText
    - TextDataPrepStageIndexRag
    - TextDataPrepStageGenerateQuestions
    - TextDataPrepStageEditQuestions
    - TextDataPrepStageFineTune
    - TextDataPrepStageComplete
  types.TextSplitterType:
    enum:
    - markdown
    - text
    type: string
    x-enum-varnames:
    - TextSplitterTypeMarkdown
    - TextSplitterTypeText
  types.ToolApiAction:
    properties:
      description:
        type: string
      method:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  types.ToolApiConfig:
    properties:
      actions:
        description: Read-only, parsed from schema on creation
        items:
          $ref: '#/definitions/types.ToolApiAction'
        type: array
      headers:
        additionalProperties:
          type: string
        description: Headers (authentication, etc)
        type: object
      model:
        type: string
      query:
        additionalProperties:
          type: string
        description: Query parameters that will be always set
        type: object
      request_prep_template:
        description: Template for request preparation, leave empty for default
        type: string
      response_error_template:
        description: Template for error response, leave empty for default
        type: string
      response_success_template:
        description: Template for successful response, leave empty for default
        type: string
      schema:
        type: string
      url:
        description: Server override
        type: string
    type: object
  types.ToolConfig:
    properties:
      api:
        $ref: '#/definitions/types.ToolApiConfig'
      gptscript:
        $ref: '#/definitions/types.ToolGPTScriptConfig'
      zapier:
        $ref: '#/definitions/types.ToolZapierConfig'
    type: object
  types.ToolGPTScriptConfig:
    properties:
      script:
        description: Program code
        type: string
      script_url:
        description: URL to download the script
        type: string
    type: object
  types.ToolZapierConfig:
    properties:
      api_key:
        type: string
      max_iterations:
        type: integer
      model:
        type: string
    type: object
  types.Trigger:
    properties:
      cron:
        $ref: '#/definitions/types.CronTrigger'
      discord:
        $ref: '#/definitions/types.DiscordTrigger'
    type: object
  types.WebsiteCrawler:
    properties:
      enabled:
        type: boolean
      firecrawl:
        $ref: '#/definitions/types.Firecrawl'
      max_depth:
        description: Limit crawl depth to avoid infinite crawling
        type: integer
      max_pages:
        description: Limit number of pages to crawl to avoid infinite crawling (max
          500 by default)
        type: integer
      readability:
        description: Apply readability middleware to the HTML content
        type: boolean
      user_agent:
        type: string
    type: object
host: app.tryhelix.ai
info:
  contact:
    email: info@helix.ml
    name: Helix support
    url: https://app.tryhelix.ai/
  description: This is a HelixML AI API.
  title: HelixML API reference
  version: "0.1"
  x-logo:
    altText: Helix logo
    url: https://avatars.githubusercontent.com/u/149581110?s=200&v=4
paths:
  /api/v1/apps:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.App'
            type: array
      security:
      - BearerAuth: []
    post:
      parameters:
      - description: Request body with app configuration.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.App'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.App'
      security:
      - BearerAuth: []
  /api/v1/apps/{id}:
    delete:
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
    get:
      parameters:
      - description: App ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.App'
      security:
      - BearerAuth: []
    put:
      parameters:
      - description: Request body with app configuration.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.App'
      - description: Tool ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.App'
      security:
      - BearerAuth: []
  /api/v1/apps/{id}/gptscript:
    post:
      parameters:
      - description: Request body with script configuration.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.GptScriptRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.GptScriptResponse'
      security:
      - BearerAuth: []
  /api/v1/apps/github/{id}:
    put:
      parameters:
      - description: Request body with app configuration.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.App'
      - description: Tool ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.App'
      security:
      - BearerAuth: []
  /api/v1/llm_calls:
    get:
      description: List LLM calls with pagination and optional session filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Filter by session ID
        in: query
        name: sessionFilter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedLLMCalls'
      security:
      - BearerAuth: []
      summary: List LLM calls
      tags:
      - llm_calls
  /api/v1/secrets:
    get:
      description: List secrets for the user.
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Secret'
            type: array
      security:
      - BearerAuth: []
      summary: List secrets
      tags:
      - secrets
    post:
      description: Create a new secret for the user.
      parameters:
      - description: Request body with secret configuration.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.Secret'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Secret'
      security:
      - BearerAuth: []
      summary: Create new secret
      tags:
      - secrets
  /api/v1/secrets/{id}:
    delete:
      description: Delete a secret for the user.
      parameters:
      - description: Secret ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Secret'
      security:
      - BearerAuth: []
      summary: Delete a secret
      tags:
      - secrets
    put:
      description: Update an existing secret for the user.
      parameters:
      - description: Request body with updated secret configuration.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.Secret'
      - description: Secret ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Secret'
      security:
      - BearerAuth: []
      summary: Update an existing secret
      tags:
      - secrets
  /api/v1/sessions/chat:
    post:
      parameters:
      - description: Request body with the message and model to start chat completion.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.SessionChatRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.OpenAIResponse'
      security:
      - BearerAuth: []
  /api/v1/sessions/learn:
    post:
      parameters:
      - description: Request body with settings for the learn session.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.SessionLearnRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Session'
      security:
      - BearerAuth: []
  /v1/chat/completions:
    post:
      description: Creates a model response for the given chat conversation.
      parameters:
      - description: Request body with options for conversational AI.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatCompletionRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_sashabaranov_go-openai.ChatCompletionResponse'
      security:
      - BearerAuth: []
      summary: Stream responses for chat
      tags:
      - chat
schemes:
- https
swagger: "2.0"
