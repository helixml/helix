#!/bin/bash

# Zed Container Startup Script
# This script fetches sample project code from Helix API and initializes git repo

set -e

# Configuration
HELIX_API_URL="${HELIX_API_URL:-http://helix-api:8080}"
PROJECT_ID="${PROJECT_ID:-}"
TASK_ID="${TASK_ID:-}"
WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
LOG_FILE="/tmp/zed_startup.log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

log "=== Zed Container Startup ==="
log "HELIX_API_URL: $HELIX_API_URL"
log "PROJECT_ID: $PROJECT_ID"
log "TASK_ID: $TASK_ID"
log "WORKSPACE_DIR: $WORKSPACE_DIR"

# Ensure workspace directory exists
mkdir -p "$WORKSPACE_DIR"
cd "$WORKSPACE_DIR"

if [ -z "$PROJECT_ID" ]; then
    log "ERROR: PROJECT_ID environment variable is required"
    exit 1
fi

# Function to fetch project code from Helix API
fetch_project_code() {
    local project_id="$1"
    local api_endpoint="$HELIX_API_URL/api/v1/sample-projects/$project_id/archive"
    
    log "Fetching project code from: $api_endpoint"
    
    # Use curl to fetch the project archive
    local response=$(curl -s -f "$api_endpoint" 2>/dev/null)
    if [ $? -ne 0 ]; then
        log "ERROR: Failed to fetch project code from API"
        log "Attempting to continue with empty workspace..."
        return 1
    fi
    
    log "Successfully fetched project code archive"
    echo "$response"
}

# Function to write files from JSON response
write_project_files() {
    local json_response="$1"
    
    log "Writing project files to workspace..."
    
    # Use jq to parse JSON and write files
    echo "$json_response" | jq -r 'to_entries[] | @base64' | while IFS= read -r encoded_entry; do
        entry=$(echo "$encoded_entry" | base64 -d)
        filepath=$(echo "$entry" | jq -r '.key')
        content=$(echo "$entry" | jq -r '.value')
        
        # Create directory if it doesn't exist
        mkdir -p "$(dirname "$filepath")"
        
        # Write file content
        echo "$content" > "$filepath"
        log "Created file: $filepath"
    done
}

# Function to initialize git repository
init_git_repo() {
    log "Initializing git repository..."
    
    git init
    git config user.email "zed-agent@helixml.ai"
    git config user.name "Zed Agent"
    
    # Add all files to git
    git add .
    
    # Create initial commit
    git commit -m "Initial commit: Sample project code
    
Project ID: $PROJECT_ID
Task ID: $TASK_ID
Generated by: Zed Agent
Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    
    log "Git repository initialized with initial commit"
}

# Function to create feature branch for task
create_feature_branch() {
    if [ -n "$TASK_ID" ]; then
        local branch_name="feature/task-$TASK_ID"
        log "Creating feature branch: $branch_name"
        
        git checkout -b "$branch_name"
        log "Switched to feature branch: $branch_name"
    else
        log "No TASK_ID provided, staying on main branch"
    fi
}

# Function to create workspace info file
create_workspace_info() {
    cat > .helix-workspace.json << EOF
{
    "project_id": "$PROJECT_ID",
    "task_id": "$TASK_ID",
    "workspace_dir": "$WORKSPACE_DIR",
    "helix_api_url": "$HELIX_API_URL",
    "initialized_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "git_branch": "$(git branch --show-current 2>/dev/null || echo 'main')",
    "startup_log": "$LOG_FILE"
}
EOF
    log "Created workspace info file: .helix-workspace.json"
}

# Main execution
main() {
    log "Starting project initialization..."
    
    # Check if jq is available (required for JSON parsing)
    if ! command -v jq &> /dev/null; then
        log "ERROR: jq is not installed. Installing..."
        apt-get update && apt-get install -y jq
    fi
    
    # Check if git is available
    if ! command -v git &> /dev/null; then
        log "ERROR: git is not installed. Installing..."
        apt-get update && apt-get install -y git
    fi
    
    # Fetch and write project code
    project_response=$(fetch_project_code "$PROJECT_ID")
    if [ $? -eq 0 ]; then
        write_project_files "$project_response"
        
        # Initialize git repo
        init_git_repo
        
        # Create feature branch
        create_feature_branch
    else
        log "Failed to fetch project code, initializing empty git repo..."
        git init
        git config user.email "zed-agent@helixml.ai"
        git config user.name "Zed Agent"
        
        # Create a basic README
        echo "# Project Workspace" > README.md
        echo "" >> README.md
        echo "This workspace was initialized by Zed Agent." >> README.md
        echo "Project ID: $PROJECT_ID" >> README.md
        echo "Task ID: $TASK_ID" >> README.md
        
        git add README.md
        git commit -m "Initial commit: Empty workspace"
        
        if [ -n "$TASK_ID" ]; then
            git checkout -b "feature/task-$TASK_ID"
        fi
    fi
    
    # Create workspace info
    create_workspace_info
    
    # List current directory contents
    log "Workspace contents:"
    ls -la | tee -a "$LOG_FILE"
    
    # Show git status
    log "Git status:"
    git status | tee -a "$LOG_FILE"
    
    log "=== Startup Complete ==="
    log "Workspace ready at: $WORKSPACE_DIR"
    log "Current branch: $(git branch --show-current)"
    log "Log file: $LOG_FILE"
}

# Handle script termination
cleanup() {
    log "Startup script terminated"
}

trap cleanup EXIT

# Run main function
main "$@"