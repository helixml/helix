// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source auth.go -destination mock.go -package auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	oidc "github.com/coreos/go-oidc"
	jwt "github.com/golang-jwt/jwt/v5"
	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockAuthenticator) GetUserByID(ctx context.Context, userID string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthenticatorMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthenticator)(nil).GetUserByID), ctx, userID)
}

// ValidateUserToken mocks base method.
func (m *MockAuthenticator) ValidateUserToken(ctx context.Context, token string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserToken", ctx, token)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUserToken indicates an expected call of ValidateUserToken.
func (mr *MockAuthenticatorMockRecorder) ValidateUserToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserToken", reflect.TypeOf((*MockAuthenticator)(nil).ValidateUserToken), ctx, token)
}

// MockAuthenticatorOIDC is a mock of AuthenticatorOIDC interface.
type MockAuthenticatorOIDC struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorOIDCMockRecorder
}

// MockAuthenticatorOIDCMockRecorder is the mock recorder for MockAuthenticatorOIDC.
type MockAuthenticatorOIDCMockRecorder struct {
	mock *MockAuthenticatorOIDC
}

// NewMockAuthenticatorOIDC creates a new mock instance.
func NewMockAuthenticatorOIDC(ctrl *gomock.Controller) *MockAuthenticatorOIDC {
	mock := &MockAuthenticatorOIDC{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorOIDCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticatorOIDC) EXPECT() *MockAuthenticatorOIDCMockRecorder {
	return m.recorder
}

// ValidateUserToken mocks base method.
func (m *MockAuthenticatorOIDC) ValidateUserToken(ctx context.Context, accessToken string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserToken", ctx, accessToken)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUserToken indicates an expected call of ValidateUserToken.
func (mr *MockAuthenticatorOIDCMockRecorder) ValidateUserToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserToken", reflect.TypeOf((*MockAuthenticatorOIDC)(nil).ValidateUserToken), ctx, accessToken)
}

// MockOIDC is a mock of OIDC interface.
type MockOIDC struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCMockRecorder
}

// MockOIDCMockRecorder is the mock recorder for MockOIDC.
type MockOIDCMockRecorder struct {
	mock *MockOIDC
}

// NewMockOIDC creates a new mock instance.
func NewMockOIDC(ctrl *gomock.Controller) *MockOIDC {
	mock := &MockOIDC{ctrl: ctrl}
	mock.recorder = &MockOIDCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDC) EXPECT() *MockOIDCMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockOIDC) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", ctx, code)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockOIDCMockRecorder) Exchange(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockOIDC)(nil).Exchange), ctx, code)
}

// GetAuthURL mocks base method.
func (m *MockOIDC) GetAuthURL(state, nonce string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL", state, nonce)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthURL indicates an expected call of GetAuthURL.
func (mr *MockOIDCMockRecorder) GetAuthURL(state, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockOIDC)(nil).GetAuthURL), state, nonce)
}

// GetLogoutURL mocks base method.
func (m *MockOIDC) GetLogoutURL() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogoutURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogoutURL indicates an expected call of GetLogoutURL.
func (mr *MockOIDCMockRecorder) GetLogoutURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogoutURL", reflect.TypeOf((*MockOIDC)(nil).GetLogoutURL))
}

// GetUserInfo mocks base method.
func (m *MockOIDC) GetUserInfo(ctx context.Context, accessToken string) (*UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, accessToken)
	ret0, _ := ret[0].(*UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockOIDCMockRecorder) GetUserInfo(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockOIDC)(nil).GetUserInfo), ctx, accessToken)
}

// RefreshAccessToken mocks base method.
func (m *MockOIDC) RefreshAccessToken(ctx context.Context, refreshToken string) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAccessToken", ctx, refreshToken)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAccessToken indicates an expected call of RefreshAccessToken.
func (mr *MockOIDCMockRecorder) RefreshAccessToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAccessToken", reflect.TypeOf((*MockOIDC)(nil).RefreshAccessToken), ctx, refreshToken)
}

// ValidateUserToken mocks base method.
func (m *MockOIDC) ValidateUserToken(ctx context.Context, accessToken string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserToken", ctx, accessToken)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUserToken indicates an expected call of ValidateUserToken.
func (mr *MockOIDCMockRecorder) ValidateUserToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserToken", reflect.TypeOf((*MockOIDC)(nil).ValidateUserToken), ctx, accessToken)
}

// VerifyAccessToken mocks base method.
func (m *MockOIDC) VerifyAccessToken(ctx context.Context, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAccessToken indicates an expected call of VerifyAccessToken.
func (mr *MockOIDCMockRecorder) VerifyAccessToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccessToken", reflect.TypeOf((*MockOIDC)(nil).VerifyAccessToken), ctx, accessToken)
}

// VerifyIDToken mocks base method.
func (m *MockOIDC) VerifyIDToken(ctx context.Context, token *oauth2.Token) (*oidc.IDToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, token)
	ret0, _ := ret[0].(*oidc.IDToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockOIDCMockRecorder) VerifyIDToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockOIDC)(nil).VerifyIDToken), ctx, token)
}
