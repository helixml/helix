// Code generated by MockGen. DO NOT EDIT.
// Source: mcp_client.go
//
// Generated by this command:
//
//	mockgen -source mcp_client.go -destination mcp_client_mocks.go -package mcp
//

// Package mcp is a generated GoMock package.
package mcp

import (
	context "context"
	reflect "reflect"

	agent "github.com/helixml/helix/api/pkg/agent"
	oauth "github.com/helixml/helix/api/pkg/oauth"
	types "github.com/helixml/helix/api/pkg/types"
	mcp "github.com/mark3labs/mcp-go/mcp"
	gomock "go.uber.org/mock/gomock"
)

// MockClientGetter is a mock of ClientGetter interface.
type MockClientGetter struct {
	ctrl     *gomock.Controller
	recorder *MockClientGetterMockRecorder
	isgomock struct{}
}

// MockClientGetterMockRecorder is the mock recorder for MockClientGetter.
type MockClientGetterMockRecorder struct {
	mock *MockClientGetter
}

// NewMockClientGetter creates a new mock instance.
func NewMockClientGetter(ctrl *gomock.Controller) *MockClientGetter {
	mock := &MockClientGetter{ctrl: ctrl}
	mock.recorder = &MockClientGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientGetter) EXPECT() *MockClientGetterMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockClientGetter) NewClient(ctx context.Context, meta agent.Meta, oauthManager *oauth.Manager, cfg *types.AssistantMCP) (Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", ctx, meta, oauthManager, cfg)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockClientGetterMockRecorder) NewClient(ctx, meta, oauthManager, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockClientGetter)(nil).NewClient), ctx, meta, oauthManager, cfg)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CallTool mocks base method.
func (m *MockClient) CallTool(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTool", ctx, request)
	ret0, _ := ret[0].(*mcp.CallToolResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallTool indicates an expected call of CallTool.
func (mr *MockClientMockRecorder) CallTool(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTool", reflect.TypeOf((*MockClient)(nil).CallTool), ctx, request)
}

// ListTools mocks base method.
func (m *MockClient) ListTools(ctx context.Context, request mcp.ListToolsRequest) (*mcp.ListToolsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTools", ctx, request)
	ret0, _ := ret[0].(*mcp.ListToolsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTools indicates an expected call of ListTools.
func (mr *MockClientMockRecorder) ListTools(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTools", reflect.TypeOf((*MockClient)(nil).ListTools), ctx, request)
}
