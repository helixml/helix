// Code generated by MockGen. DO NOT EDIT.
// Source: gptscript.go
//
// Generated by this command:
//
//	mockgen -source gptscript.go -destination gptscript_mocks.go -package zedagent
//

// Package zedagent is a generated GoMock package.
package zedagent

import (
	context "context"
	reflect "reflect"

	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExecuteApp mocks base method.
func (m *MockExecutor) ExecuteApp(ctx context.Context, app *types.GptScriptGithubApp) (*types.GptScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteApp", ctx, app)
	ret0, _ := ret[0].(*types.GptScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteApp indicates an expected call of ExecuteApp.
func (mr *MockExecutorMockRecorder) ExecuteApp(ctx, app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteApp", reflect.TypeOf((*MockExecutor)(nil).ExecuteApp), ctx, app)
}

// ExecuteScript mocks base method.
func (m *MockExecutor) ExecuteScript(ctx context.Context, script *types.GptScript) (*types.GptScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteScript", ctx, script)
	ret0, _ := ret[0].(*types.GptScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript.
func (mr *MockExecutorMockRecorder) ExecuteScript(ctx, script any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockExecutor)(nil).ExecuteScript), ctx, script)
}

// MockZedAgentExecutor is a mock of ZedAgentExecutor interface.
type MockZedAgentExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockZedAgentExecutorMockRecorder
	isgomock struct{}
}

// MockZedAgentExecutorMockRecorder is the mock recorder for MockZedAgentExecutor.
type MockZedAgentExecutorMockRecorder struct {
	mock *MockZedAgentExecutor
}

// NewMockZedAgentExecutor creates a new mock instance.
func NewMockZedAgentExecutor(ctrl *gomock.Controller) *MockZedAgentExecutor {
	mock := &MockZedAgentExecutor{ctrl: ctrl}
	mock.recorder = &MockZedAgentExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZedAgentExecutor) EXPECT() *MockZedAgentExecutorMockRecorder {
	return m.recorder
}

// GetSession mocks base method.
func (m *MockZedAgentExecutor) GetSession(sessionID string) (*ZedSession, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(*ZedSession)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockZedAgentExecutorMockRecorder) GetSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockZedAgentExecutor)(nil).GetSession), sessionID)
}

// ListSessions mocks base method.
func (m *MockZedAgentExecutor) ListSessions() []*ZedSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessions")
	ret0, _ := ret[0].([]*ZedSession)
	return ret0
}

// ListSessions indicates an expected call of ListSessions.
func (mr *MockZedAgentExecutorMockRecorder) ListSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockZedAgentExecutor)(nil).ListSessions))
}

// StartZedAgent mocks base method.
func (m *MockZedAgentExecutor) StartZedAgent(ctx context.Context, agent *types.ZedAgent) (*types.ZedAgentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartZedAgent", ctx, agent)
	ret0, _ := ret[0].(*types.ZedAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartZedAgent indicates an expected call of StartZedAgent.
func (mr *MockZedAgentExecutorMockRecorder) StartZedAgent(ctx, agent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartZedAgent", reflect.TypeOf((*MockZedAgentExecutor)(nil).StartZedAgent), ctx, agent)
}

// StopZedAgent mocks base method.
func (m *MockZedAgentExecutor) StopZedAgent(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopZedAgent", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopZedAgent indicates an expected call of StopZedAgent.
func (mr *MockZedAgentExecutorMockRecorder) StopZedAgent(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopZedAgent", reflect.TypeOf((*MockZedAgentExecutor)(nil).StopZedAgent), ctx, sessionID)
}
