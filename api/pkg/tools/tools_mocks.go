// Code generated by MockGen. DO NOT EDIT.
// Source: tools.go
//
// Generated by this command:
//
//	mockgen -source tools.go -destination tools_mocks.go -package tools
//

// Package tools is a generated GoMock package.
package tools

import (
	context "context"
	reflect "reflect"

	types "github.com/helixml/helix/api/pkg/types"
	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockPlanner is a mock of Planner interface.
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
	isgomock struct{}
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner.
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance.
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// IsActionable mocks base method.
func (m *MockPlanner) IsActionable(ctx context.Context, sessionID, interactionID string, tools []*types.Tool, history []*types.ToolHistoryMessage, options ...Option) (*IsActionableResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sessionID, interactionID, tools, history}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsActionable", varargs...)
	ret0, _ := ret[0].(*IsActionableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActionable indicates an expected call of IsActionable.
func (mr *MockPlannerMockRecorder) IsActionable(ctx, sessionID, interactionID, tools, history any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sessionID, interactionID, tools, history}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActionable", reflect.TypeOf((*MockPlanner)(nil).IsActionable), varargs...)
}

// RunAPIActionWithParameters mocks base method.
func (m *MockPlanner) RunAPIActionWithParameters(ctx context.Context, req *types.RunAPIActionRequest, options ...Option) (*types.RunAPIActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAPIActionWithParameters", varargs...)
	ret0, _ := ret[0].(*types.RunAPIActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAPIActionWithParameters indicates an expected call of RunAPIActionWithParameters.
func (mr *MockPlannerMockRecorder) RunAPIActionWithParameters(ctx, req any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAPIActionWithParameters", reflect.TypeOf((*MockPlanner)(nil).RunAPIActionWithParameters), varargs...)
}

// RunAction mocks base method.
func (m *MockPlanner) RunAction(ctx context.Context, sessionID, interactionID string, tool *types.Tool, history []*types.ToolHistoryMessage, action string, options ...Option) (*RunActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sessionID, interactionID, tool, history, action}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunAction", varargs...)
	ret0, _ := ret[0].(*RunActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAction indicates an expected call of RunAction.
func (mr *MockPlannerMockRecorder) RunAction(ctx, sessionID, interactionID, tool, history, action any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sessionID, interactionID, tool, history, action}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAction", reflect.TypeOf((*MockPlanner)(nil).RunAction), varargs...)
}

// RunActionStream mocks base method.
func (m *MockPlanner) RunActionStream(ctx context.Context, sessionID, interactionID string, tool *types.Tool, history []*types.ToolHistoryMessage, action string, options ...Option) (*openai.ChatCompletionStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sessionID, interactionID, tool, history, action}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunActionStream", varargs...)
	ret0, _ := ret[0].(*openai.ChatCompletionStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunActionStream indicates an expected call of RunActionStream.
func (mr *MockPlannerMockRecorder) RunActionStream(ctx, sessionID, interactionID, tool, history, action any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sessionID, interactionID, tool, history, action}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunActionStream", reflect.TypeOf((*MockPlanner)(nil).RunActionStream), varargs...)
}

// ValidateAndDefault mocks base method.
func (m *MockPlanner) ValidateAndDefault(ctx context.Context, tool *types.Tool) (*types.Tool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndDefault", ctx, tool)
	ret0, _ := ret[0].(*types.Tool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAndDefault indicates an expected call of ValidateAndDefault.
func (mr *MockPlannerMockRecorder) ValidateAndDefault(ctx, tool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndDefault", reflect.TypeOf((*MockPlanner)(nil).ValidateAndDefault), ctx, tool)
}
