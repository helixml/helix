// Code generated by MockGen. DO NOT EDIT.
// Source: utils.go
//
// Generated by this command:
//
//	mockgen -source utils.go -destination utils_mocks.go -package runner
//

// Package runner is a generated GoMock package.
package runner

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFreePortFinder is a mock of FreePortFinder interface.
type MockFreePortFinder struct {
	ctrl     *gomock.Controller
	recorder *MockFreePortFinderMockRecorder
	isgomock struct{}
}

// MockFreePortFinderMockRecorder is the mock recorder for MockFreePortFinder.
type MockFreePortFinderMockRecorder struct {
	mock *MockFreePortFinder
}

// NewMockFreePortFinder creates a new mock instance.
func NewMockFreePortFinder(ctrl *gomock.Controller) *MockFreePortFinder {
	mock := &MockFreePortFinder{ctrl: ctrl}
	mock.recorder = &MockFreePortFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreePortFinder) EXPECT() *MockFreePortFinderMockRecorder {
	return m.recorder
}

// GetFreePort mocks base method.
func (m *MockFreePortFinder) GetFreePort() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreePort")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreePort indicates an expected call of GetFreePort.
func (mr *MockFreePortFinderMockRecorder) GetFreePort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreePort", reflect.TypeOf((*MockFreePortFinder)(nil).GetFreePort))
}
