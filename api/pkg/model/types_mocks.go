// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source types.go -destination types_mocks.go -package model
//

// Package model is a generated GoMock package.
package model

import (
	context "context"
	exec "os/exec"
	reflect "reflect"

	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockModel is a mock of Model interface.
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
	isgomock struct{}
}

// MockModelMockRecorder is the mock recorder for MockModel.
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance.
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// GetCommand mocks base method.
func (m *MockModel) GetCommand(ctx context.Context, sessionFilter types.SessionFilter, config types.RunnerProcessConfig) (*exec.Cmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand", ctx, sessionFilter, config)
	ret0, _ := ret[0].(*exec.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommand indicates an expected call of GetCommand.
func (mr *MockModelMockRecorder) GetCommand(ctx, sessionFilter, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockModel)(nil).GetCommand), ctx, sessionFilter, config)
}

// GetMemoryRequirements mocks base method.
func (m *MockModel) GetMemoryRequirements(mode types.SessionMode) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryRequirements", mode)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMemoryRequirements indicates an expected call of GetMemoryRequirements.
func (mr *MockModelMockRecorder) GetMemoryRequirements(mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryRequirements", reflect.TypeOf((*MockModel)(nil).GetMemoryRequirements), mode)
}

// GetTask mocks base method.
func (m *MockModel) GetTask(session *types.Session, fileManager ModelSessionFileManager) (*types.RunnerTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", session, fileManager)
	ret0, _ := ret[0].(*types.RunnerTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockModelMockRecorder) GetTask(session, fileManager any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockModel)(nil).GetTask), session, fileManager)
}

// GetTextStreams mocks base method.
func (m *MockModel) GetTextStreams(mode types.SessionMode, eventHandler WorkerEventHandler) (*TextStream, *TextStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextStreams", mode, eventHandler)
	ret0, _ := ret[0].(*TextStream)
	ret1, _ := ret[1].(*TextStream)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTextStreams indicates an expected call of GetTextStreams.
func (mr *MockModelMockRecorder) GetTextStreams(mode, eventHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextStreams", reflect.TypeOf((*MockModel)(nil).GetTextStreams), mode, eventHandler)
}

// GetType mocks base method.
func (m *MockModel) GetType() types.SessionType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types.SessionType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockModelMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockModel)(nil).GetType))
}

// PrepareFiles mocks base method.
func (m *MockModel) PrepareFiles(session *types.Session, isInitialSession bool, fileManager ModelSessionFileManager) (*types.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareFiles", session, isInitialSession, fileManager)
	ret0, _ := ret[0].(*types.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareFiles indicates an expected call of PrepareFiles.
func (mr *MockModelMockRecorder) PrepareFiles(session, isInitialSession, fileManager any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareFiles", reflect.TypeOf((*MockModel)(nil).PrepareFiles), session, isInitialSession, fileManager)
}

// MockModelSessionFileManager is a mock of ModelSessionFileManager interface.
type MockModelSessionFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockModelSessionFileManagerMockRecorder
	isgomock struct{}
}

// MockModelSessionFileManagerMockRecorder is the mock recorder for MockModelSessionFileManager.
type MockModelSessionFileManagerMockRecorder struct {
	mock *MockModelSessionFileManager
}

// NewMockModelSessionFileManager creates a new mock instance.
func NewMockModelSessionFileManager(ctrl *gomock.Controller) *MockModelSessionFileManager {
	mock := &MockModelSessionFileManager{ctrl: ctrl}
	mock.recorder = &MockModelSessionFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelSessionFileManager) EXPECT() *MockModelSessionFileManagerMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockModelSessionFileManager) DownloadFile(remotePath, localPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", remotePath, localPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockModelSessionFileManagerMockRecorder) DownloadFile(remotePath, localPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockModelSessionFileManager)(nil).DownloadFile), remotePath, localPath)
}

// DownloadFolder mocks base method.
func (m *MockModelSessionFileManager) DownloadFolder(remotePath, localPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFolder", remotePath, localPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFolder indicates an expected call of DownloadFolder.
func (mr *MockModelSessionFileManagerMockRecorder) DownloadFolder(remotePath, localPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFolder", reflect.TypeOf((*MockModelSessionFileManager)(nil).DownloadFolder), remotePath, localPath)
}

// GetFolder mocks base method.
func (m *MockModelSessionFileManager) GetFolder() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolder")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFolder indicates an expected call of GetFolder.
func (mr *MockModelSessionFileManagerMockRecorder) GetFolder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolder", reflect.TypeOf((*MockModelSessionFileManager)(nil).GetFolder))
}
