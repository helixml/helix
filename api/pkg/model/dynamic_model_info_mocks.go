// Code generated by MockGen. DO NOT EDIT.
// Source: dynamic_model_info.go
//
// Generated by this command:
//
//	mockgen -source dynamic_model_info.go -destination dynamic_model_info_mocks.go -package model
//

// Package model is a generated GoMock package.
package model

import (
	context "context"
	reflect "reflect"

	types "github.com/helixml/helix/api/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// Mockstore is a mock of store interface.
type Mockstore struct {
	ctrl     *gomock.Controller
	recorder *MockstoreMockRecorder
	isgomock struct{}
}

// MockstoreMockRecorder is the mock recorder for Mockstore.
type MockstoreMockRecorder struct {
	mock *Mockstore
}

// NewMockstore creates a new mock instance.
func NewMockstore(ctrl *gomock.Controller) *Mockstore {
	mock := &Mockstore{ctrl: ctrl}
	mock.recorder = &MockstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstore) EXPECT() *MockstoreMockRecorder {
	return m.recorder
}

// ListDynamicModelInfos mocks base method.
func (m *Mockstore) ListDynamicModelInfos(ctx context.Context, q *types.ListDynamicModelInfosQuery) ([]*types.DynamicModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDynamicModelInfos", ctx, q)
	ret0, _ := ret[0].([]*types.DynamicModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDynamicModelInfos indicates an expected call of ListDynamicModelInfos.
func (mr *MockstoreMockRecorder) ListDynamicModelInfos(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDynamicModelInfos", reflect.TypeOf((*Mockstore)(nil).ListDynamicModelInfos), ctx, q)
}
