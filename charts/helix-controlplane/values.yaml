# Default values for helix-controlplane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  serverUrl: http://localhost:8080

image:
  repository: registry.helixml.tech/helix/controlplane
  pullPolicy: Always
  tag: "latest"

tika:
  enabled: false
  image:
    repository: apache/tika
    tag: "2.9.2.1"

searxng:
  enabled: true
  image:
    repository: searxng/searxng
    tag: "latest"

chrome:
  enabled: true
  image:
    repository: ghcr.io/go-rod/rod
    tag: "v0.115.0"

typesense:
  enabled: false
  apiKey: typesense
  image:
    repository: registry.helixml.tech/helix/typesense
  persistence:
    enabled: true
    storageClass: ""
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    existingClaim: ""
    selector: {}
    dataSource: {}

pgvector:
  enabled: true
  auth:
    username: "postgres"
    password: "pgvector"
    database: "postgres"
    existingSecret: ""
    usernameKey: ""
    passwordKey: ""
    databaseKey: ""
  external:
    host: "localhost"
    port: 5432
    database: "postgres"
    user: "postgres"
    password: "pgvector"
    existingSecret: ""
    existingSecretHostKey: ""
    existingSecretPortKey: ""
    existingSecretUserKey: ""
    existingSecretDatabaseKey: ""
    existingSecretPasswordKey: ""
    annotations: {}
  persistence:
    enabled: true
    storageClass: ""
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    existingClaim: ""
    selector: {}
    dataSource: {}

gptscript:
  enabled: true
  image:
    repository: registry.helixml.tech/helix/gptscript-runner
  replicas: 2
  concurrency: 20
  maxTasks: 0

controlplane:
  logLevel: "INFO"
  runnerToken: ""
  runnerTokenExistingSecret: ""
  runnerTokenExistingSecretKey: ""
  licenseKey: ""
  licenseKeyExistingSecret: ""
  licenseKeyExistingSecretKey: ""
  keycloak:
    url: ""
    frontendUrl: ""
    user: ""
    password: ""
    existingSecret: ""
    existingSecretUserKey: ""
    existingSecretPasswordKey: ""
  admin:
    userSource: "env"
    userIds: "all"
  # AI Providers management - controls if users can add their own AI provider API keys
  providersManagementEnabled: true
  sidecar:
    enabled: false
    name: sidecar
    image: curlimages/curl:8.11.1
    imagePullPolicy: IfNotPresent
    command:
      - "/bin/sh"
      - "-c"
    args:
      - 'echo "Hello World"'
  haystack:
    enabled: true
    image:
      repository: registry.helixml.tech/helix/haystack
    embeddingsModel: "MrLight/dse-qwen2-2b-mrl-v1"
    embeddingsDim: "1536"
    chunkSize: "1000"
    chunkOverlap: "50"
  providers:
    vllm:
      baseUrl: ""
      apiKey: ""
      existingSecret: ""
      existingSecretApiKeyKey: ""
    openai:
      baseUrl: ""
      apiKey: ""
      existingSecret: ""
      existingSecretApiKeyKey: ""
    anthropic:
      baseUrl: ""
      apiKey: ""
      existingSecret: ""
      existingSecretApiKeyKey: ""
    togetherai:
      baseUrl: ""
      apiKey: ""
      existingSecret: ""
      existingSecretApiKeyKey: ""
  huggingface:
    token: ""
    existingSecret: ""
    existingSecretTokenKey: ""
  extraEnv: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

resources: {}

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 6
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 10
  failureThreshold: 6

persistence:
  enabled: true
  mountPath: /helix/controlplane
  subPath: ""
  gitDataPath: ""
  storageClass: ""
  annotations: {}
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  existingClaim: ""
  selector: {}
  dataSource: {}

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true
  auth:
    postgresPassword: ""
    username: helix
    password: "oh-hallo-insecure-password"
    database: helix
    existingSecret: ""
    postgresPasswordKey: "postgres-password"
    usernameKey: ""
    passwordKey: ""
    databaseKey: ""
  architecture: standalone
  external:
    host: ""
    port: 5432
    user: helix
    database: helix
    password: ""
    existingSecret: ""
    existingSecretHostKey: ""
    existingSecretPortKey: ""
    existingSecretUserKey: ""
    existingSecretDatabaseKey: ""
    existingSecretPasswordKey: ""
    annotations: {}
