#syntax=docker/dockerfile:1.4

# Runner build
FROM golang:1.22 AS go-build-env
WORKDIR /workspace/helix

# <- COPY go.mod and go.sum files to the workspace
COPY go.mod .
COPY go.sum .

RUN go mod download

# COPY the source code as the last step
COPY . .

# Run tidy and show git diff for go.sum
# RUN go mod tidy && git diff --exit-code -- go.sum

# Build the Go app
# RUN go mod tidy && go mod download && CGO_ENABLED=0 go build -ldflags "-s -w" -o /helix
RUN CGO_ENABLED=0 go build -ldflags "-s -w" -o /helix

# FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04
FROM winglian/axolotl:main-py3.10-cu118-2.0.1@sha256:71582175f32c1aca4f0355b8af62f627429a8a83eabbb84e18096490b1661d3c

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
WORKDIR /workspace

# TODO: not sure if this is necessary
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/usr/local/nvidia/lib64:/usr/local/nvidia/bin

# ====================================
# TODO: cache all the weights early on
# ====================================


# Fake venv - helix runner expects one but axolotl is the "root venv" (actually, default conda env) in the image
RUN mkdir -p /workspace/axolotl/venv/bin
RUN echo "echo \"Pretending to activate virtualenv (actually doing nothing)\"" > /workspace/axolotl/venv/bin/activate

# accumulate deb stuff here
RUN --mount=type=cache,target=/var/cache/apt apt-get update -qq && apt-get install -qqy \
    libgl1-mesa-glx ffmpeg libsm6 libxext6 wget software-properties-common python3 python3-pip git unzip wget python3-virtualenv && \    
    rm -rf /var/lib/apt/lists/*

# Checkout https://github.com/lukemarsden/axolotl/tree/new-long-running (see the hash for the specific version)
RUN cd /workspace/axolotl && \
    git remote rm origin && \
    git remote add lukefork https://github.com/lukemarsden/axolotl && \
    git fetch --all && \
    git checkout 74b760e673715e775a27483086c618f283a14361

# cog stuff
COPY cog/cog-0.0.1.dev-py3-none-any.whl /tmp/cog-0.0.1.dev-py3-none-any.whl
COPY cog/requirements.txt /tmp/requirements.txt

RUN --mount=type=cache,target=/root/.cache/pip cd /workspace && \
    git clone https://github.com/replicate/cog-sdxl && \
    cd cog-sdxl && \
    git checkout a8e10f8ad773ff53357b14d2175638419b0c3c91 && \
    virtualenv venv && \
    . venv/bin/activate && \
    pip install /tmp/cog-0.0.1.dev-py3-none-any.whl && \
    pip install -r /tmp/requirements.txt && \
    curl -o /usr/local/bin/pget -L "https://github.com/replicate/pget/releases/download/v0.0.3/pget" && chmod +x /usr/local/bin/pget && \
    wget http://thegiflibrary.tumblr.com/post/11565547760 -O face_landmarker_v2_with_blendshapes.task -q https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task
# what you sayin', cat?

# TODO: mount /root/.ollama
RUN curl -fsSL https://ollama.com/install.sh | sh

# so we don't have to fork upstream cog-sdxl repo
COPY cog/helix_cog_wrapper.py /workspace/cog-sdxl/helix_cog_wrapper.py

EXPOSE 5000
# CMD ["python", "-m", "cog.server.http"]

RUN mkdir -p /workspace/helix

WORKDIR /workspace/helix

# Copy runner directory from the repo
COPY runner ./runner

COPY --from=go-build-env /helix /workspace/helix/helix

ENTRYPOINT ["/workspace/helix/helix", "runner"]
