#syntax=docker/dockerfile:1.4

ARG TAG=main-empty
ARG UV_VERSION="0.5.4"

FROM ghcr.io/astral-sh/uv:${UV_VERSION} AS uv
FROM ghcr.io/astral-sh/uv:${UV_VERSION}-bookworm-slim AS diffusers-build-env
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy UV_PYTHON_INSTALL_DIR=/workspace/helix/runner/helix-diffusers/.python
WORKDIR /workspace/helix/runner/helix-diffusers
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=runner/helix-diffusers/.python-version,target=.python-version \
    --mount=type=bind,source=runner/helix-diffusers/uv.lock,target=uv.lock \
    --mount=type=bind,source=runner/helix-diffusers/pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev
ADD runner/helix-diffusers /workspace/helix/runner/helix-diffusers
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

### BUILD

FROM golang:1.23 AS go-build-env
WORKDIR /workspace/helix

# <- COPY go.mod and go.sum files to the workspace
COPY go.mod .
COPY go.sum .

RUN go mod download

# COPY the source code as the last step
COPY . .

# Run tidy and show git diff for go.sum
# RUN go mod tidy && git diff --exit-code -- go.sum

# Build the Go app
# RUN go mod tidy && go mod download && CGO_ENABLED=0 go build -ldflags "-s -w" -o /helix
ARG APP_VERSION="v0.0.0+unknown"
RUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg/mod CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/helixml/helix/api/pkg/data.Version=$APP_VERSION" -o /helix


### RUNNER CONTAINER

FROM registry.helix.ml/helix/runner-base:${TAG}

# Install ollama
RUN TEMP_DIR=$(mktemp -d /tmp/ollama_install_XXXXXX) && \
    curl --retry 5 -L https://github.com/ollama/ollama/releases/download/v0.3.13/ollama-linux-amd64.tgz -o $TEMP_DIR/ollama.tgz && \
    tar -xzf $TEMP_DIR/ollama.tgz -C $TEMP_DIR && \
    mv $TEMP_DIR/bin/ollama /usr/bin/ollama && \
    chmod +x /usr/bin/ollama && \
    cp -r $TEMP_DIR/lib/ollama /usr/lib/ && \
    rm -rf $TEMP_DIR

RUN mkdir -p /workspace/helix

WORKDIR /workspace/helix

# Copy runner directory from the repo
COPY runner ./runner

# Copy the diffusers build environment including Python
COPY --from=ghcr.io/astral-sh/uv:0.5.4 /uv /bin/uv
COPY --from=diffusers-build-env /workspace/helix/runner/helix-diffusers /workspace/helix/runner/helix-diffusers
ENV PATH="/workspace/helix/runner/helix-diffusers/.venv/bin:$PATH"

# Copy the cog wrapper, cog and cog-sdxl is installed in the base image, this is just the cog server
COPY cog/helix_cog_wrapper.py /workspace/cog-sdxl/helix_cog_wrapper.py

# So that the runner can function when run as non-root, symlink some stuff into
# locations in /tmp (needed for locked down OpenShift support)
RUN mkdir -p /tmp/helix/ollama /tmp/helix/src /tmp/helix/cache /tmp/helix/root-cache /tmp/helix/config /workspace/axolotl/dataset_cache && \
    rm -rf /root/.cache && ln -s /tmp/helix/root-cache /root/.cache && \
    rm -rf /.cache && ln -s /tmp/helix/cache /.cache && \
    rm -rf /.config && ln -s /tmp/helix/config /.config && \
    rm -rf /src && ln -s /tmp/helix/src /src && \
    rm -rf /.ollama && ln -s /tmp/helix/ollama /.ollama && \
    chmod -R 0777 /tmp/helix && chmod 0777 /root /workspace/cog-sdxl /workspace/axolotl /workspace/axolotl/dataset_cache

COPY --from=go-build-env /helix /workspace/helix/helix

ENTRYPOINT ["/workspace/helix/helix", "runner"]
