#syntax=docker/dockerfile:1.4

ARG TAG=latest-small
ARG UV_VERSION="0.5.4"
# Add arg for CPU/GPU mode
ARG DEVELOPMENT_CPU_ONLY=""
# Set vLLM version consistently - latest version (0.10.0) with proper compatibility
ARG VLLM_VERSION="0.10.0"

# Temporarily disable diffusers build to save space - uncomment to re-enable
# FROM ghcr.io/astral-sh/uv:${UV_VERSION}-bookworm-slim AS diffusers-build-env
# ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy UV_PYTHON_INSTALL_DIR=/workspace/helix/runner/helix-diffusers/.python
# WORKDIR /workspace/helix/runner/helix-diffusers
# RUN --mount=type=cache,target=/root/.cache/uv \
#     --mount=type=bind,source=runner/helix-diffusers/.python-version,target=.python-version \
#     --mount=type=bind,source=runner/helix-diffusers/uv.lock,target=uv.lock \
#     --mount=type=bind,source=runner/helix-diffusers/pyproject.toml,target=pyproject.toml \
#     uv sync --frozen --no-install-project --no-dev
# ADD runner/helix-diffusers /workspace/helix/runner/helix-diffusers
# RUN --mount=type=cache,target=/root/.cache/uv \
#     uv sync --frozen --no-dev

FROM ghcr.io/astral-sh/uv:${UV_VERSION} AS uv

### BUILD

FROM golang:1.24 AS go-build-env
WORKDIR /workspace/helix

# <- COPY go.mod and go.sum files to the workspace
COPY go.mod .
COPY go.sum .

# Create and set permissions on Go cache directories
RUN mkdir -p /go/pkg/mod /root/.cache/go-build && \
    chmod -R 777 /go/pkg/mod /root/.cache/go-build && \
    go mod download

# COPY the source code as the last step
COPY . .

# Run tidy and show git diff for go.sum
# RUN go mod tidy && git diff --exit-code -- go.sum

# Build the Go app
# RUN go mod tidy && go mod download && CGO_ENABLED=0 go build -ldflags "-s -w" -o /helix
ARG APP_VERSION="v0.0.0+unknown"
RUN --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg/mod CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/helixml/helix/api/pkg/data.Version=$APP_VERSION" -o /helix

# Stage for downloading vLLM templates
FROM alpine:latest as vllm-templates
ARG VLLM_VERSION

# Install git to clone the repository
RUN apk add --no-cache git curl

# Clone the vLLM repository at the specific version to get the example templates
WORKDIR /tmp
RUN git clone --depth 1 --branch v${VLLM_VERSION} https://github.com/vllm-project/vllm.git
# Create templates directory and copy all jinja templates
RUN mkdir -p /vllm-templates
RUN if [ -d "/tmp/vllm/examples" ]; then \
        cp /tmp/vllm/examples/*.jinja /vllm-templates/ 2>/dev/null || true; \
    fi

### RUNNER CONTAINER

# ============================================================================
# CLEAN vLLM-ONLY SETUP (MINIMAL CUDA BASE)  
# ============================================================================
# The runner-base image has been updated to use the newest CUDA runtime base:
# nvidia/cuda:12.9.1-cudnn-runtime-ubuntu24.04 with system Python 3.12
# This provides a minimal, modern foundation for vLLM while preserving model caching.
#
# WHAT WAS CHANGED IN BASE IMAGE:
# 1. Base: nvidia/cuda:12.9.1-cudnn-runtime-ubuntu24.04 (newest CUDA + Ubuntu 24.04)
# 2. Python: System Python 3.12 (no miniconda complexity)
# 3. Axolotl: Installation commented out (easy to restore)  
# 4. Packages: Minimal system packages only
#
# HOW TO RESTORE AXOLOTL:
# 1. In base-images/Dockerfile.runner: Change FROM back to winglian/axolotl image  
# 2. In base-images/Dockerfile.runner: Re-add miniconda installation
# 3. In base-images/Dockerfile.runner: Uncomment axolotl installation section
# 4. Update Go runtime files to use miniconda paths (see comments in files)
# ============================================================================

FROM registry.helixml.tech/helix/runner-base:${TAG}

# Pass the CPU flag through to this stage
ARG DEVELOPMENT_CPU_ONLY=""
# Pass the vLLM version
ARG VLLM_VERSION

# Install ollama (keeping independent version for upgrade flexibility)
RUN TEMP_DIR=$(mktemp -d /tmp/ollama_install_XXXXXX) && \
    curl --retry 5 -L https://github.com/ollama/ollama/releases/download/v0.9.6/ollama-linux-amd64.tgz -o $TEMP_DIR/ollama.tgz && \
    tar -xzf $TEMP_DIR/ollama.tgz -C $TEMP_DIR && \
    mv $TEMP_DIR/bin/ollama /usr/bin/ollama && \
    chmod +x /usr/bin/ollama && \
    cp -r $TEMP_DIR/lib/ollama /usr/lib/ && \
    rm -rf $TEMP_DIR

# Copy vLLM requirements file with ALL dependencies precisely pinned
COPY requirements-vllm.txt /tmp/requirements-vllm.txt

# Copy UV binary before we use it
COPY --from=uv /uv /bin/uv

# Create clean vLLM virtualenv using system Python 3.12 (Ubuntu 24.04)
# This isolates vLLM from any system packages - completely clean environment  
RUN python3 -m venv /workspace/vllm/venv && \
    echo "Installing vLLM into clean virtualenv using UV (much faster than pip)" && \
    /workspace/vllm/venv/bin/python -m pip install uv && \
    cd /workspace/vllm && \
    VIRTUAL_ENV=/workspace/vllm/venv PATH="/workspace/vllm/venv/bin:$PATH" \
    /workspace/vllm/venv/bin/uv pip install -r /tmp/requirements-vllm.txt

# Create the examples directory in the vLLM venv package where it will look for templates (Python 3.12)
RUN mkdir -p /workspace/vllm/venv/lib/python3.12/site-packages/vllm/examples

# Copy the example templates to the vLLM venv package examples directory  
COPY --from=vllm-templates /vllm-templates/* /workspace/vllm/venv/lib/python3.12/site-packages/vllm/examples/

# Create a clean /vllm directory with examples subdirectory
RUN mkdir -p /vllm/examples

# Copy templates directly to /vllm/examples where the Go code will look for them
COPY --from=vllm-templates /vllm-templates/* /vllm/examples/

# Copy runner directory from the repo
COPY runner ./runner

# Diffusers disabled to save space - uncomment to re-enable:
# COPY --from=diffusers-build-env /workspace/helix/runner/helix-diffusers /workspace/helix/runner/helix-diffusers
# ENV PATH="/workspace/helix/runner/helix-diffusers/.venv/bin:$PATH"

# So that the runner can function when run as non-root, symlink some stuff into
# locations in /tmp (needed for locked down OpenShift support)
RUN mkdir -p /tmp/helix/ollama /tmp/helix/src /tmp/helix/cache /tmp/helix/root-cache /tmp/helix/config /workspace/axolotl/dataset_cache && \
    rm -rf /root/.cache && ln -s /tmp/helix/root-cache /root/.cache && \
    rm -rf /.cache && ln -s /tmp/helix/cache /.cache && \
    rm -rf /.config && ln -s /tmp/helix/config /.config && \
    rm -rf /src && ln -s /tmp/helix/src /src && \
    rm -rf /.ollama && ln -s /tmp/helix/ollama /.ollama && \
    chmod -R 0777 /tmp/helix && chmod 0777 /root

# ============================================================================
# AXOLOTL FAKE VENV (for future axolotl restoration)
# The helix runner expects /workspace/axolotl/venv/ to exist even when not using axolotl
# When axolotl is re-enabled, this fake venv becomes a pointer to miniconda
# ============================================================================
#RUN mkdir -p /workspace/axolotl/dataset_cache /workspace/axolotl/venv/bin && \
#    echo "echo \"Pretending to activate virtualenv (actually doing nothing)\"" > /workspace/axolotl/venv/bin/activate && \
#    chmod 0777 /workspace/axolotl /workspace/axolotl/dataset_cache

COPY --from=go-build-env /helix /workspace/helix/helix

ENTRYPOINT ["/workspace/helix/helix", "runner"]
