# ====================================================================
# Go build stage (contains Helix binary, Go runtime, and air)
# ====================================================================
FROM golang:1.24 AS go-build-env

# Install air with cache
RUN go install github.com/air-verse/air@v1.52.3

# Set up Go cache directories
ENV GOCACHE=/go/cache/build
ENV GOMODCACHE=/go/cache/mod
RUN mkdir -p /go/cache/build /go/cache/mod

WORKDIR /app

# Copy go.mod and go.sum first for better layer caching
COPY go.mod go.sum ./
RUN --mount=type=cache,target=/go/cache/mod \
    --mount=type=cache,target=/go/cache/build \
    go mod download

# Copy source code
COPY api ./api
COPY .git /.git

# Build the application with cache mounts
WORKDIR /app/api
RUN --mount=type=cache,target=/go/cache/mod \
    --mount=type=cache,target=/go/cache/build \
    CGO_ENABLED=0 go build -buildvcs=false -ldflags "-s -w" -o /helix

# VNC + VirtualGL stage for GPU-accelerated remote desktop
FROM ubuntu:25.04

# Install base packages
RUN apt-get update && apt-get install -y \
    wget curl ca-certificates gnupg software-properties-common \
    # Basic build tools (still needed for some components)
    git cmake build-essential \
    libcurl4-openssl-dev libssl-dev \
    libudev-dev libpci-dev jq \
    && rm -rf /var/lib/apt/lists/*

# Install Wayland compositor and VNC server with GPU support
RUN apt-get update && apt-get install -y \
    # Wayland VNC server and compositors
    wayvnc cage sway-backgrounds weston \
    # Try to install Hyprland (ignore failure)
    && (apt-get install -y hyprland || echo "Hyprland not available, using fallback") \
    # Illogical-impulse dotfiles dependencies (Ubuntu equivalents)
    # Basic utilities
    && apt-get install -y \
    bc coreutils cmake curl rsync wget ripgrep jq meson xdg-user-dirs unzip \
    # Fonts and theming (Ubuntu equivalents where available)
    fontconfig eza fish kitty \
    # Widgets and tools
    glib2.0-bin wl-clipboard translate-shell \
    # Audio tools
    pipewire-audio pulseaudio-utils alsa-utils \
    # Python for matugen, neural TTS, and other tools
    python3 python3-pip python3-venv \
    # Development tools and dependencies for Zed
    && apt-get install -y \
    wget git unzip curl sqlite3 ca-certificates \
    build-essential cmake \
    nodejs npm python3 python3-pip \
    # Intel/Mesa GPU drivers
    va-driver-all intel-media-va-driver-non-free \
    libva-drm2 libva-x11-2 libvpl2 \
    # Core Mesa/OpenGL libraries for GPU acceleration
    mesa-utils mesa-utils-extra \
    libgl1-mesa-dri libglx-mesa0 \
    libegl-mesa0 libgles2-mesa-dev \
    libgbm1 libdrm2 \
    # Hardware detection tools and kernel module support
    pciutils lshw usbutils kmod libkmod2 \
    # Wayland display protocol libraries
    libwayland-dev libwayland-server0 libinput-dev libxkbcommon-dev \
    # Zed runtime dependencies
    libfontconfig1 libfreetype6 libxcb1 libxcb-render0 libxcb-shape0 \
    libxcb-xfixes0 libxcb-shm0 libxkbcommon0 libxkbcommon-x11-0 \
    libasound2t64 libssl3 libgtk-3-0 libgdk-pixbuf2.0-0 libpango-1.0-0 libcairo2 \
    # DBus and session management
    dbus-x11 dbus \
    # XWayland for X11 app compatibility
    xwayland \
    # Additional tools
    supervisor nano vim \
    && rm -rf /var/lib/apt/lists/*

# Add NVIDIA CUDA runtime libraries for GPU acceleration
RUN <<_ADD_NVRTC
    #!/bin/bash
    set -e

    # Extra deps for NVIDIA CUDA runtime
    apt-get update -y
    apt-get install -y unzip curl

    cd /tmp
    curl -fsSL -o nvidia_cuda_nvrtc_linux_x86_64.whl "https://developer.download.nvidia.com/compute/redist/nvidia-cuda-nvrtc/nvidia_cuda_nvrtc-11.0.221-cp36-cp36m-linux_x86_64.whl"
    unzip -joq -d ./nvrtc nvidia_cuda_nvrtc_linux_x86_64.whl
    cd nvrtc
    chmod 755 libnvrtc*
    find . -maxdepth 1 -type f -name "*libnvrtc.so.*" -exec sh -c 'ln -snf $(basename {}) libnvrtc.so' \;
    mkdir -p /usr/local/nvidia/lib
    mv -f libnvrtc* /usr/local/nvidia/lib
    rm -rf /tmp/*

    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
    ldconfig

    # Cleanup
    apt-get remove -y --purge unzip curl
    rm -rf /var/lib/apt/lists/*
_ADD_NVRTC


# Install Sunshine runtime dependencies
RUN apt-get update && apt-get install -y \
    debianutils libcap2 libcurl4 libdrm2 libgbm1 libevdev2 \
    libnuma1 libopus0 libpulse0 libva2 libva-drm2 \
    libwayland-client0 libx11-6 miniupnpc openssl \
    libayatana-appindicator3-1 libnotify4 \
    && rm -rf /var/lib/apt/lists/*

# Install Sunshine from ICU 76-compatible .deb package
COPY sunshine-ubuntu-25.04-icu76-fixed.deb /tmp/sunshine.deb
RUN dpkg -i /tmp/sunshine.deb && rm /tmp/sunshine.deb

# Install illogical-impulse specific tools (fonts installation simplified for now)
RUN apt-get update && apt-get install -y \
    # Essential tools for illogical-impulse
    fuzzel python3-pip \
    # Try to install Hyprland tools if available
    && (apt-get install -y hypridle hyprlock hyprpicker 2>/dev/null || echo "Some Hyprland tools not available") \
    # Install matugen alternative
    && python3 -m pip install --break-system-packages material-color-utilities || echo "matugen alternative install failed" \
    # Install Coqui TTS for high-quality neural robot voice
    && python3 -m pip install --break-system-packages TTS || echo "Coqui TTS install failed, will use fallback" \
    # Cleanup
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Add Go to PATH (will be copied later)
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOMODCACHE="/go/pkg/mod"
ENV GOCACHE="/root/.cache/go-build"

# Fix git ownership issue for mounted source code (git is installed in the previous step)
RUN git config --global --add safe.directory /workspace/helix

# Configure ubuntu user for Wayland sessions (user may already exist)
RUN echo 'ubuntu:helix123' | chpasswd && \
    usermod -aG sudo ubuntu 2>/dev/null || useradd -m -s /bin/bash ubuntu && echo 'ubuntu:helix123' | chpasswd && usermod -aG sudo ubuntu

# Add ubuntu user to video and render groups for GPU access
RUN groupadd -f -g 992 render && usermod -aG video,render ubuntu

# Install MCP filesystem server
RUN npm install -g @modelcontextprotocol/server-filesystem || echo "MCP install failed, continuing..."

# Create work directory for ubuntu user
RUN mkdir -p /home/ubuntu/work && chown ubuntu:ubuntu /home/ubuntu/work

# Install Ghostty terminal at build time (moved from runtime for efficiency)
RUN apt-get update && apt-get install -y curl \
    # GTK and GUI dependencies for Ghostty
    libgtk-4-dev libgtk-4-1 libadwaita-1-0 \
    libgraphene-1.0-0 libcairo2 libcairo-gobject2 \
    libgdk-pixbuf-2.0-0 libpango-1.0-0 libpangocairo-1.0-0 \
    libfontconfig1 libfreetype6 libharfbuzz0b \
    libglib2.0-0 libgobject-2.0-0 libgio-2.0-0 \
    # Additional runtime dependencies
    libegl1 libgl1 libwayland-client0 libwayland-cursor0 libwayland-egl1 \
    libx11-6 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 \
    && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/mkasberg/ghostty-ubuntu/HEAD/install.sh)" || echo "Ghostty installation failed, continuing with alternatives" && \
    rm -rf /var/lib/apt/lists/*

# Install Google Chrome
RUN curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Update Chrome desktop file to use Wayland properly
RUN sed -i 's|^Exec=/usr/bin/google-chrome-stable|Exec=env XDG_RUNTIME_DIR=/tmp/runtime-ubuntu WAYLAND_DISPLAY=wayland-1 /usr/bin/google-chrome-stable --enable-features=UseOzonePlatform --ozone-platform=wayland --no-sandbox --disable-dev-shm-usage --disable-gpu-sandbox|g' /usr/share/applications/google-chrome.desktop

# Install Zed icon for dock display
RUN mkdir -p /usr/share/icons/hicolor/512x512/apps \
    && curl -L 'https://zed.dev/_next/static/media/stable-app-logo.9b5f959f.png' -o /usr/share/icons/hicolor/512x512/apps/zed.png \
    && gtk-update-icon-cache /usr/share/icons/hicolor/ 2>/dev/null || true

# Install Material Design Icons font for AGS icons
RUN apt-get update && apt-get install -y fonts-material-design-icons-iconfont && rm -rf /var/lib/apt/lists/*

# Install Material Symbols Rounded font for AGS
RUN mkdir -p /usr/share/fonts/truetype/material-symbols \
    && curl -L 'https://github.com/google/material-design-icons/raw/master/variablefont/MaterialSymbolsRounded%5BFILL%2CGRAD%2Copsz%2Cwght%5D.ttf' \
       -o /usr/share/fonts/truetype/material-symbols/MaterialSymbolsRounded.ttf \
    && fc-cache -f -v

# Create illogical-impulse setup script
COPY <<EOF /setup-illogical-impulse.sh
#!/bin/bash
set -e

# Only run once
if [ -f "/home/ubuntu/.illogical-impulse-installed" ]; then
    exit 0
fi

echo "Setting up illogical-impulse dotfiles..."

# Switch to ubuntu user
su ubuntu -c '
export USER=ubuntu
export HOME=/home/ubuntu

# Clone the dotfiles if not already present
if [ ! -d "/home/ubuntu/.config/hypr-dots" ]; then
    cd /home/ubuntu
    git clone https://github.com/end-4/dots-hyprland.git .config/hypr-dots
fi

# Copy key configuration files
cd /home/ubuntu/.config/hypr-dots

# Copy Hyprland config (backup existing)
mkdir -p /home/ubuntu/.config/hypr
if [ -f "/home/ubuntu/.config/hypr/hyprland.conf" ]; then
    cp /home/ubuntu/.config/hypr/hyprland.conf /home/ubuntu/.config/hypr/hyprland.conf.backup
fi

# Copy illogical-impulse configs (selectively to avoid overwriting our working setup)
cp -r .config/ags /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/gtk-3.0 /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/gtk-4.0 /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/kitty /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/fuzzel /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/fish /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/starship.toml /home/ubuntu/.config/ 2>/dev/null || true

# Copy Hyprland configuration structure (do NOT copy hyprland.conf itself)
cp -r .config/hypr /home/ubuntu/.config/hypr-dots-backup 2>/dev/null || true

# Set up wallpapers
mkdir -p /home/ubuntu/Pictures/wallpapers
cp -r Pictures/* /home/ubuntu/Pictures/ 2>/dev/null || true
cp -r wallpapers/* /home/ubuntu/Pictures/wallpapers/ 2>/dev/null || true

# Create a flag file to indicate setup is complete
touch /home/ubuntu/.illogical-impulse-installed

echo "illogical-impulse dotfiles setup complete!"
'

EOF
RUN chmod +x /setup-illogical-impulse.sh

# Create startup script for Helix External Agent Runner
COPY <<EOF /start-helix-agent.sh
#!/bin/bash
set -e
echo "Starting Helix External Agent Runner..."

# Set up environment for GPU acceleration
export DISPLAY=:1
export VGL_DISPLAY=:0

# Start the external agent runner with environment variables
exec /usr/local/bin/helix external-agent-runner
EOF

RUN chmod +x /start-helix-agent.sh

# Create Sunshine configuration
RUN mkdir -p /etc/sunshine
COPY <<EOF /etc/sunshine/sunshine.conf
# Sunshine Moonlight Server Configuration for Helix

# Network configuration
sunshine_name = helix-moonlight
port = 47989

# Video configuration
fps = [10, 30, 60, 120]
resolutions = [
    352x240,
    480x360,
    858x480,
    1280x720,
    1920x1080,
    2560x1440,
    3840x2160,
]

# Encoder settings - prefer hardware acceleration
encoder = nvenc
adapter_name = 0
output_name = 0

# Capture method for Wayland - force no permission prompts
capture = wlr
wlr_force_headless = true

# Audio configuration
audio_sink = auto
virtual_sink = sunshine-audio

# Input configuration
gamepad = auto

# Security - disable permission prompts in container environment
pin_timeout = 15
allow_elevated = true

# File paths
file_apps = /etc/sunshine/apps.json

# Logging
min_log_level = info
log_path = /var/log/sunshine.log

# Container-specific settings to bypass permission systems
global_prep_cmd = []
EOF

# Create Sunshine apps configuration
COPY <<EOF /etc/sunshine/apps.json
{
  "apps": [
    {
      "name": "Helix Desktop",
      "cmd": [],
      "detached": [],
      "image-path": "",
      "working-dir": ""
    }
  ]
}
EOF

# Dynamic Sunshine script creation (inline to avoid missing file issues)
RUN echo '#!/bin/bash\necho "Sunshine config generation placeholder"' > /usr/local/bin/generate-sunshine-config.sh && \
    echo '#!/bin/bash\necho "Sunshine config refresher placeholder"' > /usr/local/bin/sunshine-config-refresher.sh && \
    chmod +x /usr/local/bin/generate-sunshine-config.sh /usr/local/bin/sunshine-config-refresher.sh

# Create Sunshine startup script
COPY <<EOF /start-moonlight.sh
#!/bin/bash
set -e

echo "Starting Sunshine Moonlight server..."

# Runtime directory for sockets
export XDG_RUNTIME_DIR=/tmp/runtime-ubuntu

# GPU acceleration settings
export LIBVA_DRIVER_NAME=nvidia
export NVIDIA_VISIBLE_DEVICES=all
export NVIDIA_DRIVER_CAPABILITIES=all
export __GLX_VENDOR_LIBRARY_NAME=nvidia

# Wayland specific settings for capture
export WAYLAND_DISPLAY=wayland-1

# Wait for Wayland display to be ready
echo "Waiting for Wayland display..."
timeout=30
while [ \$timeout -gt 0 ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-0" ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-1" ]; do
    sleep 1
    timeout=\$((timeout - 1))
done

if [ ! -S "\$XDG_RUNTIME_DIR/wayland-0" ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-1" ]; then
    echo "Error: Wayland display not ready after 30 seconds"
    exit 1
fi

# Set the Wayland display
if [ -S "\$XDG_RUNTIME_DIR/wayland-1" ]; then
    export WAYLAND_DISPLAY=wayland-1
else
    export WAYLAND_DISPLAY=wayland-0
fi

echo "Using Wayland display: \$WAYLAND_DISPLAY"

# Generate dynamic Sunshine config based on active Helix sessions
echo "Generating Sunshine config for active sessions..."
/usr/local/bin/generate-sunshine-config.sh

# Start config refresher in background
echo "Starting Sunshine config refresher..."
/usr/local/bin/sunshine-config-refresher.sh &

# Start Sunshine Moonlight server
echo "Starting Sunshine with GPU acceleration and Wayland capture"
exec sunshine
EOF

# Copy Wayland VNC startup script
COPY start-wayland-vnc.sh /start-wayland-vnc.sh
RUN chmod +x /start-wayland-vnc.sh /start-moonlight.sh

# Environment variables for Wayland
ENV WAYLAND_DISPLAY=wayland-0 \
    XDG_RUNTIME_DIR=/tmp/runtime-ubuntu \
    WLR_RENDERER=gles2 \
    WLR_BACKENDS=headless \
    API_HOST=http://api:8080 \
    CONCURRENCY=5 \
    MAX_TASKS=0 \
    WORKSPACE_DIR=/tmp/workspace \
    VNC_PASSWORD=helix123

# Expose VNC port and Moonlight ports
EXPOSE 5901 3030
# Moonlight ports (Sunshine uses standard GameStream ports)
EXPOSE 47984/tcp 47989/tcp 47999/udp 48010/tcp 48100/udp 48200/udp

# AGS (Aylur's GTK Shell) build stage - cached separately for efficiency
RUN apt-get update && apt-get install -y \
    # AGS build dependencies
    git meson npm \
    libgjs-dev libgtk-3-dev libgtk-layer-shell-dev \
    libpulse-dev libpam0g-dev libglib2.0-dev \
    gir1.2-gtk-3.0 gir1.2-glib-2.0 gobject-introspection \
    libgirepository1.0-dev \
    # AGS runtime dependencies
    gvfs gjs glib2.0-bin libglib2.0-0 libgtk-3-0 \
    libgtk-layer-shell0 libpulse0 libpam0g \
    && rm -rf /var/lib/apt/lists/*

# Build AGS v1 (ii-agsv1) - cached separately
RUN npm install -g typescript && \
    cd /tmp && \
    git clone https://github.com/end-4/ii-agsv1.git && \
    cd ii-agsv1 && \
    npm install && \
    meson setup build --libdir "lib/ii-agsv1" -Dbuild_types=true && \
    meson compile -C build && \
    meson install -C build && \
    # Create agsv1 symlink (following the PKGBUILD pattern)
    rm -f /usr/bin/ags && \
    ln -sf /usr/local/share/com.github.Aylur.ags/com.github.Aylur.ags /usr/bin/agsv1 && \
    # Cleanup build files
    rm -rf /tmp/ii-agsv1

# Add SCSS compilation dependencies for dots-hyprland AGS
RUN apt-get update && apt-get install -y \
    # SCSS compiler and build tools
    sass \
    # Node.js build tools for material design colors
    build-essential \
    # Notification support for AGS
    libnotify-bin libnotify-dev gir1.2-notify-0.7 \
    # System tray support for AGS
    libdbusmenu-gtk3-dev gir1.2-dbusmenu-glib-0.4 gir1.2-dbusmenu-gtk3-0.4 \
    # GtkSource library for AGS
    libgtksourceview-3.0-dev gir1.2-gtksource-3.0 \
    && rm -rf /var/lib/apt/lists/*

# Create user options for dots-hyprland AGS with Chrome in dock
RUN mkdir -p /home/ubuntu/.config/ags && \
    echo '{"dock": {"enabled": true, "pinnedApps": ["google-chrome", "firefox", "org.gnome.Nautilus", "foot", "ghostty"]}}' > /home/ubuntu/.config/ags/user_options.jsonc && \
    chown -R ubuntu:ubuntu /home/ubuntu/.config

# Start Wayland VNC
ENTRYPOINT ["/start-wayland-vnc.sh"]

# Download and install official Zed release
RUN export SHELL=/bin/bash && curl -fsSL https://zed.dev/install.sh | sh && \
    # Move entire zed.app to system location for all users
    mv /root/.local/zed.app /usr/local/ && \
    # Create direct symlink to the actual binary (not copying the symlink)
    ln -sf /usr/local/zed.app/bin/zed /usr/local/bin/zed && \
    # Copy desktop file to system location and fix paths
    cp /root/.local/share/applications/dev.zed.Zed.desktop /usr/share/applications/ && \
    # Update desktop file to use system app path
    sed -i 's|/root/.local/zed.app|/usr/local/zed.app|g' /usr/share/applications/dev.zed.Zed.desktop

# Copy everything from Go build stage LAST to avoid cache invalidation of expensive compilation steps
COPY --from=go-build-env /usr/local/go /usr/local/go
COPY --from=go-build-env /go/bin/air /usr/local/bin/air
COPY --from=go-build-env /helix /usr/local/bin/helix
