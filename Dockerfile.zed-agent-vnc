# Build stage for Go application
FROM golang:1.24 AS go-build-env
WORKDIR /app
COPY go.mod .
COPY go.sum .
RUN go mod download
COPY api ./api
COPY .git /.git
WORKDIR /app/api
RUN apt-get update && apt-get install -y gcc g++ libc6-dev && rm -rf /var/lib/apt/lists/*
RUN go install github.com/air-verse/air@v1.52.3
RUN CGO_ENABLED=0 go build -buildvcs=false -ldflags "-s -w" -o /helix

# VNC + VirtualGL stage for GPU-accelerated remote desktop
FROM ubuntu:25.04

# Install base packages
RUN apt-get update && apt-get install -y \
    wget curl ca-certificates gnupg software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Install Weston and VNC server
RUN apt-get update && apt-get install -y \
    # Weston compositor and VNC server
    weston wayvnc \
    # Illogical-impulse dotfiles dependencies (Ubuntu equivalents)
    # Basic utilities
    && apt-get install -y \
    bc coreutils cmake curl rsync wget ripgrep jq meson xdg-user-dirs unzip \
    # Fonts and theming (Ubuntu equivalents where available)
    fontconfig eza fish kitty \
    # Widgets and tools
    glib2.0-bin wl-clipboard translate-shell \
    # Audio tools
    pipewire-audio pulseaudio-utils alsa-utils \
    # Python for matugen and other tools
    python3 python3-pip python3-venv \
    # Development tools and dependencies for Zed
    && apt-get install -y \
    wget git unzip curl sqlite3 ca-certificates \
    build-essential cmake \
    nodejs npm python3 python3-pip \
    # Intel/Mesa GPU drivers (following Wolf's proven pattern)
    va-driver-all intel-media-va-driver-non-free \
    libva-drm2 libva-x11-2 libvpl2 \
    # Core Mesa/OpenGL libraries for GPU acceleration
    mesa-utils mesa-utils-extra \
    libgl1-mesa-dri libglx-mesa0 \
    libegl-mesa0 libgles2-mesa-dev \
    libgbm1 libdrm2 \
    # Hardware detection tools and kernel module support
    pciutils lshw usbutils kmod libkmod2 \
    # Wayland display protocol libraries (Wolf dependencies)
    libwayland-dev libwayland-server0 libinput-dev libxkbcommon-dev \
    # Zed runtime dependencies
    libfontconfig1 libfreetype6 libxcb1 libxcb-render0 libxcb-shape0 \
    libxcb-xfixes0 libxcb-shm0 libxkbcommon0 libxkbcommon-x11-0 \
    libasound2t64 libssl3 libgtk-3-0 libgdk-pixbuf2.0-0 libpango-1.0-0 libcairo2 \
    # DBus and session management
    dbus-x11 dbus \
    # XWayland for X11 app compatibility
    xwayland \
    # Additional tools and FreeRDP for RDP key generation
    supervisor nano vim openssl freerdp2-dev \
    && rm -rf /var/lib/apt/lists/*

# Add NVIDIA CUDA runtime libraries (following Wolf's proven approach)
RUN <<_ADD_NVRTC
    #!/bin/bash
    set -e

    # Extra deps for NVIDIA CUDA runtime
    apt-get update -y
    apt-get install -y unzip curl

    cd /tmp
    curl -fsSL -o nvidia_cuda_nvrtc_linux_x86_64.whl "https://developer.download.nvidia.com/compute/redist/nvidia-cuda-nvrtc/nvidia_cuda_nvrtc-11.0.221-cp36-cp36m-linux_x86_64.whl"
    unzip -joq -d ./nvrtc nvidia_cuda_nvrtc_linux_x86_64.whl
    cd nvrtc
    chmod 755 libnvrtc*
    find . -maxdepth 1 -type f -name "*libnvrtc.so.*" -exec sh -c 'ln -snf $(basename {}) libnvrtc.so' \;
    mkdir -p /usr/local/nvidia/lib
    mv -f libnvrtc* /usr/local/nvidia/lib
    rm -rf /tmp/*

    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
    ldconfig

    # Cleanup
    apt-get remove -y --purge unzip curl
    rm -rf /var/lib/apt/lists/*
_ADD_NVRTC

# Copy Go from build stage for air hot reloading
COPY --from=go-build-env /usr/local/go /usr/local/go

# Add Go to PATH
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOMODCACHE="/go/pkg/mod"
ENV GOCACHE="/root/.cache/go-build"

# Fix git ownership issue for mounted source code (git is installed in the previous step)
RUN git config --global --add safe.directory /workspace/helix

# Create symlink to mounted zed-build directory
RUN ln -sf /zed-build/zed /usr/local/bin/zed

# Copy the compiled Helix binary and air
COPY --from=go-build-env /helix /usr/local/bin/helix
COPY --from=go-build-env /go/bin/air /usr/local/bin/air

# Configure ubuntu user for Wayland sessions (user may already exist)
RUN echo 'ubuntu:helix123' | chpasswd && \
    usermod -aG sudo ubuntu 2>/dev/null || useradd -m -s /bin/bash ubuntu && echo 'ubuntu:helix123' | chpasswd && usermod -aG sudo ubuntu

# Add ubuntu user to video and render groups for GPU access
RUN groupadd -f -g 992 render && usermod -aG video,render ubuntu

# Install MCP filesystem server
RUN npm install -g @modelcontextprotocol/server-filesystem || echo "MCP install failed, continuing..."

# Create workspace directory
RUN mkdir -p /workspace && chmod 755 /workspace

# Install Ghostty terminal at build time (moved from runtime for efficiency)
RUN apt-get update && apt-get install -y curl \
    # GTK and GUI dependencies for Ghostty
    libgtk-4-dev libgtk-4-1 libadwaita-1-0 \
    libgraphene-1.0-0 libcairo2 libcairo-gobject2 \
    libgdk-pixbuf-2.0-0 libpango-1.0-0 libpangocairo-1.0-0 \
    libfontconfig1 libfreetype6 libharfbuzz0b \
    libglib2.0-0 libgobject-2.0-0 libgio-2.0-0 \
    # Additional runtime dependencies
    libegl1 libgl1 libwayland-client0 libwayland-cursor0 libwayland-egl1 \
    libx11-6 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 \
    && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/mkasberg/ghostty-ubuntu/HEAD/install.sh)" || echo "Ghostty installation failed, continuing with alternatives" && \
    rm -rf /var/lib/apt/lists/*

# Install Google Chrome using modern method (apt-key is deprecated)
RUN mkdir -p /etc/apt/keyrings \
    && wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | tee /etc/apt/keyrings/google-chrome.gpg > /dev/null \
    && echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Create desktop entries for application launcher
RUN mkdir -p /home/ubuntu/.local/share/applications \
    && chown -R ubuntu:ubuntu /home/ubuntu/.local

# Create Ghostty desktop entry
RUN cat > /home/ubuntu/.local/share/applications/ghostty.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Ghostty Terminal
Comment=Fast, feature-rich, and cross-platform terminal emulator
Exec=env WAYLAND_DISPLAY=wayland-0 ghostty
Icon=utilities-terminal
Terminal=false
Categories=System;TerminalEmulator;
StartupWMClass=ghostty
EOF

# Create Chrome desktop entry for Wayland
RUN cat > /home/ubuntu/.local/share/applications/chrome-wayland.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Google Chrome
Comment=Access the Internet
Exec=env WAYLAND_DISPLAY=wayland-0 google-chrome --enable-features=UseOzonePlatform --ozone-platform=wayland --no-sandbox --disable-dev-shm-usage %U
Icon=google-chrome
Terminal=false
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml+xml;x-scheme-handler/http;x-scheme-handler/https;
StartupWMClass=Google-chrome
EOF

# Fix ownership of desktop files
RUN chown -R ubuntu:ubuntu /home/ubuntu/.local/share/applications

# Create startup script for Helix External Agent Runner
COPY <<EOF /start-helix-agent.sh
#!/bin/bash
set -e
echo "Starting Helix External Agent Runner..."

# Set up environment for GPU acceleration
export DISPLAY=:1
export VGL_DISPLAY=:0

# Start the external agent runner with environment variables
exec /usr/local/bin/helix external-agent-runner
EOF

RUN chmod +x /start-helix-agent.sh

# Copy Wayland VNC startup script
COPY start-wayland-vnc.sh /start-wayland-vnc.sh
RUN chmod +x /start-wayland-vnc.sh

# Environment variables for Wayland
# TODO: which of these are needed?
ENV WAYLAND_DISPLAY=wayland-1 \
    XDG_RUNTIME_DIR=/tmp/runtime-ubuntu \
    WLR_RENDERER=gles2 \
    WLR_BACKENDS=headless \
    API_HOST=http://api:8080 \
    CONCURRENCY=1 \
    MAX_TASKS=1 \
    WORKSPACE_DIR=/tmp/workspace \
    VNC_PASSWORD=helix123

# Expose RDP port
EXPOSE 3389 3030

# Start Wayland RDP
ENTRYPOINT ["/start-wayland-vnc.sh"]
