# ====================================================================
# OPTIMIZED DOCKERFILE FOR MAXIMUM CACHING EFFICIENCY
# ====================================================================
# Key optimizations:
# 1. Separate build stages for C/C++ compilation (no dev cruft in prod)
# 2. Consolidated package installation (single apt-get update per stage)
# 3. Ordered by change frequency (stable content first, changing content last)
# 4. Multi-stage builds for heavy compilation work
# ====================================================================

# ====================================================================
# Stage 1: Go application build (unchanged - already optimal)
# ====================================================================
FROM golang:1.24 AS go-build-env
WORKDIR /app
COPY go.mod .
COPY go.sum .
RUN go mod download
COPY api ./api
COPY .git /.git
WORKDIR /app/api
RUN apt-get update && apt-get install -y gcc g++ libc6-dev && rm -rf /var/lib/apt/lists/*
RUN go install github.com/air-verse/air@v1.52.3
RUN CGO_ENABLED=0 go build -buildvcs=false -ldflags "-s -w" -o /helix

# ====================================================================
# Stage 2: AGS (Aylur's GTK Shell) build - separate to avoid dev cruft
# ====================================================================
FROM ubuntu:25.04 AS ags-builder

# Install ALL AGS build dependencies in single layer
RUN apt-get update && apt-get install -y \
    # Build tools
    git meson npm build-essential \
    # AGS build dependencies
    libgjs-dev libgtk-3-dev libgtk-layer-shell-dev \
    libpulse-dev libpam0g-dev libglib2.0-dev \
    gir1.2-gtk-3.0 gir1.2-glib-2.0 gobject-introspection \
    libgirepository1.0-dev \
    # GJS runtime (required for compilation)
    gjs \
    # SCSS and additional tools
    sass \
    # Notification and system tray support
    libnotify-bin libnotify-dev gir1.2-notify-0.7 \
    libdbusmenu-gtk3-dev gir1.2-dbusmenu-glib-0.4 gir1.2-dbusmenu-gtk3-0.4 \
    # GtkSource library
    libgtksourceview-3.0-dev gir1.2-gtksource-3.0 \
    && rm -rf /var/lib/apt/lists/*

# Build AGS v1 (ii-agsv1)
RUN npm install -g typescript && \
    cd /tmp && \
    git clone https://github.com/end-4/ii-agsv1.git && \
    cd ii-agsv1 && \
    npm install && \
    meson setup build --libdir "lib/ii-agsv1" -Dbuild_types=true && \
    meson compile -C build && \
    meson install -C build && \
    # Create agsv1 symlink (following the PKGBUILD pattern)
    rm -f /usr/bin/ags && \
    ln -sf /usr/local/share/com.github.Aylur.ags/com.github.Aylur.ags /usr/bin/agsv1

# ====================================================================
# Stage 3: Production image with optimized layer ordering
# ====================================================================
FROM ubuntu:25.04

# ====================================================================
# Layer 1: ALL system packages (rarely change)
# ====================================================================
RUN apt-get update && apt-get install -y \
    # Base system tools
    wget curl ca-certificates gnupg software-properties-common \
    git cmake libcurl4-openssl-dev libssl-dev \
    libudev-dev libpci-dev jq bc coreutils rsync ripgrep \
    meson xdg-user-dirs unzip supervisor nano vim \
    # Wayland and VNC infrastructure
    wayvnc cage sway-backgrounds weston \
    fontconfig eza fish kitty \
    glib2.0-bin wl-clipboard translate-shell \
    # Audio system
    pipewire-audio pulseaudio-utils alsa-utils \
    # Python and development runtimes (but not build tools)
    python3 python3-pip python3-venv \
    nodejs npm sqlite3 \
    # GPU drivers and acceleration
    va-driver-all intel-media-va-driver-non-free \
    libva-drm2 libva-x11-2 libvpl2 \
    mesa-utils mesa-utils-extra \
    libgl1-mesa-dri libglx-mesa0 \
    libegl-mesa0 libgles2-mesa-dev \
    libgbm1 libdrm2 \
    # Hardware detection
    pciutils lshw usbutils kmod libkmod2 \
    # Wayland protocol libraries
    libwayland-dev libwayland-server0 libinput-dev libxkbcommon-dev \
    # Zed runtime dependencies
    libfontconfig1 libfreetype6 libxcb1 libxcb-render0 libxcb-shape0 \
    libxcb-xfixes0 libxcb-shm0 libxkbcommon0 libxkbcommon-x11-0 \
    libasound2t64 libssl3 libgtk-3-0 libgdk-pixbuf2.0-0 libpango-1.0-0 libcairo2 \
    # Session management
    dbus-x11 dbus xwayland \
    # Sunshine runtime dependencies (stable)
    debianutils libcap2 libcurl4 libdrm2 libgbm1 libevdev2 \
    libnuma1 libopus0 libpulse0 libva2 libva-drm2 \
    libwayland-client0 libx11-6 miniupnpc openssl \
    libayatana-appindicator3-1 libnotify4 \
    # Ghostty dependencies
    libgtk-4-dev libgtk-4-1 libadwaita-1-0 \
    libgraphene-1.0-0 libcairo2 libcairo-gobject2 \
    libgdk-pixbuf-2.0-0 libpango-1.0-0 libpangocairo-1.0-0 \
    libfontconfig1 libfreetype6 libharfbuzz0b \
    libglib2.0-0 libgobject-2.0-0 libgio-2.0-0 \
    libegl1 libgl1 libwayland-client0 libwayland-cursor0 libwayland-egl1 \
    libx11-6 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 \
    # AGS runtime dependencies (moved from build stage)
    gvfs gjs glib2.0-bin libglib2.0-0 libgtk-3-0 \
    libgtk-layer-shell0 libpulse0 libpam0g \
    # Material Design Icons and fonts
    fonts-material-design-icons-iconfont \
    # illogical-impulse tools
    fuzzel python3-pip \
    hyprland hyprpaper hyprland-backgrounds && \
    # Install Python packages
    (python3 -m pip install --break-system-packages material-color-utilities || echo "matugen alternative install failed") && \
    # Final cleanup
    apt-get clean && rm -rf /var/lib/apt/lists/*

# ====================================================================
# Layer 2: Chrome installation (stable external package)
# ====================================================================
RUN curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# ====================================================================
# Layer 3: NVIDIA CUDA runtime (relatively stable)
# ====================================================================
RUN <<_ADD_NVRTC
    #!/bin/bash
    set -e

    # Temporary packages for download only (curl is available from Layer 1)
    apt-get update -y
    apt-get install -y unzip

    cd /tmp
    curl -fsSL -o nvidia_cuda_nvrtc_linux_x86_64.whl "https://developer.download.nvidia.com/compute/redist/nvidia-cuda-nvrtc/nvidia_cuda_nvrtc-11.0.221-cp36-cp36m-linux_x86_64.whl"
    unzip -joq -d ./nvrtc nvidia_cuda_nvrtc_linux_x86_64.whl
    cd nvrtc
    chmod 755 libnvrtc*
    find . -maxdepth 1 -type f -name "*libnvrtc.so.*" -exec sh -c 'ln -snf $(basename {}) libnvrtc.so' \;
    mkdir -p /usr/local/nvidia/lib
    mv -f libnvrtc* /usr/local/nvidia/lib
    rm -rf /tmp/*

    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
    ldconfig

    # Cleanup temporary packages (keep curl for later layers)
    apt-get remove -y --purge unzip
    apt-get autoremove -y
    rm -rf /var/lib/apt/lists/*
_ADD_NVRTC

# ====================================================================
# Layer 4: Third-party binaries and tools (occasionally changing)
# ====================================================================

# Install Ghostty terminal
RUN /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/mkasberg/ghostty-ubuntu/HEAD/install.sh)" || echo "Ghostty installation failed, continuing with alternatives"

# Install MCP filesystem server
RUN npm install -g @modelcontextprotocol/server-filesystem || echo "MCP install failed, continuing..."

# Copy AGS from build stage (no dev dependencies in prod image)
COPY --from=ags-builder /usr/bin/agsv1 /usr/bin/agsv1
COPY --from=ags-builder /usr/local/share/com.github.Aylur.ags /usr/local/share/com.github.Aylur.ags

# ====================================================================
# Layer 5: Sunshine .deb package (changes when we update versions)
# ====================================================================
COPY sunshine-ubuntu-25.04-icu76-fixed.deb /tmp/sunshine.deb
RUN dpkg -i /tmp/sunshine.deb && rm /tmp/sunshine.deb

# ====================================================================
# Layer 6: Icons and fonts (occasionally changing)
# ====================================================================

# Install Zed icon for dock display
RUN mkdir -p /usr/share/icons/hicolor/512x512/apps \
    && curl -L 'https://zed.dev/_next/static/media/stable-app-logo.9b5f959f.png' -o /usr/share/icons/hicolor/512x512/apps/zed.png \
    && gtk-update-icon-cache /usr/share/icons/hicolor/ 2>/dev/null || true

# Install Material Symbols Rounded font for AGS
RUN mkdir -p /usr/share/fonts/truetype/material-symbols \
    && curl -L 'https://github.com/google/material-design-icons/raw/master/variablefont/MaterialSymbolsRounded%5BFILL%2CGRAD%2Copsz%2Cwght%5D.ttf' \
       -o /usr/share/fonts/truetype/material-symbols/MaterialSymbolsRounded.ttf \
    && fc-cache -f -v

# ====================================================================
# Layer 7: Go runtime and tools (changes when Go version updates)
# ====================================================================
COPY --from=go-build-env /usr/local/go /usr/local/go
COPY --from=go-build-env /go/bin/air /usr/local/bin/air

# Add Go to PATH
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOMODCACHE="/go/pkg/mod"
ENV GOCACHE="/root/.cache/go-build"

# ====================================================================
# Layer 8: User and directory configuration (occasionally changing)
# ====================================================================

# Configure ubuntu user for Wayland sessions
RUN echo 'ubuntu:helix123' | chpasswd && \
    usermod -aG sudo ubuntu 2>/dev/null || useradd -m -s /bin/bash ubuntu && echo 'ubuntu:helix123' | chpasswd && usermod -aG sudo ubuntu

# Add ubuntu user to video and render groups for GPU access
RUN groupadd -f -g 992 render && usermod -aG video,render ubuntu

# Create workspace directory and symlinks
RUN mkdir -p /workspace && chmod 755 /workspace && \
    ln -sf /zed-build/zed /usr/local/bin/zed

# Fix git ownership issue for mounted source code
RUN git config --global --add safe.directory /workspace/helix

# Create user options for dots-hyprland AGS with Chrome in dock
RUN mkdir -p /home/ubuntu/.config/ags && \
    echo '{"dock": {"enabled": true, "pinnedApps": ["google-chrome", "firefox", "org.gnome.Nautilus", "foot", "ghostty"]}}' > /home/ubuntu/.config/ags/user_options.jsonc && \
    chown -R ubuntu:ubuntu /home/ubuntu/.config

# ====================================================================
# Layer 9: Configuration files and scripts (change occasionally)
# ====================================================================

# Create Sunshine configuration
RUN mkdir -p /etc/sunshine
COPY <<EOF /etc/sunshine/sunshine.conf
# Sunshine Moonlight Server Configuration for Helix

# Network configuration
sunshine_name = helix-moonlight
port = 47989

# Video configuration
fps = [10, 30, 60, 120]
resolutions = [
    352x240,
    480x360,
    858x480,
    1280x720,
    1920x1080,
    2560x1440,
    3840x2160,
]

# Encoder settings - prefer hardware acceleration
encoder = nvenc
adapter_name = 0
output_name = 0

# Capture method for Wayland - force no permission prompts
capture = wlr
wlr_force_headless = true

# Audio configuration
audio_sink = auto
virtual_sink = sunshine-audio

# Input configuration
gamepad = auto

# Security - disable permission prompts in container environment
pin_timeout = 15
allow_elevated = true

# File paths
file_apps = /etc/sunshine/apps.json

# Logging
min_log_level = info
log_path = /var/log/sunshine.log

# Container-specific settings to bypass permission systems
global_prep_cmd = []
EOF

# Create Sunshine apps configuration
COPY <<EOF /etc/sunshine/apps.json
{
  "apps": [
    {
      "name": "Helix Desktop",
      "cmd": [],
      "detached": [],
      "image-path": "",
      "working-dir": ""
    }
  ]
}
EOF

# Create startup scripts
COPY <<EOF /start-helix-agent.sh
#!/bin/bash
set -e
echo "Starting Helix External Agent Runner..."

# Set up environment for GPU acceleration
export DISPLAY=:1
export VGL_DISPLAY=:0

# Start the external agent runner with environment variables
exec /usr/local/bin/helix external-agent-runner
EOF

COPY <<EOF /start-moonlight.sh
#!/bin/bash
set -e

echo "Starting Sunshine Moonlight server..."

# Runtime directory for sockets
export XDG_RUNTIME_DIR=/tmp/runtime-ubuntu

# GPU acceleration settings
export LIBVA_DRIVER_NAME=nvidia
export NVIDIA_VISIBLE_DEVICES=all
export NVIDIA_DRIVER_CAPABILITIES=all
export __GLX_VENDOR_LIBRARY_NAME=nvidia

# Wayland specific settings for capture
export WAYLAND_DISPLAY=wayland-1

# Wait for Wayland display to be ready
echo "Waiting for Wayland display..."
timeout=30
while [ \$timeout -gt 0 ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-0" ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-1" ]; do
    sleep 1
    timeout=\$((timeout - 1))
done

if [ ! -S "\$XDG_RUNTIME_DIR/wayland-0" ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-1" ]; then
    echo "Error: Wayland display not ready after 30 seconds"
    exit 1
fi

# Set the Wayland display
if [ -S "\$XDG_RUNTIME_DIR/wayland-1" ]; then
    export WAYLAND_DISPLAY=wayland-1
else
    export WAYLAND_DISPLAY=wayland-0
fi

echo "Using Wayland display: \$WAYLAND_DISPLAY"

# Generate dynamic Sunshine config based on active Helix sessions
echo "Generating Sunshine config for active sessions..."
/usr/local/bin/generate-sunshine-config.sh

# Start config refresher in background
echo "Starting Sunshine config refresher..."
/usr/local/bin/sunshine-config-refresher.sh &

# Start Sunshine Moonlight server
echo "Starting Sunshine with GPU acceleration and Wayland capture"
exec sunshine
EOF

# Create illogical-impulse setup script
COPY <<EOF /setup-illogical-impulse.sh
#!/bin/bash
set -e

# Only run once
if [ -f "/home/ubuntu/.illogical-impulse-installed" ]; then
    exit 0
fi

echo "Setting up illogical-impulse dotfiles..."

# Switch to ubuntu user
su ubuntu -c '
export USER=ubuntu
export HOME=/home/ubuntu

# Clone the dotfiles if not already present
if [ ! -d "/home/ubuntu/.config/hypr-dots" ]; then
    cd /home/ubuntu
    git clone https://github.com/end-4/dots-hyprland.git .config/hypr-dots
fi

# Copy key configuration files
cd /home/ubuntu/.config/hypr-dots

# Copy Hyprland config (backup existing)
mkdir -p /home/ubuntu/.config/hypr
if [ -f "/home/ubuntu/.config/hypr/hyprland.conf" ]; then
    cp /home/ubuntu/.config/hypr/hyprland.conf /home/ubuntu/.config/hypr/hyprland.conf.backup
fi

# Copy illogical-impulse configs (selectively to avoid overwriting our working setup)
cp -r .config/ags /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/gtk-3.0 /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/gtk-4.0 /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/kitty /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/fuzzel /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/fish /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/starship.toml /home/ubuntu/.config/ 2>/dev/null || true

# Copy Hyprland configuration structure (do NOT copy hyprland.conf itself)
cp -r .config/hypr /home/ubuntu/.config/hypr-dots-backup 2>/dev/null || true

# Set up wallpapers
mkdir -p /home/ubuntu/Pictures/wallpapers
cp -r Pictures/* /home/ubuntu/Pictures/ 2>/dev/null || true
cp -r wallpapers/* /home/ubuntu/Pictures/wallpapers/ 2>/dev/null || true

# Create a flag file to indicate setup is complete
touch /home/ubuntu/.illogical-impulse-installed

echo "illogical-impulse dotfiles setup complete!"
'

EOF

# Dynamic Sunshine script creation
RUN echo '#!/bin/bash\necho "Sunshine config generation placeholder"' > /usr/local/bin/generate-sunshine-config.sh && \
    echo '#!/bin/bash\necho "Sunshine config refresher placeholder"' > /usr/local/bin/sunshine-config-refresher.sh && \
    chmod +x /usr/local/bin/generate-sunshine-config.sh /usr/local/bin/sunshine-config-refresher.sh

# Copy and set permissions for all scripts
COPY start-wayland-vnc.sh /start-wayland-vnc.sh
RUN chmod +x /start-wayland-vnc.sh /start-moonlight.sh /start-helix-agent.sh /setup-illogical-impulse.sh

# ====================================================================
# Layer 10: Environment and ports (rarely change)
# ====================================================================

# Environment variables for Wayland
ENV WAYLAND_DISPLAY=wayland-0 \
    XDG_RUNTIME_DIR=/tmp/runtime-ubuntu \
    WLR_RENDERER=gles2 \
    WLR_BACKENDS=headless \
    API_HOST=http://api:8080 \
    CONCURRENCY=5 \
    MAX_TASKS=0 \
    WORKSPACE_DIR=/tmp/workspace \
    VNC_PASSWORD=helix123

# Expose VNC port and Moonlight ports
EXPOSE 5901 3030
# Moonlight ports (Sunshine uses standard GameStream ports)
EXPOSE 47984/tcp 47989/tcp 47999/udp 48010/tcp 48100/udp 48200/udp

# ====================================================================
# FINAL LAYER: Helix binary (changes most frequently)
# ====================================================================
COPY --from=go-build-env /helix /usr/local/bin/helix

# Start Wayland VNC
ENTRYPOINT ["/start-wayland-vnc.sh"]
