# Build stage for Go application
FROM golang:1.24 AS go-build-env
WORKDIR /app
COPY go.mod .
COPY go.sum .
RUN go mod download
COPY api ./api
COPY .git /.git
WORKDIR /app/api
RUN apt-get update && apt-get install -y gcc g++ libc6-dev && rm -rf /var/lib/apt/lists/*
RUN go install github.com/air-verse/air@v1.52.3
RUN CGO_ENABLED=0 go build -buildvcs=false -ldflags "-s -w" -o /helix

# VNC + VirtualGL stage for GPU-accelerated remote desktop
FROM ubuntu:25.04

# Install base packages
RUN apt-get update && apt-get install -y \
    wget curl ca-certificates gnupg software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Install Wayland compositor and VNC server for GPU-accelerated remote desktop
RUN apt-get update && apt-get install -y \
    # Wayland VNC server and compositors
    wayvnc cage sway-backgrounds weston \
    # Try to install Hyprland (ignore failure)
    && (apt-get install -y hyprland || echo "Hyprland not available, using fallback") \
    # Development tools and dependencies for Zed
    && apt-get install -y \
    wget git unzip curl sqlite3 ca-certificates \
    build-essential cmake \
    nodejs npm python3 python3-pip \
    # GPU libraries and detection tools for Wayland
    mesa-utils mesa-utils-extra \
    libgl1-mesa-dri libglx-mesa0 \
    libegl-mesa0 libgles2-mesa-dev \
    libgbm1 libdrm2 \
    # Hardware detection tools
    pciutils lshw usbutils kmod libkmod2 \
    # Additional GPU support
    va-driver-all vdpau-driver-all \
    # Zed runtime dependencies
    libfontconfig1 libfreetype6 libxcb1 libxcb-render0 libxcb-shape0 \
    libxcb-xfixes0 libxcb-shm0 libxkbcommon0 libxkbcommon-x11-0 \
    libasound2t64 libssl3 libgtk-3-0 libgdk-pixbuf2.0-0 libpango-1.0-0 libcairo2 \
    # DBus and session management
    dbus-x11 dbus \
    # XWayland for X11 app compatibility
    xwayland \
    # Additional tools
    supervisor nano vim \
    && rm -rf /var/lib/apt/lists/* \
    # Install NVIDIA EGL and container libraries for proper GPU access
    && (apt-get update && apt-get install -y \
        libnvidia-egl-wayland1 \
        libnvidia-egl-gbm1 \
        libegl-nvidia0 \
        libgl1-nvidia-glvnd-glx \
        libnvidia-gl-545 \
        nvidia-utils-545 \
        || echo "Some NVIDIA packages not available") \
    && rm -rf /var/lib/apt/lists/*

# Copy Go from build stage for air hot reloading
COPY --from=go-build-env /usr/local/go /usr/local/go

# Add Go to PATH
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOMODCACHE="/go/pkg/mod"
ENV GOCACHE="/root/.cache/go-build"

# Fix git ownership issue for mounted source code (git is installed in the previous step)
RUN git config --global --add safe.directory /workspace/helix

# Create symlink to mounted zed-build directory
RUN ln -sf /zed-build/zed /usr/local/bin/zed

# Copy the compiled Helix binary and air
COPY --from=go-build-env /helix /usr/local/bin/helix
COPY --from=go-build-env /go/bin/air /usr/local/bin/air

# Configure ubuntu user for Wayland sessions (user may already exist)
RUN echo 'ubuntu:helix123' | chpasswd && \
    usermod -aG sudo ubuntu 2>/dev/null || useradd -m -s /bin/bash ubuntu && echo 'ubuntu:helix123' | chpasswd && usermod -aG sudo ubuntu

# Add ubuntu user to video and render groups for GPU access
RUN groupadd -f -g 992 render && usermod -aG video,render ubuntu

# Install MCP filesystem server
RUN npm install -g @modelcontextprotocol/server-filesystem || echo "MCP install failed, continuing..."

# Create workspace directory
RUN mkdir -p /workspace && chmod 755 /workspace

# Create startup script for Helix External Agent Runner
COPY <<EOF /start-helix-agent.sh
#!/bin/bash
set -e
echo "Starting Helix External Agent Runner..."

# Set up environment for GPU acceleration
export DISPLAY=:1
export VGL_DISPLAY=:0

# Start the external agent runner with environment variables
exec /usr/local/bin/helix external-agent-runner
EOF

RUN chmod +x /start-helix-agent.sh

# Copy Wayland VNC startup script
COPY start-wayland-vnc.sh /start-wayland-vnc.sh
RUN chmod +x /start-wayland-vnc.sh

# Environment variables for Wayland
ENV WAYLAND_DISPLAY=wayland-0 \
    XDG_RUNTIME_DIR=/tmp/runtime-ubuntu \
    WLR_RENDERER=gles2 \
    WLR_BACKENDS=headless \
    API_HOST=http://api:8080 \
    CONCURRENCY=5 \
    MAX_TASKS=0 \
    WORKSPACE_DIR=/tmp/workspace \
    VNC_PASSWORD=helix123

# Expose VNC port
EXPOSE 5901 3030

# Start Wayland VNC
ENTRYPOINT ["/start-wayland-vnc.sh"]