# Build stage for Go application
FROM golang:1.24 AS go-build-env
WORKDIR /app
COPY go.mod .
COPY go.sum .
RUN go mod download
COPY api ./api
COPY .git /.git
WORKDIR /app/api
RUN apt-get update && apt-get install -y gcc g++ libc6-dev && rm -rf /var/lib/apt/lists/*
RUN go install github.com/air-verse/air@v1.52.3
RUN CGO_ENABLED=0 go build -buildvcs=false -ldflags "-s -w" -o /helix

# VNC + VirtualGL stage for GPU-accelerated remote desktop
FROM ubuntu:25.04

# Install base packages
RUN apt-get update && apt-get install -y \
    wget curl ca-certificates gnupg software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Install Wayland compositor and VNC server with Games on Whales inspired GPU support
RUN apt-get update && apt-get install -y \
    # Wayland VNC server and compositors
    wayvnc cage sway-backgrounds weston \
    # Try to install Hyprland (ignore failure)
    && (apt-get install -y hyprland || echo "Hyprland not available, using fallback") \
    # Illogical-impulse dotfiles dependencies (Ubuntu equivalents)
    # Basic utilities
    && apt-get install -y \
    bc coreutils cmake curl rsync wget ripgrep jq meson xdg-user-dirs unzip \
    # Fonts and theming (Ubuntu equivalents where available)
    fontconfig eza fish kitty \
    # Widgets and tools
    glib2.0-bin wl-clipboard translate-shell \
    # Audio tools
    pipewire-audio pulseaudio-utils alsa-utils \
    # Python for matugen and other tools
    python3 python3-pip python3-venv \
    # Development tools and dependencies for Zed
    && apt-get install -y \
    wget git unzip curl sqlite3 ca-certificates \
    build-essential cmake \
    nodejs npm python3 python3-pip \
    # Intel/Mesa GPU drivers (following Wolf's proven pattern)
    va-driver-all intel-media-va-driver-non-free \
    libva-drm2 libva-x11-2 libvpl2 \
    # Core Mesa/OpenGL libraries for GPU acceleration
    mesa-utils mesa-utils-extra \
    libgl1-mesa-dri libglx-mesa0 \
    libegl-mesa0 libgles2-mesa-dev \
    libgbm1 libdrm2 \
    # Hardware detection tools and kernel module support  
    pciutils lshw usbutils kmod libkmod2 \
    # Wayland display protocol libraries (Wolf dependencies)
    libwayland-dev libwayland-server0 libinput-dev libxkbcommon-dev \
    # Zed runtime dependencies
    libfontconfig1 libfreetype6 libxcb1 libxcb-render0 libxcb-shape0 \
    libxcb-xfixes0 libxcb-shm0 libxkbcommon0 libxkbcommon-x11-0 \
    libasound2t64 libssl3 libgtk-3-0 libgdk-pixbuf2.0-0 libpango-1.0-0 libcairo2 \
    # DBus and session management
    dbus-x11 dbus \
    # XWayland for X11 app compatibility
    xwayland \
    # Additional tools
    supervisor nano vim \
    && rm -rf /var/lib/apt/lists/*

# Add NVIDIA CUDA runtime libraries (following Wolf's proven approach)
RUN <<_ADD_NVRTC
    #!/bin/bash
    set -e

    # Extra deps for NVIDIA CUDA runtime
    apt-get update -y
    apt-get install -y unzip curl

    cd /tmp
    curl -fsSL -o nvidia_cuda_nvrtc_linux_x86_64.whl "https://developer.download.nvidia.com/compute/redist/nvidia-cuda-nvrtc/nvidia_cuda_nvrtc-11.0.221-cp36-cp36m-linux_x86_64.whl"
    unzip -joq -d ./nvrtc nvidia_cuda_nvrtc_linux_x86_64.whl
    cd nvrtc
    chmod 755 libnvrtc*
    find . -maxdepth 1 -type f -name "*libnvrtc.so.*" -exec sh -c 'ln -snf $(basename {}) libnvrtc.so' \;
    mkdir -p /usr/local/nvidia/lib
    mv -f libnvrtc* /usr/local/nvidia/lib
    rm -rf /tmp/*

    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
    ldconfig

    # Cleanup
    apt-get remove -y --purge unzip curl
    rm -rf /var/lib/apt/lists/*
_ADD_NVRTC

# Install illogical-impulse specific tools (fonts installation simplified for now)
RUN apt-get update && apt-get install -y \
    # Essential tools for illogical-impulse
    fuzzel python3-pip \
    # Try to install Hyprland tools if available
    && (apt-get install -y hypridle hyprlock hyprpicker 2>/dev/null || echo "Some Hyprland tools not available") \
    # Install matugen alternative
    && python3 -m pip install --break-system-packages material-color-utilities || echo "matugen alternative install failed" \
    # Cleanup
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy Go from build stage for air hot reloading
COPY --from=go-build-env /usr/local/go /usr/local/go

# Add Go to PATH
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOMODCACHE="/go/pkg/mod"
ENV GOCACHE="/root/.cache/go-build"

# Fix git ownership issue for mounted source code (git is installed in the previous step)
RUN git config --global --add safe.directory /workspace/helix

# Create symlink to mounted zed-build directory
RUN ln -sf /zed-build/zed /usr/local/bin/zed

# Copy the compiled Helix binary and air
COPY --from=go-build-env /helix /usr/local/bin/helix
COPY --from=go-build-env /go/bin/air /usr/local/bin/air

# Configure ubuntu user for Wayland sessions (user may already exist)
RUN echo 'ubuntu:helix123' | chpasswd && \
    usermod -aG sudo ubuntu 2>/dev/null || useradd -m -s /bin/bash ubuntu && echo 'ubuntu:helix123' | chpasswd && usermod -aG sudo ubuntu

# Add ubuntu user to video and render groups for GPU access
RUN groupadd -f -g 992 render && usermod -aG video,render ubuntu

# Install MCP filesystem server
RUN npm install -g @modelcontextprotocol/server-filesystem || echo "MCP install failed, continuing..."

# Create workspace directory
RUN mkdir -p /workspace && chmod 755 /workspace

# Install Ghostty terminal at build time (moved from runtime for efficiency)
RUN apt-get update && apt-get install -y curl \
    # GTK and GUI dependencies for Ghostty
    libgtk-4-dev libgtk-4-1 libadwaita-1-0 \
    libgraphene-1.0-0 libcairo2 libcairo-gobject2 \
    libgdk-pixbuf-2.0-0 libpango-1.0-0 libpangocairo-1.0-0 \
    libfontconfig1 libfreetype6 libharfbuzz0b \
    libglib2.0-0 libgobject-2.0-0 libgio-2.0-0 \
    # Additional runtime dependencies
    libegl1 libgl1 libwayland-client0 libwayland-cursor0 libwayland-egl1 \
    libx11-6 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 \
    && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/mkasberg/ghostty-ubuntu/HEAD/install.sh)" || echo "Ghostty installation failed, continuing with alternatives" && \
    rm -rf /var/lib/apt/lists/*

# Create illogical-impulse setup script
COPY <<EOF /setup-illogical-impulse.sh
#!/bin/bash
set -e

# Only run once
if [ -f "/home/ubuntu/.illogical-impulse-installed" ]; then
    exit 0
fi

echo "Setting up illogical-impulse dotfiles..."

# Switch to ubuntu user
su ubuntu -c '
export USER=ubuntu
export HOME=/home/ubuntu

# Clone the dotfiles if not already present
if [ ! -d "/home/ubuntu/.config/hypr-dots" ]; then
    cd /home/ubuntu
    git clone https://github.com/end-4/dots-hyprland.git .config/hypr-dots
fi

# Copy key configuration files
cd /home/ubuntu/.config/hypr-dots

# Copy Hyprland config (backup existing)
mkdir -p /home/ubuntu/.config/hypr
if [ -f "/home/ubuntu/.config/hypr/hyprland.conf" ]; then
    cp /home/ubuntu/.config/hypr/hyprland.conf /home/ubuntu/.config/hypr/hyprland.conf.backup
fi

# Copy illogical-impulse configs (selectively to avoid overwriting our working setup)
cp -r .config/ags /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/gtk-3.0 /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/gtk-4.0 /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/kitty /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/fuzzel /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/fish /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/starship.toml /home/ubuntu/.config/ 2>/dev/null || true

# Copy Hyprland configuration structure (do NOT copy hyprland.conf itself)
cp -r .config/hypr /home/ubuntu/.config/hypr-dots-backup 2>/dev/null || true

# Set up wallpapers
mkdir -p /home/ubuntu/Pictures/wallpapers
cp -r Pictures/* /home/ubuntu/Pictures/ 2>/dev/null || true
cp -r wallpapers/* /home/ubuntu/Pictures/wallpapers/ 2>/dev/null || true

# Create a flag file to indicate setup is complete
touch /home/ubuntu/.illogical-impulse-installed

echo "illogical-impulse dotfiles setup complete!"
'

EOF
RUN chmod +x /setup-illogical-impulse.sh

# Create startup script for Helix External Agent Runner
COPY <<EOF /start-helix-agent.sh
#!/bin/bash
set -e
echo "Starting Helix External Agent Runner..."

# Set up environment for GPU acceleration
export DISPLAY=:1
export VGL_DISPLAY=:0

# Start the external agent runner with environment variables
exec /usr/local/bin/helix external-agent-runner
EOF

RUN chmod +x /start-helix-agent.sh

# Copy Wayland VNC startup script
COPY start-wayland-vnc.sh /start-wayland-vnc.sh
RUN chmod +x /start-wayland-vnc.sh

# Environment variables for Wayland
ENV WAYLAND_DISPLAY=wayland-0 \
    XDG_RUNTIME_DIR=/tmp/runtime-ubuntu \
    WLR_RENDERER=gles2 \
    WLR_BACKENDS=headless \
    API_HOST=http://api:8080 \
    CONCURRENCY=5 \
    MAX_TASKS=0 \
    WORKSPACE_DIR=/tmp/workspace \
    VNC_PASSWORD=helix123

# Expose VNC port
EXPOSE 5901 3030

# Start Wayland VNC
ENTRYPOINT ["/start-wayland-vnc.sh"]