# Build stage for Go application
FROM golang:1.24 AS go-build-env
WORKDIR /app
COPY go.mod .
COPY go.sum .
RUN go mod download
COPY api ./api
COPY .git /.git
WORKDIR /app/api
RUN apt-get update && apt-get install -y gcc g++ libc6-dev && rm -rf /var/lib/apt/lists/*
RUN go install github.com/air-verse/air@v1.52.3
RUN CGO_ENABLED=0 go build -buildvcs=false -ldflags "-s -w" -o /helix

# VNC + VirtualGL stage for GPU-accelerated remote desktop
FROM ubuntu:25.04

# Install base packages
RUN apt-get update && apt-get install -y \
    wget curl ca-certificates gnupg software-properties-common \
    # Wolf/Moonlight build dependencies
    git cmake ninja-build pkg-config ccache clang build-essential \
    libboost-thread-dev libboost-locale-dev libboost-filesystem-dev \
    libboost-log-dev libboost-stacktrace-dev libboost-container-dev \
    libcurl4-openssl-dev libssl-dev libevdev-dev libunwind-dev \
    libudev-dev libpci-dev jq \
    && rm -rf /var/lib/apt/lists/*

# Install Wayland compositor and VNC server with Games on Whales inspired GPU support
RUN apt-get update && apt-get install -y \
    # Wayland VNC server and compositors
    wayvnc cage sway-backgrounds weston \
    # Try to install Hyprland (ignore failure)
    && (apt-get install -y hyprland || echo "Hyprland not available, using fallback") \
    # Illogical-impulse dotfiles dependencies (Ubuntu equivalents)
    # Basic utilities
    && apt-get install -y \
    bc coreutils cmake curl rsync wget ripgrep jq meson xdg-user-dirs unzip \
    # Fonts and theming (Ubuntu equivalents where available)
    fontconfig eza fish kitty \
    # Widgets and tools
    glib2.0-bin wl-clipboard translate-shell \
    # Audio tools
    pipewire-audio pulseaudio-utils alsa-utils \
    # Python for matugen and other tools
    python3 python3-pip python3-venv \
    # Development tools and dependencies for Zed
    && apt-get install -y \
    wget git unzip curl sqlite3 ca-certificates \
    build-essential cmake \
    nodejs npm python3 python3-pip \
    # Intel/Mesa GPU drivers (following Wolf's proven pattern)
    va-driver-all intel-media-va-driver-non-free \
    libva-drm2 libva-x11-2 libvpl2 \
    # Core Mesa/OpenGL libraries for GPU acceleration
    mesa-utils mesa-utils-extra \
    libgl1-mesa-dri libglx-mesa0 \
    libegl-mesa0 libgles2-mesa-dev \
    libgbm1 libdrm2 \
    # Hardware detection tools and kernel module support  
    pciutils lshw usbutils kmod libkmod2 \
    # Wayland display protocol libraries (Wolf dependencies)
    libwayland-dev libwayland-server0 libinput-dev libxkbcommon-dev \
    # Zed runtime dependencies
    libfontconfig1 libfreetype6 libxcb1 libxcb-render0 libxcb-shape0 \
    libxcb-xfixes0 libxcb-shm0 libxkbcommon0 libxkbcommon-x11-0 \
    libasound2t64 libssl3 libgtk-3-0 libgdk-pixbuf2.0-0 libpango-1.0-0 libcairo2 \
    # DBus and session management
    dbus-x11 dbus \
    # XWayland for X11 app compatibility
    xwayland \
    # Additional tools
    supervisor nano vim \
    && rm -rf /var/lib/apt/lists/*

# Add NVIDIA CUDA runtime libraries (following Wolf's proven approach)
RUN <<_ADD_NVRTC
    #!/bin/bash
    set -e

    # Extra deps for NVIDIA CUDA runtime
    apt-get update -y
    apt-get install -y unzip curl

    cd /tmp
    curl -fsSL -o nvidia_cuda_nvrtc_linux_x86_64.whl "https://developer.download.nvidia.com/compute/redist/nvidia-cuda-nvrtc/nvidia_cuda_nvrtc-11.0.221-cp36-cp36m-linux_x86_64.whl"
    unzip -joq -d ./nvrtc nvidia_cuda_nvrtc_linux_x86_64.whl
    cd nvrtc
    chmod 755 libnvrtc*
    find . -maxdepth 1 -type f -name "*libnvrtc.so.*" -exec sh -c 'ln -snf $(basename {}) libnvrtc.so' \;
    mkdir -p /usr/local/nvidia/lib
    mv -f libnvrtc* /usr/local/nvidia/lib
    rm -rf /tmp/*

    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
    ldconfig

    # Cleanup
    apt-get remove -y --purge unzip curl
    rm -rf /var/lib/apt/lists/*
_ADD_NVRTC

# Install Rust for Wolf's custom compositor
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
ARG RUST_VERSION=1.88.0
RUN rustup install $RUST_VERSION && rustup default $RUST_VERSION && cargo install cargo-c

# Build and install Wolf's GStreamer Wayland display plugin
RUN cd /tmp && \
    git clone https://github.com/games-on-whales/gst-wayland-display && \
    cd gst-wayland-display && \
    git checkout dfeebb19b48f32207469e166a3955f5d65b5e6c6 && \
    cargo cinstall -p gst-plugin-wayland-display --prefix=/usr/local/lib/x86_64-linux-gnu/ --libdir=/usr/local/lib/x86_64-linux-gnu/gstreamer-1.0 && \
    cp /usr/local/lib/x86_64-linux-gnu/gstreamer-1.0/* /usr/lib/x86_64-linux-gnu/gstreamer-1.0/ && \
    cp /usr/local/lib/liblibgstwaylanddisplay* /usr/lib/x86_64-linux-gnu/ && \
    rm -rf /tmp/gst-wayland-display

# Clone and build Wolf Moonlight server
RUN cd /tmp && \
    git clone https://github.com/games-on-whales/wolf.git && \
    cd wolf && \
    cmake -B build \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_CXX_STANDARD=17 \
    -DCMAKE_CXX_EXTENSIONS=OFF \
    -DBUILD_SHARED_LIBS=OFF \
    -DBoost_USE_STATIC_LIBS=ON \
    -DBUILD_FAKE_UDEV_CLI=ON \
    -DBUILD_TESTING=OFF \
    -G Ninja && \
    ninja -C build wolf && \
    ninja -C build fake-udev && \
    cp build/src/moonlight-server/wolf /usr/local/bin/wolf && \
    cp build/src/fake-udev/fake-udev /usr/local/bin/fake-udev && \
    rm -rf /tmp/wolf

# Install illogical-impulse specific tools (fonts installation simplified for now)
RUN apt-get update && apt-get install -y \
    # Essential tools for illogical-impulse
    fuzzel python3-pip \
    # Try to install Hyprland tools if available
    && (apt-get install -y hypridle hyprlock hyprpicker 2>/dev/null || echo "Some Hyprland tools not available") \
    # Install matugen alternative
    && python3 -m pip install --break-system-packages material-color-utilities || echo "matugen alternative install failed" \
    # Cleanup
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy Go from build stage for air hot reloading
COPY --from=go-build-env /usr/local/go /usr/local/go

# Add Go to PATH
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOMODCACHE="/go/pkg/mod"
ENV GOCACHE="/root/.cache/go-build"

# Fix git ownership issue for mounted source code (git is installed in the previous step)
RUN git config --global --add safe.directory /workspace/helix

# Create symlink to mounted zed-build directory
RUN ln -sf /zed-build/zed /usr/local/bin/zed

# Copy the compiled Helix binary and air
COPY --from=go-build-env /helix /usr/local/bin/helix
COPY --from=go-build-env /go/bin/air /usr/local/bin/air

# Configure ubuntu user for Wayland sessions (user may already exist)
RUN echo 'ubuntu:helix123' | chpasswd && \
    usermod -aG sudo ubuntu 2>/dev/null || useradd -m -s /bin/bash ubuntu && echo 'ubuntu:helix123' | chpasswd && usermod -aG sudo ubuntu

# Add ubuntu user to video and render groups for GPU access
RUN groupadd -f -g 992 render && usermod -aG video,render ubuntu

# Install MCP filesystem server
RUN npm install -g @modelcontextprotocol/server-filesystem || echo "MCP install failed, continuing..."

# Create workspace directory
RUN mkdir -p /workspace && chmod 755 /workspace

# Install Ghostty terminal at build time (moved from runtime for efficiency)
RUN apt-get update && apt-get install -y curl \
    # GTK and GUI dependencies for Ghostty
    libgtk-4-dev libgtk-4-1 libadwaita-1-0 \
    libgraphene-1.0-0 libcairo2 libcairo-gobject2 \
    libgdk-pixbuf-2.0-0 libpango-1.0-0 libpangocairo-1.0-0 \
    libfontconfig1 libfreetype6 libharfbuzz0b \
    libglib2.0-0 libgobject-2.0-0 libgio-2.0-0 \
    # Additional runtime dependencies
    libegl1 libgl1 libwayland-client0 libwayland-cursor0 libwayland-egl1 \
    libx11-6 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 \
    && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/mkasberg/ghostty-ubuntu/HEAD/install.sh)" || echo "Ghostty installation failed, continuing with alternatives" && \
    rm -rf /var/lib/apt/lists/*

# Install Google Chrome
RUN curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Create illogical-impulse setup script
COPY <<EOF /setup-illogical-impulse.sh
#!/bin/bash
set -e

# Only run once
if [ -f "/home/ubuntu/.illogical-impulse-installed" ]; then
    exit 0
fi

echo "Setting up illogical-impulse dotfiles..."

# Switch to ubuntu user
su ubuntu -c '
export USER=ubuntu
export HOME=/home/ubuntu

# Clone the dotfiles if not already present
if [ ! -d "/home/ubuntu/.config/hypr-dots" ]; then
    cd /home/ubuntu
    git clone https://github.com/end-4/dots-hyprland.git .config/hypr-dots
fi

# Copy key configuration files
cd /home/ubuntu/.config/hypr-dots

# Copy Hyprland config (backup existing)
mkdir -p /home/ubuntu/.config/hypr
if [ -f "/home/ubuntu/.config/hypr/hyprland.conf" ]; then
    cp /home/ubuntu/.config/hypr/hyprland.conf /home/ubuntu/.config/hypr/hyprland.conf.backup
fi

# Copy illogical-impulse configs (selectively to avoid overwriting our working setup)
cp -r .config/ags /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/gtk-3.0 /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/gtk-4.0 /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/kitty /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/fuzzel /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/fish /home/ubuntu/.config/ 2>/dev/null || true
cp -r .config/starship.toml /home/ubuntu/.config/ 2>/dev/null || true

# Copy Hyprland configuration structure (do NOT copy hyprland.conf itself)
cp -r .config/hypr /home/ubuntu/.config/hypr-dots-backup 2>/dev/null || true

# Set up wallpapers
mkdir -p /home/ubuntu/Pictures/wallpapers
cp -r Pictures/* /home/ubuntu/Pictures/ 2>/dev/null || true
cp -r wallpapers/* /home/ubuntu/Pictures/wallpapers/ 2>/dev/null || true

# Create a flag file to indicate setup is complete
touch /home/ubuntu/.illogical-impulse-installed

echo "illogical-impulse dotfiles setup complete!"
'

EOF
RUN chmod +x /setup-illogical-impulse.sh

# Create startup script for Helix External Agent Runner
COPY <<EOF /start-helix-agent.sh
#!/bin/bash
set -e
echo "Starting Helix External Agent Runner..."

# Set up environment for GPU acceleration
export DISPLAY=:1
export VGL_DISPLAY=:0

# Start the external agent runner with environment variables
exec /usr/local/bin/helix external-agent-runner
EOF

RUN chmod +x /start-helix-agent.sh

# Create Wolf/Moonlight configuration
RUN mkdir -p /etc/wolf/cfg
COPY <<EOF /etc/wolf/cfg/config.toml
# Wolf Moonlight Server Configuration for Helix
hostname = "helix-moonlight"

[[apps]]
title = "Helix Desktop"  
id = 1
start_virtual_compositor = false
support_hdr = false

# Don't start a new container - just stream the existing desktop
runner = "fake-udev"

[apps.env]

[video]
resolution = ["3840x2160"]
fps = [60, 120]

# GPU configuration - matches your NVIDIA setup  
render_node = "/dev/dri/renderD128"

# GStreamer pipeline for NVIDIA encoding
video_producer_buffer_caps = "video/x-raw,format=NV12"

[audio]
mic = []
speakers = []

[input]
# Virtual input devices - Wolf will create uinput devices
mouse = []
keyboard = []
joypad = []

[streaming]
# Network configuration
address_family = "BOTH"

[gstreamer]
# Enable hardware acceleration
video_encoder = "nvh264enc"
audio_encoder = "opusenc"
EOF

# Copy the dynamic config generation script and refresher
COPY scripts/generate-wolf-config.sh /usr/local/bin/generate-wolf-config.sh
COPY scripts/wolf-config-refresher.sh /usr/local/bin/wolf-config-refresher.sh
RUN chmod +x /usr/local/bin/generate-wolf-config.sh /usr/local/bin/wolf-config-refresher.sh

# Create Wolf startup script
COPY <<EOF /start-moonlight.sh
#!/bin/bash
set -e

echo "Starting Wolf Moonlight server..."

# Wolf environment configuration (matches your GPU setup)
export WOLF_CFG_FILE=/etc/wolf/cfg/config.toml  
export WOLF_PRIVATE_KEY_FILE=/etc/wolf/cfg/key.pem
export WOLF_PRIVATE_CERT_FILE=/etc/wolf/cfg/cert.pem
export WOLF_RENDER_NODE=/dev/dri/renderD128
export WOLF_LOG_LEVEL=INFO

# Runtime directory for sockets
export XDG_RUNTIME_DIR=/tmp/runtime-ubuntu

# GStreamer plugin path for Wolf's wayland display plugin
export GST_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/gstreamer-1.0

# GPU acceleration settings (matching your current setup)
export GST_GL_API=gles2
export GST_GL_WINDOW=surfaceless  
export GST_GL_DRM_DEVICE=\$WOLF_RENDER_NODE

# NVIDIA specific settings
export NVIDIA_VISIBLE_DEVICES=all
export NVIDIA_DRIVER_CAPABILITIES=all
export __GLX_VENDOR_LIBRARY_NAME=nvidia

# Wait for Wayland display to be ready
echo "Waiting for Wayland display..."
timeout=30
while [ \$timeout -gt 0 ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-0" ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-1" ]; do
    sleep 1
    timeout=\$((timeout - 1))
done

if [ ! -S "\$XDG_RUNTIME_DIR/wayland-0" ] && [ ! -S "\$XDG_RUNTIME_DIR/wayland-1" ]; then
    echo "Error: Wayland display not ready after 30 seconds"
    exit 1
fi

# Set the Wayland display
if [ -S "\$XDG_RUNTIME_DIR/wayland-1" ]; then
    export WAYLAND_DISPLAY=wayland-1
else
    export WAYLAND_DISPLAY=wayland-0
fi

echo "Using Wayland display: \$WAYLAND_DISPLAY"

# Generate dynamic Wolf config based on active Helix sessions
echo "Generating Wolf config for active sessions..."
/usr/local/bin/generate-wolf-config.sh

# Start config refresher in background
echo "Starting Wolf config refresher..."
/usr/local/bin/wolf-config-refresher.sh &

# Start Wolf Moonlight server
echo "Starting Wolf with GPU acceleration on \$WOLF_RENDER_NODE"
exec /usr/local/bin/wolf
EOF

# Copy Wayland VNC startup script
COPY start-wayland-vnc.sh /start-wayland-vnc.sh
RUN chmod +x /start-wayland-vnc.sh /start-moonlight.sh

# Environment variables for Wayland
ENV WAYLAND_DISPLAY=wayland-0 \
    XDG_RUNTIME_DIR=/tmp/runtime-ubuntu \
    WLR_RENDERER=gles2 \
    WLR_BACKENDS=headless \
    API_HOST=http://api:8080 \
    CONCURRENCY=5 \
    MAX_TASKS=0 \
    WORKSPACE_DIR=/tmp/workspace \
    VNC_PASSWORD=helix123

# Expose VNC port and Moonlight ports
EXPOSE 5901 3030
# Moonlight ports (following Wolf's port configuration)
EXPOSE 47984/tcp 47989/tcp 47999/udp 48010/tcp 48100/udp 48200/udp

# AGS (Aylur's GTK Shell) build stage - cached separately for efficiency
RUN apt-get update && apt-get install -y \
    # AGS build dependencies 
    git meson npm \
    libgjs-dev libgtk-3-dev libgtk-layer-shell-dev \
    libpulse-dev libpam0g-dev libglib2.0-dev \
    gir1.2-gtk-3.0 gir1.2-glib-2.0 gobject-introspection \
    libgirepository1.0-dev \
    # AGS runtime dependencies
    gvfs gjs glib2.0-bin libglib2.0-0 libgtk-3-0 \
    libgtk-layer-shell0 libpulse0 libpam0g \
    && rm -rf /var/lib/apt/lists/*

# Build AGS v1 (ii-agsv1) - cached separately  
RUN npm install -g typescript && \
    cd /tmp && \
    git clone https://github.com/end-4/ii-agsv1.git && \
    cd ii-agsv1 && \
    npm install && \
    meson setup build --libdir "lib/ii-agsv1" -Dbuild_types=true && \
    meson compile -C build && \
    meson install -C build && \
    # Create agsv1 symlink (following the PKGBUILD pattern)
    rm -f /usr/bin/ags && \
    ln -sf /usr/local/share/com.github.Aylur.ags/com.github.Aylur.ags /usr/bin/agsv1 && \
    # Cleanup build files
    rm -rf /tmp/ii-agsv1

# Add SCSS compilation dependencies for dots-hyprland AGS
RUN apt-get update && apt-get install -y \
    # SCSS compiler and build tools
    sass \
    # Node.js build tools for material design colors
    build-essential \
    # Notification support for AGS
    libnotify-bin libnotify-dev gir1.2-notify-0.7 \
    # System tray support for AGS  
    libdbusmenu-gtk3-dev gir1.2-dbusmenu-glib-0.4 gir1.2-dbusmenu-gtk3-0.4 \
    # GtkSource library for AGS
    libgtksourceview-3.0-dev gir1.2-gtksource-3.0 \
    && rm -rf /var/lib/apt/lists/*

# Create user options for dots-hyprland AGS with Chrome in dock
RUN mkdir -p /home/ubuntu/.config/ags && \
    echo '{"dock": {"enabled": true, "pinnedApps": ["google-chrome", "firefox", "org.gnome.Nautilus", "foot", "ghostty"]}}' > /home/ubuntu/.config/ags/user_options.jsonc && \
    chown -R ubuntu:ubuntu /home/ubuntu/.config

# Start Wayland VNC
ENTRYPOINT ["/start-wayland-vnc.sh"]