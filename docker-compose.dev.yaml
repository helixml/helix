version: '3'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - ${API_PORT:-80}:80
    restart: always
    env_file:
      - .env
    environment:
      - LOG_LEVEL=debug
      - APP_URL=${SERVER_URL:-http://localhost}
      - POSTGRES_HOST=postgres
      - POSTGRES_DATABASE=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD-postgres}
      - RUNNER_TOKEN=${RUNNER_TOKEN-oh-hallo-insecure-token}
      - SERVER_URL=${SERVER_URL:-http://localhost}
      - KEYCLOAK_URL=http://keycloak:8080/auth
      - JANITOR_SLACK_WEBHOOK_URL=${JANITOR_SLACK_WEBHOOK_URL:-}
      - JANITOR_SLACK_IGNORE_USERS=${JANITOR_SLACK_IGNORE_USERS:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - TOGETHER_API_KEY=${TOGETHER_API_KEY:-}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_WEBHOOK_SIGNING_SECRET=${STRIPE_WEBHOOK_SIGNING_SECRET:-}
      - STRIPE_PRICE_LOOKUP_KEY=${STRIPE_PRICE_LOOKUP_KEY:-}
      - FRONTEND_URL=http://frontend:8081
      # this is an insecure development key do not use!
      - KEYCLOAK_TOKEN=5ca0fc03-d625-456e-bca7-8e732309165f
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD-oh-hallo-insecure-password}
      # lock down dashboard in production
      - ADMIN_USER_IDS=${ADMIN_USER_IDS-all}
      - EVAL_USER_ID=${EVAL_USER_ID:-}
      - TEXT_EXTRACTION_URL=http://unstructured:5000/api/v1/extract
      - FILESTORE_LOCALFS_PATH=/filestore
      - SENTRY_DSN_API=${SENTRY_DSN_API:-}
      - SENTRY_DSN_FRONTEND=${SENTRY_DSN_FRONTEND:-}
      - GOOGLE_ANALYTICS_FRONTEND=${GOOGLE_ANALYTICS_FRONTEND:-}
      # Email notifications
      - EMAIL_MAILGUN_DOMAIN=${EMAIL_MAILGUN_DOMAIN:-}
      - EMAIL_MAILGUN_API_KEY=${EMAIL_MAILGUN_API_KEY:-}
      # SMTP
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST:-}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT:-}
      - EMAIL_SMTP_USERNAME=${EMAIL_SMTP_USERNAME:-}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD:-}

    entrypoint: ${API_ENTRYPOINT:-tail -f /dev/null}
    volumes:
      - ./go.mod:/app/go.mod
      - ./go.sum:/app/go.sum
      - ./api:/app/api
      - ${FILESTORE_DATA:-helix-filestore}:/filestore
  postgres:
    image: postgres:12.13-alpine
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ${POSTGRES_DATA:-helix-postgres-db}:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD-postgres}
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    restart: always
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD-oh-hallo-insecure-password}
      - KC_PROXY_HEADERS=forwarded|xforwarded
      - KC_HEALTH_ENABLED=true
      - KC_HOSTNAME_PATH==/auth
      - KC_HTTP_RELATIVE_PATH=/auth/
      - KC_HOSTNAME_URL=${KEYCLOAK_HOSTNAME:-http://localhost/auth/}
      - KC_HOSTNAME_ADMIN_URL=${KEYCLOAK_HOSTNAME:-http://localhost/auth/}
    volumes:
      - ./realm.json:/imported/realm.json
      - ${KEYCLOAK_DATA:-helix-keycloak-db}:/opt/jboss/keycloak/standalone/data
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 5s
      timeout: 5s
      retries: 30
    command:
      - start-dev
  webhook_relay_stripe:
    image: webhookrelay/webhookrelayd
    entrypoint: ${WEBHOOK_RELAY_ENTRYPOINT:-tail -f /dev/null}
    environment:
      - KEY=${WEBHOOK_RELAY_KEY:-}
      - SECRET=${WEBHOOK_RELAY_SECRET:-}
      - BUCKET=${WEBHOOK_RELAY_BUCKET:-}
  unstructured:
    # ports:
    #   - 5000:5000
    build:
      context: unstructured
      dockerfile: Dockerfile
    entrypoint: ${UNSTRUCTURED_ENTRYPOINT:-tail -f /dev/null}
    restart: always
    volumes:
      - ./unstructured/src:/home/notebook-user/app/src
  dev_gpu_runner:
    profiles: ["dev_gpu_runner"]
    build:
      context: .
      dockerfile: Dockerfile.runner
    entrypoint: ${RUNNER_ENTRYPOINT:-tail -f /dev/null}
    volumes:
      - .:/workspace/helix
      - ./cog/helix_cog_wrapper.py:/workspace/cog-sdxl/helix_cog_wrapper.py
      - ~/.cache/huggingface:/root/.cache/huggingface
      # comment these out if you don't have appropriate repos checked out
      #- ../cog-sdxl/predict.py:/workspace/cog-sdxl/predict.py
      #- ../cog-sdxl/weights.py:/workspace/cog-sdxl/weights.py
      # - ../axolotl:/workspace/axolotl
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  frontend:
    ports:
      - 8081:${FRONTEND_INTERNAL_PORT:-8081}
    build:
      context: frontend
      dockerfile: Dockerfile
      # set FRONTEND_TARGET=deploy-frontend in .env to build production assets
      target: ${FRONTEND_TARGET:-build-env}
    restart: always
    # let it be defined but not empty (no colon below), since an empty entrypoint means use the one from the Dockerfile
    entrypoint: ${FRONTEND_ENTRYPOINT-yarn run dev}
    volumes:
      - ./frontend/package.json:/app/package.json
      - ./frontend/src:/app/src
      - ./frontend/assets:/app/assets
      - ./frontend/index.html:/app/index.html
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/vite.config.ts:/app/vite.config.ts

volumes:
  helix-keycloak-db:
  helix-postgres-db:
  helix-filestore:

